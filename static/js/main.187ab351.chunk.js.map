{"version":3,"sources":["api/defs/prop-types.js","api/mockAPI/data.js","api/mockAPI/utils.js","api/mockAPI/sessions.js","api/mockAPI/contract_templates.js","api/mockAPI/positions.js","api/mockAPI/instructors.js","api/mockAPI/wage_chunks.js","api/mockAPI/assignments.js","api/mockAPI/applicants.js","api/mockAPI/applications.js","api/mockAPI/active_user.js","api/mockAPI/debug.js","api/mockAPI/index.js","api/defs/doc-generation.js","views/globals/actions.js","components/mockAPI.js","api/actions/errors.js","api/actions/status.js","api/constants/index.js","api/actions/utils.js","libs/apiUtils.js","api/reducers/utils.js","api/reducers/sessions.js","api/reducers/users.js","api/actions/users.js","api/actions/sessions.js","api/reducers/positions.js","api/reducers/instructors.js","api/actions/instructors.js","api/reducers/contract_templates.js","api/actions/contract_templates.js","api/reducers/applicants.js","api/actions/applicants.js","api/actions/positions.js","api/reducers/assignments.js","api/actions/assignments.js","api/reducers/applications.js","api/actions/applications.js","api/actions/wage_chunks.js","api/actions/offers.js","views/dev_frame/index.js","libs/urlUtils.js","views/notificatons/index.js","views/offertable/actions.js","components/forms/common-controls.js","components/forms/session-editor.js","components/applicants-list.js","components/contract-templates-list.js","components/instructors.js","components/edit-field-widgets.js","views/instructors/editable-instructors-list.js","libs/utils.js","views/instructors/add-instructor-dialog.js","views/instructors/index.js","components/positions-list.js","components/search-box.js","libs/fileManager.js","components/import-button.js","components/offer-table.js","views/offertable/index.js","views/offertable/constants.js","components/forms/position-editor.js","components/forms/assignment-editor.js","components/forms/contract-template-editor.js","views/dashboard/index.js","components/assignments-list.js","components/email-button.js","views/cp_control_panel/ControlPanel.jsx","components/filtered-list.js","views/sessions/add-session-dialog.js","components/sessions.js","views/sessions/index.js","views/positions/add-position-dialog.js","views/positions/position-list.js","views/positions/index.js","views/assignments/add-assignment-dialog.js","views/assignments/assignment-details.js","views/assignments/offer-actions.js","views/assignments/index.js","views/contract_template/contract-template-dialog.js","views/contract_template/contract-template-list.js","views/contract_template/index.js","views/routes/index.js","components/header.js","components/filterable-menu.js","views/admin/header.js","components/active-session.js","components/active-user.js","App.jsx","views/offertable/reducers.js","views/globals/reducers.js","views/globals/constants.js","rootReducer.js","api/reducers/status.js","store.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","generatePropTypes","prop_types__WEBPACK_IMPORTED_MODULE_0__","PropTypes","id","oneOfType","number","string","apiResponse","shape","status","oneOf","isRequired","message","payload","any","apiResponseSuccess","apiResponseError","idOnly","session","start_date","end_date","name","contractTemplateMinimal","template_file","contractTemplate","template_name","position","position_code","position_title","hours_per_assignment","contract_template_id","duties","qualifications","ad_hours_per_assignment","ad_num_assignments","ad_open_date","ad_close_date","desired_num_assignments","current_enrollment","current_waitlisted","instructor_ids","arrayOf","instructor_preference","preference_level","applicant_id","instructor_id","instructor","first_name","last_name","email","utorid","assignment","note","offer_override_pdf","position_id","active_offer_status","applicant","student_number","phone","wageChunk","hours","rate","reportingTag","offer","position_start_date","position_end_date","first_time_ta","bool","instructor_contact_desc","pay_period_desc","installments","ta_coordinator_name","ta_coordinator_email","emailed_date","accepted_date","rejected_date","withdrawn_date","application","session_id","comments","program","department","previous_uoft_experience","yip","annotation","position_preference","user","roles","n","mockData","sessions","rate1","rate2","available_contract_templates","contract_templates","contract_templates_by_session","1","2","instructors","positions_by_session","positions","instructor_preferences","applicants","assignments_by_session","assignments","wage_chunks","assignment_id","offers","applications","previous_uoft_ta_experience","position_preferences","users","active_user","getUnusedId","data","prop","arguments","length","undefined","ids","map","x","filter","max","Math","apply","concat","Object","toConsumableArray","isNaN","round","random","find","obj","s","findAllById","includes","deleteInArray","splice","indexOf","getAttributesCheckMessage","props","required","unique","_i2","_Object$entries","entries","_ref3","_ref2","slicedToArray","requirements","MockAPIController","ownData","classCallCheck","this","createClass","key","value","query","rawFind","Error","JSON","stringify","newId","newItem","objectSpread2","push","item","updateIfFound","validateNew","create","Session","_MockAPIController","possibleConstructorReturn","getPrototypeOf","call","inherits","newSession","get","prototype","sessionsRoutes","/sessions","documentCallback","func","findAll","summary","returns","wrappedPropTypes","docApiPropTypes","post","params","body","upsert","posts","/sessions/delete","ContractTemplate","_this","template","findAllBySession","matchingSession","newTemplate","templatesRoutes","/available_contract_templates","/sessions/:session_id/contract_templates","upsertBySession","Position","matchingPosition","_i","_Object$values","values","bySessionsList","newPosition","ret","keys","positionsRoutes","/sessions/:session_id/positions","/positions","assign","/positions/delete","Instructor","matchingInstructor","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","instructorsRoutes","/instructors","/instructors/delete","WageChunk","matchingAssignment","Assignment","wageChunks","existingWageChunks","findAllByAssignment","forEach","chunk","upsertByAssignment","wageChunkRoutes","/wage_chunks","/wage_chunks/delete","_len","numbers","Array","_key","_numbers","ActiveOffer","findByAssignment","getWageChunkInfo","activeOffer","getActiveOffer","upsertedAssignment","findAssociatedSession","dateRanges","Date","december","getFullYear","january","toISOString","splitDateRangeAtNewYear","range","perChunkDelta","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_ensureAssignment","nag_count","assignmentsRoutes","/sessions/:session_id/assignments","/assignments/:assignment_id","/assignments/:assignment_id/active_offer","/assignments/:assignment_id/wage_chunks","/assignments","setAllByAssignment","/assignments/:assignment_id/active_offer/withdraw","withdrawByAssignment","/assignments/:assignment_id/active_offer/reject","rejectByAssignment","/assignments/:assignment_id/active_offer/accept","acceptByAssignment","/assignments/:assignment_id/active_offer/create","createByAssignment","/assignments/:assignment_id/active_offer/email","emailByAssignment","/assignments/:assignment_id/active_offer/nag","nagByAssignment","Applicant","applicantIds","applicantsRoutes","/sessions/:session_id/applicants","/applicants","/applicants/:applicant_id","Application","applicationsRoutes","/sessions/:session_id/applications","/applications","User","matchingUser","activeUserRoutes","/users","/active_user","getActiveUser","storage","Debug","getAllData","makeSnapshot","snapshot","parse","clearData","debugRoutes","/debug/active_user","/debug/clear_data","/debug/snapshot","/debug/restore_snapshot","restoreSnapshot","MockAPI","seedData","routePrefix","getRoutes","/all_data","exclude","postRoutes","apiGET","url","_getRoutesParsers","route","match","spec","e","toString","apiPOST","_postRoutesParsers","active","routeStr","r","Route","_this2","delay","_origFetch","fetch","window","init","parsedURL","mockResponse","responseObj","_args","regenerator_default","a","async","_context","prev","URL","pathname","startsWith","replace","method","console","log","Response","Blob","type","statusText","abrupt","Promise","resolve","setTimeout","stop","mockAPI","CallAtom","args","_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__","join","createCallChain","chain","propTypesProxy","callChain","Proxy","receiver","Reflect","thisArg","lastProp","pop","ownKeys","_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__","PROPTYPES_TO_SWAGGER_TYPES","object","array","wrappedPropTypesToSwagger","pt","_pt$callChain","_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","requiredList","swaggerVal","warn","wrapInStandardApiResponseForSwagger","properties","enum","urlTemplateToSwagger","parsed","RouteParser","templateVars","subs","_templateVars","templateVar","decodeURI","reverse","documentedCallbackToSwagger","docs","responses","default","prefixRoles","parameters","in","description","content","application/json","schema","requestBody","mockApiRoutesAsSwaggerPaths","_mockAPI$getRoutes","_mockAPI$postRoutes","_i3","_Object$entries2","_ref10","_ref5","path","val","_urlTemplateToSwagger","templatePath","_i4","_Object$entries3","_ref11","_ref7","_urlTemplateToSwagger2","tags","from","Set","split","_loop","_ref8","_Object$entries4","_i5","_ref9","info","applicableTags","sortedRet","sort","_ref12","_ref12$exclude","attrs","_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","setGlobals","globals","location","searchParams","URLSearchParams","append","history","pushState","newurl","search","replaceGlobalFetch","restoreGlobalFetch","setActive","state","_props$fetchSessions","fetchSessions","_props$_setActive","_setActive","ToggleMockApi","_React$useState","React","useState","_React$useState2","fullProps","useEffect","react_default","createElement","title","ButtonGroup","Button","variant","onClick","mock","require","connect","ui","defaultNotifProps","autoDismiss","fetchError","error","upsertError","deleteError","apiError","apiInteractionStart","apiInteractionEnd","arrayToHash","l","indexBy","isArray","actionFactory","splitObjByProps","filtered","hasOwnProperty","flattenIdFactory","inPropName","outPropName","isArrayOfIds","_splitObjByProps","_splitObjByProps2","onActiveSessionChangeActions","runOnActiveSessionChange","action","Function","validatedApiDispatcher","_ref","dispatcher","propTypes","onErrorDispatch","dispatch","wasPropTypesError","propTypeCheck","i","statusId","arg","checkPropTypes","uuid","awrap","t0","finish","API_URL","FETCH_INIT","credentials","headers","Content-Type","ApiError","resp","errorMessage","captureStackTrace","assertThisInitialized","ApiFetchError","response","_ensurePath","_processFetchResponse","json","sent","_context2","_args3","_context3","upsertItem","modelData","didUpdate","newModelData","createBasicReducerObject","FETCH_MANY","FETCH_ONE","UPSERT_ONE","DELETE_ONE","defineProperty","_modelData","deletedItem","createReducer","initialState","handlers","_storePath","pushToPath","dir","unshift","reducer","_origCreateReducer","_localStoreSelector","localState","createLocalStoreSelector","combineReducers","model","pushToPathCallbacks","_ref4","newReducer","_origCombineReducers","basicReducers","sessionsReducer","activeSession","usersReducer","active_role","_createReducer","fetchActiveUserSuccess","fetchUsersSuccess","upsertUserSuccess","setActiveUserRoleSuccess","fetchActiveUser","getState","role","activeRoleSelector","fetchUsers","setActiveUserRole","_context4","usersSelector","fetchSessionsSuccess","fetchOneSessionSuccess","upsertOneSessionSuccess","setActiveSessionAction","activeSessionSelector","setActiveSession","upsertSession","forceChange","promises","_context5","all","localStoreSelector","sessionsSelector","createSelector","positionsReducer","positionId","instructorsReducer","fetchInstructorsSuccess","fetchOneInstructorSuccess","upsertOneInstructorSuccess","deleteOneInstructorSuccess","fetchInstructors","upsertInstructor","instructorsSelector","contractTemplatesReducer","fetchContractTemplatesSuccess","fetchAllContractTemplatesSuccess","upsertOneContractTemplateSuccess","deleteOneContractTemplateSuccess","fetchContractTemplates","activeSessionId","upsertContractTemplate","fetchAllContractTemplates","contractTemplatesSelector","allContractTemplatesSelector","insertIfMissing","target","source","missingItems","some","applicantsReducer","fetchApplicantsSuccess","fetchOneApplicantSuccess","upsertOneApplicantSuccess","deleteOneApplicantSuccess","fetchApplicants","upsertApplicant","applicantsSelector","fetchPositionsSuccess","fetchOnePositionSuccess","upsertOnePositionSuccess","deleteOnePositionSuccess","fetchPositions","instructorsToInstructorIds","contractTemplateToContractTemplateId","instructorToInstructorId","applicantToApplicantId","prepForApi","preference","upsertPosition","_positionsSelector","positionsSelector","contractTemplates","instructorsById","contractTemplatesById","applicantsById","rest","objectWithoutProperties","contract_template","setWageChunks","assignmentId","_wageChunksByAssignmentId","assignmentsReducer","_objectSpread3","fetchAssignmentsSuccess","fetchOneAssignmentSuccess","upsertOneAssignmentSuccess","deleteOneAssignmentSuccess","fetchAssignments","fetchAssignment","positionToPositionId","upsertAssignment","_assignmentsSelector","assignmentsSelector","applicationsReducer","fetchApplicationsSuccess","fetchOneApplicationSuccess","upsertOneApplicationSuccess","deleteOneApplicationSuccess","fetchApplications","_applicationsSelector","positionsById","fetchWageChunksForAssignmentSuccess","upsertWageChunksForAssignmentSuccess","upsertOneWageChunkSuccess","deleteOneWageChunkSuccess","fetchWageChunksForAssignment","upsertWageChunksForAssignment","wageChunksByAssignmentSelector","fetchOfferSucces","setOfferAcceptedSuccess","setOfferRejectedSuccess","offerCreateSuccess","offerEmailSuccess","offerNagSuccess","offerWithdrawSuccess","setOfferForAssignmentAccepted","setOfferForAssignmentRejected","offerForAssignmentWithdraw","offerForAssignmentCreate","offerForAssignmentEmail","_context6","offerForAssignmentNag","_context7","BootstrapNavLink","Nav","Link","as","NavLink","activeClassName","to","children","swaggerData","openapi","servers","paths","ConnectedToggleMockApi","stringToNativeType","ConnectedNotifications","notifications","Notifications","offerTableSelector","offerTable","fieldEditorFactory","boundData","setBoundData","setAttrFactory","attr","coerceFunc","newVal","newData","inputAttrs","valueFunc","Number","slice","Fragment","Form","Label","Control","onChange","DialogRow","Row","style","alignItems","Children","child","index","Group","Col","SessionEditor","createFieldEditor","setSession","step","min","ApplicantsList","_React$Component","applicantsList","Component","DEFAULT_COLUMNS","Header","accessor","ContractTemplatesList","_props$columns","columns","react_table_es","showPagination","minRows","InstructorsList","DEFAULT_INSTRUCTOR","InstructorEditor","instructorProps","setInstructor","newInstructor","EditFieldDialog","show","onHide","fieldVal","setFieldVal","cancelClick","changeIndicator","className","Modal","closeButton","Title","Body","currentTarget","Footer","EditFieldIcon","hidden","index_esm","EditableField","_props$editable","editable","_React$useState3","_React$useState4","dialogShow","setDialogShow","EditableCell","column","field","applicantId","original","ConnectedInstructorsList","generateCell","Cell","strip","trim","BLANK_INSTRUCTOR","ConnectedAddInstructorDialog","_props$onHide","setNewInstructor","conflicts","delayShow","immediateShow","getConficts","Alert","disabled","AdminIstructorsView","addDialogVisible","setAddDialogVisible","Badge","PositionsList","SearchBox","filters","event","input","v","toLowerCase","setState","nextProps","placeholder","bind","readFile","component","loadDataFunc","files","reader","FileReader","importFunc","importChoices","readAsText","onload","result","optSuccess","success","file","getExtension","extension","ImportButton","uploadFunc","_useState","_useState2","_useState3","_useState4","dialogContents","_useState5","_useState6","dialogOpen","setDialogOpen","handleClose","DropdownButton","accept","display","htmlFor","Dropdown","Item","SelectTable","selectTableHOC","ReactTable","COLUMNS","width","backgroundColor","toUpperCase","OfferTable","selected","setSelected","_selected","_setSelected","filterString","setFilterString","lastSelected","setLastSelected","_React$useState5","_React$useState6","allSelected","setAllSelected","filteredData","row","rowToStr","reactTableRef","useRef","getDisplayedData","getWrappedInstance","getResolvedState","sortedData","_original","displayedData","every","has","tableComponent","ref","toggleSelection","onToggleRow","shiftOn","rowIds","lastSelectedIndex","selectedIndex","start","end","newSelectedState","newSelected","add","selectAll","toggleAll","isSelected","selectType","keyField","ApplicantCell","AssignmentCell","applicationId","ConnectedOfferTable","selectedAssignmentIds","generateApplicantCell","word","charAt","capitalize","DEFAULT_POSITION","PositionEditor","positionProp","setPosition","_props$instructors","_props$contractTempla","_props$defaultContrac","defaultContractTemplate","lib","ignoreDiacritics","multiple","labelKey","option","options","selectedContractTypes","DEFAULT_ASSIGNMENT","AssignmentEditor","assignmentProp","setAssignment","DEFAULT_CONTRACT_TEMPLATE","ContractTemplateEditor","contractTemplateProp","setContractTemplate","_props$availableTempl","availableTemplates","templates","templateFile","ConnectedApplicantList","ConnectedContractTemplatesList","ConnectedPositionsList","ConnectedAssignmentsList","assignmentsList","ConnectedSearchBox","ConnectedEmailButton","emailHandler","emailContract","nagOffers","ConnectedPositionEditor","ConnectedAssignmentEditor","DashboardWidget","margin","color","fontFamily","border","padding","Dashboard","_React$useState7","_React$useState8","_React$useState9","_React$useState10","ConnectedFilteredList","ownProps","listRenderer","filterFunc","Renderer","setQuery","ControlPanel","BLANK_SESSION","ConnectedAddSessionDialog","setNewSession","ConnectedSessionList","AdminSessionsView","BLANK_POSITION","ConnectedAddPositionDialog","setNewPosition","defaultTemplate","AdminPositionsView","position_list_ConnectedPositionsList","BLANK_ASSIGNMENT","ConnectedAddAssignmentDialog","newAssignment","setNewAssignment","ConnectedAssignmentDetails","wageChunksByAssignment","changeHoursFactory","newWageChunks","j","position_name","ConnectedViewAssignmentDetailsButton","selectedAssignments","visibleAssignments","setVisibleAssignments","ConnectedOfferActionButtons","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","AdminAssignmentsView","BLANK_CONTRACT_TEMPLATE","ConnectedAddContractTemplateDialog","newContractTemplate","setNewContractTemplate","matchingTemplate","ConnectedContractTemplateList","AdminContractTemplatesView","AdminRoutes","react_router","exact","dashboard","cp_control_panel_ControlPanel","_props$routes","routes","_props$infoComponents","infoComponents","Navbar","bg","Brand","NavDropdown","tabIndex","header_BootstrapNavLink","subroutes","subroute","fullroute","FilterableMenuContents","forwardRef","clearFilter","setFilter","sessionList","toArray","emptyListMessage","FormControl","autoFocus","FilterableMenu","items","activeItemId","Menu","eventKey","AdminHeader","ConnectedActiveSessionDisplay","ConnectedActiveUserDisplay","mapSessionsDispatchToProps","_props$sessions","dropdownVisible","setDropdownVisible","label","onSelect","onToggle","desiredVisibility","Toggle","mapActiveUserDispatchToProps","activeUser","activeRole","_props$activeUser","isActiveRole","App","newGlobals","parseURLSearchString","ConnectedApp","offerTableReducer","globalReducer","ongoingInteraction","ongoingInteractionsList","status_createReducer","notificationReducer","form","formReducer","persistConfig","whitelist","persistedReducer","persistReducer","rootReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","configureStore","DevFrame","expand","href","Collapse","swagger_ui_react_default","docExpansion","ReactDOM","render","react_router_dom","es","integration_react","src_DevFrame","document","getElementById"],"mappings":"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","file":"static/js/main.187ab351.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\n/**\n * Generate proptypes for API responses using the passed-in proptypes function.\n * This is encapsulated so that `PropTypes` can be replaced (for example, with a proxy\n * used for documentation generation).\n *\n * @param {*} PropTypes - a PropTypes function (coming from the `\"prop-types\"` module or elsewhere)\n * @returns an object of PropTypes\n */\nfunction generatePropTypes(PropTypes) {\n    const id = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\n\n    return {\n        apiResponse: PropTypes.shape({\n            status: PropTypes.oneOf([\"success\", \"error\"]).isRequired,\n            message: PropTypes.string,\n            payload: PropTypes.any\n        }),\n        apiResponseSuccess: PropTypes.shape({\n            status: PropTypes.oneOf([\"success\"]).isRequired,\n            message: PropTypes.string,\n            payload: PropTypes.any\n        }),\n        apiResponseError: PropTypes.shape({\n            status: PropTypes.oneOf([\"error\"]).isRequired,\n            message: PropTypes.string.isRequired,\n            payload: PropTypes.any\n        }),\n        idOnly: PropTypes.shape({\n            id\n        }),\n        session: PropTypes.shape({\n            id,\n            start_date: PropTypes.string,\n            end_date: PropTypes.string,\n            name: PropTypes.string.isRequired\n        }),\n        contractTemplateMinimal: PropTypes.shape({\n            template_file: PropTypes.string\n        }),\n        contractTemplate: PropTypes.shape({\n            template_file: PropTypes.string,\n            template_name: PropTypes.string\n        }),\n        position: PropTypes.shape({\n            position_code: PropTypes.string.isRequired,\n            position_title: PropTypes.string,\n            hours_per_assignment: PropTypes.number,\n            start_date: PropTypes.string,\n            end_date: PropTypes.string,\n            contract_template_id: id,\n            duties: PropTypes.string,\n            qualifications: PropTypes.string,\n            ad_hours_per_assignment: PropTypes.number,\n            ad_num_assignments: PropTypes.number,\n            ad_open_date: PropTypes.string,\n            ad_close_date: PropTypes.string,\n            desired_num_assignments: PropTypes.number,\n            current_enrollment: PropTypes.number,\n            current_waitlisted: PropTypes.number,\n            instructor_ids: PropTypes.arrayOf(id),\n            instructor_preference: PropTypes.arrayOf(\n                PropTypes.shape({\n                    preference_level: PropTypes.number,\n                    applicant_id: id,\n                    instructor_id: id\n                })\n            )\n        }),\n        instructor: PropTypes.shape({\n            first_name: PropTypes.string.isRequired,\n            last_name: PropTypes.string.isRequired,\n            email: PropTypes.string,\n            utorid: PropTypes.string.isRequired\n        }),\n        assignment: PropTypes.shape({\n            start_date: PropTypes.string,\n            end_date: PropTypes.string,\n            note: PropTypes.string,\n            offer_override_pdf: PropTypes.string,\n            applicant_id: id.isRequired,\n            position_id: id.isRequired,\n            active_offer_status: PropTypes.oneOf([\n                \"accepted\",\n                \"rejected\",\n                \"pending\",\n                null\n            ])\n        }),\n        applicant: PropTypes.shape({\n            utorid: PropTypes.string.isRequired,\n            student_number: PropTypes.string,\n            first_name: PropTypes.string.isRequired,\n            last_name: PropTypes.string.isRequired,\n            email: PropTypes.string,\n            phone: PropTypes.string\n        }),\n        wageChunk: PropTypes.shape({\n            start_date: PropTypes.string,\n            end_date: PropTypes.string,\n            hours: PropTypes.number,\n            rate: PropTypes.number\n        }),\n        reportingTag: PropTypes.shape({\n            name: PropTypes.string\n        }),\n        offer: PropTypes.shape({\n            first_name: PropTypes.string,\n            last_name: PropTypes.string,\n            email: PropTypes.string,\n            position_code: PropTypes.string,\n            position_title: PropTypes.string,\n            position_start_date: PropTypes.string,\n            position_end_date: PropTypes.string,\n            first_time_ta: PropTypes.bool,\n            instructor_contact_desc: PropTypes.string,\n            pay_period_desc: PropTypes.string,\n            installments: PropTypes.number,\n            ta_coordinator_name: PropTypes.string,\n            ta_coordinator_email: PropTypes.string,\n            emailed_date: PropTypes.string,\n            status: PropTypes.string,\n            accepted_date: PropTypes.string,\n            rejected_date: PropTypes.string,\n            withdrawn_date: PropTypes.string\n        }),\n        application: PropTypes.shape({\n            session_id: id,\n            comments: PropTypes.string,\n            program: PropTypes.string,\n            department: PropTypes.string,\n            previous_uoft_experience: PropTypes.string,\n            yip: PropTypes.number,\n            annotation: PropTypes.string,\n            applicant_id: id,\n            position_preference: PropTypes.arrayOf(\n                PropTypes.shape({\n                    preference_level: PropTypes.number,\n                    position_id: id\n                })\n            )\n        }),\n        user: PropTypes.shape({\n            utorid: PropTypes.string,\n            roles: PropTypes.arrayOf(PropTypes.string),\n            email: PropTypes.string\n        })\n    };\n}\n\nconst apiPropTypes = generatePropTypes(PropTypes);\n\nexport { apiPropTypes, generatePropTypes };\n","export const mockData = {\n    sessions: [\n        {\n            id: 1,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            name: \"2019 Fall\",\n            rate1: 45.55,\n            rate2: 47.33\n        },\n        {\n            id: 2,\n            start_date: \"2020-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-30T00:00:00.000Z\",\n            name: \"2021 Spring\",\n            rate1: 45.55,\n            rate2: null\n        }\n    ],\n    available_contract_templates: [\n        {\n            template_file: \"/math/default.html\"\n        },\n        {\n            template_file: \"/math/default2018.html\"\n        },\n        {\n            template_file: \"/math/invigilate.html\"\n        },\n        {\n            template_file: \"/math/invigilate2014.html\"\n        },\n        {\n            template_file: \"/math/oto.html\"\n        }\n    ],\n    contract_templates: [\n        {\n            id: 1,\n            template_name: \"standard\",\n            template_file: \"/math/default.html\"\n        },\n        {\n            id: 2,\n            template_name: \"oto\",\n            template_file: \"/math/oto.html\"\n        },\n        {\n            id: 3,\n            template_name: \"standard\",\n            template_file: \"/math/default2018.html\"\n        },\n        {\n            id: 4,\n            template_name: \"invigilate\",\n            template_file: \"/math/invigilate.html\"\n        }\n    ],\n    contract_templates_by_session: {\n        \"1\": [1, 2],\n        \"2\": [3, 4]\n    },\n    instructors: [\n        {\n            id: 1000,\n            last_name: \"Smith\",\n            first_name: \"Henry\",\n            email: \"hery.smith@utoronto.ca\",\n            utorid: \"smithh\"\n        },\n        {\n            id: 1001,\n            last_name: \"Garcia\",\n            first_name: \"Emily\",\n            email: \"emily.garcia@utoronto.ca\",\n            utorid: \"garciae\"\n        },\n        {\n            id: 1002,\n            last_name: \"Miller\",\n            first_name: \"Megan\",\n            email: \"megan.miller@utoronto.ca\",\n            utorid: \"millerm\"\n        },\n        {\n            id: 1003,\n            last_name: \"Beera\",\n            first_name: \"Lizzy\",\n            email: \"lizzy.beera@utoronto.ca\",\n            utorid: \"beeral\"\n        }\n    ],\n    positions_by_session: {\n        \"1\": [10, 11, 14, 15, 16],\n        \"2\": [12, 13]\n    },\n    positions: [\n        {\n            id: 10,\n            position_code: \"MAT135H1F\",\n            position_title: \"Calculus I\",\n            hours_per_assignment: 70,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            contract_template_id: 1,\n            duties: \"Tutorials\",\n            qualifications: \"Teaching skill\",\n            ad_hours_per_assignment: 70,\n            ad_num_assignments: 15,\n            ad_open_date: \"2019-08-01T00:00:00.000Z\",\n            ad_close_date: \"2019-08-15T00:00:00.000Z\",\n            desired_num_assignments: 15,\n            current_enrollment: 1200,\n            current_waitlisted: 200,\n            instructor_ids: [1000, 1001],\n            instructor_preferences: [\n                {\n                    preference_level: 2,\n                    applicant_id: 2000,\n                    instructor_id: 1000\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2002,\n                    instructor_id: 1000\n                },\n                {\n                    preference_level: -1,\n                    applicant_id: 2005,\n                    instructor_id: 1001\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2002,\n                    instructor_id: 1001\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2006,\n                    instructor_id: 1001\n                }\n            ]\n        },\n        {\n            id: 11,\n            position_code: \"MAT136H1F\",\n            position_title: \"Calculus II\",\n            hours_per_assignment: 70,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            contract_template_id: 2,\n            instructor_ids: []\n        },\n        {\n            id: 12,\n            position_code: \"CSC135H1F\",\n            position_title: \"Computer Fun\",\n            hours_per_assignment: 70,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            duties: \"Tutorials\",\n            contract_template_id: 3,\n            instructor_ids: [1000],\n            instructor_preferences: [\n                {\n                    preference_level: -1,\n                    applicant_id: 2005,\n                    instructor_id: 1000\n                },\n                {\n                    preference_level: 2,\n                    applicant_id: 2001,\n                    instructor_id: 1000\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2006,\n                    instructor_id: 1000\n                }\n            ]\n        },\n        {\n            id: 13,\n            position_code: \"MAT235H1F\",\n            position_title: \"Calculus III\",\n            hours_per_assignment: 70,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            contract_template_id: 3,\n            instructor_ids: [1002],\n            instructor_preferences: [\n                {\n                    preference_level: 2,\n                    applicant_id: 2000,\n                    instructor_id: 1002\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2002,\n                    instructor_id: 1002\n                }\n            ]\n        },\n        {\n            instructor_ids: [1002],\n            position_code: \"CSC100H1S\",\n            position_title: \"Computers for Humans\",\n            hours_per_assignment: 100,\n            duties:\n                \"Some combination of marking, invigilating, tutorials, office hours, and the help centre.\",\n            contract_template_id: 1,\n            start_date: \"2021-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 14\n        },\n        {\n            instructor_ids: [1000],\n            position_code: \"MAT137Y1Y\",\n            position_title: \"Calculus!\",\n            hours_per_assignment: 250,\n            duties:\n                \"Some combination of marking, invigilating, tutorials, office hours, and the help centre.\",\n            contract_template_id: 1,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            qualifications: \"Skilled Proofs Reader\",\n            current_enrollment: 1500,\n            current_waitlisted: 78,\n            desired_num_assignments: 22,\n            id: 15\n        },\n        {\n            instructor_ids: [1001],\n            position_code: \"MAT135H1F Head TA\",\n            position_title: \"Calculus I\",\n            hours_per_assignment: 225,\n            duties: \"Top-notch Head TA Stuff\",\n            contract_template_id: 1,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            desired_num_assignments: 3,\n            id: 16\n        }\n    ],\n    applicants: [\n        {\n            id: 2000,\n            utorid: \"weasleyr\",\n            student_number: \"89013443\",\n            first_name: \"Ron\",\n            last_name: \"Weasley\",\n            email: \"ron@potter.com\",\n            phone: \"543-223-9993\"\n        },\n        {\n            id: 2001,\n            utorid: \"potterh\",\n            student_number: \"999666999\",\n            first_name: \"Harry\",\n            last_name: \"Potter\",\n            email: \"harry@potter.com\"\n        },\n        {\n            id: 2002,\n            utorid: \"smithb\",\n            email: \"smithb@mail.utoronto.ca\",\n            first_name: \"Bethany\",\n            last_name: \"Smith\",\n            student_number: \"131382748\"\n        },\n        {\n            id: 2003,\n            utorid: \"wilsonh\",\n            email: \"wilsonh@mail.utoronto.ca\",\n            first_name: \"Hanna\",\n            last_name: \"Wilson\",\n            student_number: \"600366904\"\n        },\n        {\n            id: 2004,\n            utorid: \"molinat\",\n            email: \"molinat@mail.utoronto.ca\",\n            first_name: \"Troy\",\n            last_name: \"Molina\",\n            student_number: \"328333023\"\n        },\n        {\n            id: 2005,\n            utorid: \"howeyb\",\n            email: \"howeyb@mail.utoronto.ca\",\n            first_name: \"Brett\",\n            last_name: \"Howey\",\n            student_number: \"329613524\"\n        },\n        {\n            id: 2006,\n            utorid: \"brownd\",\n            email: \"brownd@mail.utoronto.ca\",\n            first_name: \"David\",\n            last_name: \"Brown\",\n            student_number: \"29151485\"\n        }\n    ],\n    assignments_by_session: {\n        \"1\": [100, 101, 102, 103, 104, 105, 106, 107, 108, 109],\n        \"2\": []\n    },\n    assignments: [\n        {\n            id: 100,\n            position_id: 10,\n            applicant_id: 2001,\n            hours: 90\n        },\n        {\n            id: 101,\n            position_id: 10,\n            applicant_id: 2005,\n            hours: 95\n        },\n        {\n            note: \"\",\n            position_id: 16,\n            applicant_id: 2000,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            id: 102\n        },\n        {\n            note: \"\",\n            position_id: 16,\n            applicant_id: 2002,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            id: 103\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2001,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 104\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2002,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 105\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2005,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 106\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2000,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 107\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2006,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 108\n        },\n        {\n            note: \"\",\n            position_id: 14,\n            applicant_id: 2002,\n            start_date: \"2021-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 109\n        }\n    ],\n    wage_chunks: [\n        {\n            id: 3000,\n            assignment_id: 100,\n            hours: 20,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            rate: 10.01\n        },\n        {\n            id: 3001,\n            assignment_id: 100,\n            hours: 35,\n            start_date: \"2020-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-20T00:00:00.000Z\",\n            rate: 12.02\n        },\n        {\n            id: 3002,\n            assignment_id: 101,\n            hours: 95,\n            start_date: \"2019-09-01T00:00:00.000Z\",\n            end_date: \"2020-04-20T00:00:00.000Z\",\n            rate: null\n        },\n        {\n            id: 3003,\n            assignment_id: 102,\n            hours: 225,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\"\n        },\n        {\n            id: 3004,\n            assignment_id: 103,\n            hours: 225,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\"\n        },\n        {\n            id: 3005,\n            assignment_id: 104,\n            hours: 125,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\"\n        },\n        {\n            id: 3006,\n            assignment_id: 104,\n            hours: 125,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\"\n        },\n        {\n            id: 3007,\n            assignment_id: 105,\n            hours: 125,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\"\n        },\n        {\n            id: 3008,\n            assignment_id: 105,\n            hours: 125,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\"\n        },\n        {\n            id: 3009,\n            assignment_id: 106,\n            hours: 125,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\"\n        },\n        {\n            id: 3010,\n            assignment_id: 106,\n            hours: 125,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\"\n        },\n        {\n            id: 3011,\n            assignment_id: 107,\n            hours: 100,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\"\n        },\n        {\n            id: 3012,\n            assignment_id: 107,\n            hours: 100,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\"\n        },\n        {\n            id: 3013,\n            assignment_id: 108,\n            hours: 100,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\"\n        },\n        {\n            id: 3014,\n            assignment_id: 108,\n            hours: 100,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\"\n        },\n        {\n            id: 3015,\n            assignment_id: 109,\n            hours: 100,\n            start_date: \"2021-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\"\n        }\n    ],\n    offers: [\n        {\n            id: 10000,\n            assignment_id: 100,\n            status: \"withdrawn\"\n        },\n        {\n            id: 10001,\n            assignment_id: 100,\n            status: \"pending\"\n        },\n        {\n            id: 10002,\n            assignment_id: 101,\n            status: \"accepted\"\n        },\n        {\n            id: 10003,\n            assignment_id: 102,\n            status: \"withdrawn\"\n        }\n    ],\n    applications: [\n        {\n            comments: \"\",\n            program: \"Phd\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"Last year I TAed a bunch\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2000,\n            position_preferences: [\n                {\n                    preference_level: 2,\n                    position_id: 10\n                },\n                {\n                    preference_level: 3,\n                    position_id: 15\n                }\n            ]\n        },\n        {\n            comments: \"\",\n            program: \"UG\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2001,\n            position_preferences: [\n                {\n                    preference_level: 0,\n                    position_id: 12\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13\n                }\n            ]\n        },\n        {\n            comments: \"\",\n            program: \"Phd\",\n            department: \"Math\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2002,\n            position_preferences: [\n                {\n                    preference_level: 3,\n                    position_id: 10\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13\n                },\n                {\n                    preference_level: 2,\n                    position_id: 12\n                },\n                {\n                    preference_level: 0,\n                    position_id: 11\n                }\n            ]\n        },\n        {\n            comments: \"\",\n            program: \"Phd\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2005,\n            position_preferences: [\n                {\n                    preference_level: 2,\n                    position_id: 10\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13\n                },\n                {\n                    preference_level: 0,\n                    position_id: 12\n                },\n                {\n                    preference_level: 1,\n                    position_id: 11\n                }\n            ]\n        },\n        {\n            comments: \"\",\n            program: \"UG\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2006,\n            position_preferences: [\n                {\n                    preference_level: 3,\n                    position_id: 10\n                },\n                {\n                    preference_level: 0,\n                    position_id: 13\n                },\n                {\n                    preference_level: 2,\n                    position_id: 12\n                }\n            ]\n        },\n        {\n            comments: \"\",\n            program: \"UG\",\n            department: \"Math\",\n            previous_uoft_ta_experience: \"\",\n            yip: 3,\n            annotation: \"\",\n            session_id: 2,\n            applicant_id: 2002,\n            position_preferences: [\n                {\n                    preference_level: 3,\n                    position_id: 10\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13\n                },\n                {\n                    preference_level: 2,\n                    position_id: 12\n                },\n                {\n                    preference_level: 0,\n                    position_id: 11\n                }\n            ]\n        },\n        {\n            comments: \"\",\n            program: \"MSc\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 2,\n            applicant_id: 2003,\n            position_preferences: [\n                {\n                    preference_level: 3,\n                    position_id: 10\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13\n                },\n                {\n                    preference_level: 2,\n                    position_id: 12\n                },\n                {\n                    preference_level: 0,\n                    position_id: 11\n                }\n            ]\n        },\n        {\n            comments: \"\",\n            program: \"UG\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 4,\n            annotation: \"\",\n            session_id: 2,\n            applicant_id: 2004,\n            position_preferences: [\n                {\n                    preference_level: 1,\n                    position_id: 10\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13\n                }\n            ]\n        }\n    ],\n    users: [\n        {\n            email: \"hery.smith@utoronto.ca\",\n            utorid: \"smithh\",\n            roles: [\"admin\", \"instructor\"]\n        },\n        {\n            email: \"emily.garcia@utoronto.ca\",\n            utorid: \"garciae\",\n            roles: [\"instructor\"]\n        },\n        {\n            email: \"megan.miller@utoronto.ca\",\n            utorid: \"millerm\",\n            roles: [\"instructor\"]\n        },\n        {\n            email: \"lizzy.beera@utoronto.ca\",\n            utorid: \"beeral\",\n            roles: [\"instructor\"]\n        }\n    ],\n    active_user: \"smithh\"\n};\n","/**\n * A collection of untility functions to help with the mock API\n */\n\n/**\n * Adds the arguments passed in.\n *\n * @export\n * @param {} numbers\n * @returns {number}\n */\nexport function sum(...numbers) {\n    let ret = 0;\n    for (const num of numbers) {\n        ret += +num;\n    }\n    return ret;\n}\n\n/**\n * Given a date range, returns an array of one or two ranges depending\n * on whether the date range includes a new-years.\n *\n * @export\n * @param {(string|Date)} start_date\n * @param {(string|Date)} end_date\n * @returns {{start_date: string, end_date:string}[]}\n */\nexport function splitDateRangeAtNewYear(start_date, end_date) {\n    start_date = new Date(start_date);\n    end_date = new Date(end_date);\n    // For `Date`, 11 is december\n    const december = new Date(start_date.getFullYear(), 11, 31);\n    // For `Date`, 12 will be the first month of the subsequent year\n    const january = new Date(start_date.getFullYear(), 12, 1);\n    if (start_date <= december && end_date > december) {\n        return [\n            {\n                start_date: start_date.toISOString(),\n                end_date: december.toISOString()\n            },\n            {\n                start_date: january.toISOString(),\n                end_date: end_date.toISOString()\n            }\n        ];\n    }\n    return [\n        {\n            start_date: start_date.toISOString(),\n            end_date: end_date.toISOString()\n        }\n    ];\n}\n\n/**\n * Generates an unused Id based on the `prop` attribute.\n *\n * @export\n * @param {object[]} data - array of data with `prop` attributes\n * @param {string} [prop=\"id\"] - attribute to key on\n * @returns {number|string}\n */\nexport function getUnusedId(data, prop = \"id\") {\n    const ids = data.map(x => +x[prop]).filter(x => x != null);\n    const max = Math.max(0, ...ids);\n    if (isNaN(max)) {\n        // Somehow there was some other type mixed in with the ids. In this case,\n        // generate a random string\n        return \"id-\" + Math.round(Math.random() * 10000);\n    }\n    return max + 1;\n}\n\n/**\n * Find `obj` in `data` based on a matching attribute of `prop`.\n * Returns matching object or `undefined` if no match was found.\n *\n * @export\n * @param {*} obj\n * @param {*} [data=[]]\n * @param {string} [prop=\"id\"]\n * @returns {undefined|object}\n */\nexport function find(obj, data = [], prop = \"id\") {\n    // We really do want to use `==` and not `===` here.\n    // Sometimes ids are given as ints and sometimes as strings;\n    // we should work interchangibly with both.\n    // eslint-disable-next-line\n    return data.find(s => s[prop] == obj[prop]);\n}\n\n/**\n * Filter `data` to be a list which only includes items\n * with ids listed in `ids`.\n *\n * @export\n * @param {string[]} [ids=[]]\n * @param {object[]} [data=[]]\n * @param {string} [prop=\"id\"]\n * @returns {object[]}\n */\nexport function findAllById(ids = [], data = [], prop = \"id\") {\n    // ids can be numbers or strings; make sure we get a match in either case.\n    ids = ids.map(x => \"\" + x);\n    return data.filter(x => ids.includes(\"\" + x[prop]));\n}\n\n/**\n * Delete the first occurance of `obj` in `data`\n *\n * @export\n * @param {*} obj\n * @param {*} [data=[]]\n */\nexport function deleteInArray(obj, data = []) {\n    data.splice(data.indexOf(obj), 1);\n}\n\n/**\n * Verify whether attributes are nonempty/unique. If they fail these\n * checks, return an appropriate error message. If they pass, return `false`.\n *\n * @export\n * @param {object} obj\n * @param {object[]} [data=[]]\n * @param {boolean} [props={ id: { required: true, unique: true } }]\n * @returns {string|boolean} - `false` if all checks succeed. Otherwise an appropriate error message.\n */\nexport function getAttributesCheckMessage(\n    obj,\n    data = [],\n    props = { id: { required: true, unique: true } }\n) {\n    for (const [prop, requirements] of Object.entries(props)) {\n        // Required attributes cannot be null or the empty string\n        if (requirements.required && (obj[prop] == null || obj[prop] === \"\")) {\n            return `Property ${prop} cannot be empty`;\n        }\n        // Search the data for something with a matching prop. If we find\n        // anything, we are not unique\n        if (requirements.unique && find(obj, data, prop)) {\n            return `Duplicate entry exists for property ${prop} with value ${obj[prop]}`;\n        }\n    }\n    return false;\n}\n\n/**\n * Base class for mockAPI controllers. These handle\n * the mockAPI data and queries thereof.\n *\n * @export\n * @class MockAPIController\n */\nexport class MockAPIController {\n    constructor(data, ownData) {\n        this.data = data;\n        this.ownData = ownData;\n    }\n    /**\n     * Finds all instances of the given item; returns an array copy.\n     *\n     * @returns {object[]}\n     * @memberof MockAPIController\n     */\n    findAll() {\n        return [...this.ownData];\n    }\n    /**\n     * Finds a single instance of an item\n     *\n     * @param {({id: number}|number)} query\n     * @returns {object}\n     * @memberof MockAPIController\n     */\n    find(query) {\n        return this.rawFind(query);\n    }\n    /**\n     * Not to be overridden. The return value of this object\n     * must be an unmangled version of the actual data stored (so that it can be\n     * mutated, for example.)\n     *\n     * @param {*} query\n     * @returns\n     * @memberof MockAPIController\n     */\n    rawFind(query) {\n        if (query == null) {\n            return null;\n        }\n        if (query.id != null) {\n            return find(query, this.ownData);\n        }\n        return find({ id: query }, this.ownData);\n    }\n    /**\n     * Delete the given object (by id).\n     *\n     * @param {{id: number}} obj\n     * @memberof MockAPIController\n     */\n    delete(obj) {\n        obj = this.rawFind(obj);\n        if (!obj) {\n            throw new Error(`Cannot delete object ${JSON.stringify(obj)}`);\n        }\n        deleteInArray(obj, this.ownData);\n        return obj;\n    }\n    /**\n     * Get an unused ID\n     *\n     * @returns {number}\n     * @memberof MockAPIController\n     */\n    unusedId() {\n        if (!this.ownData) {\n            throw new Error(\n                \"Cannot get unused ID when `ownData` hasn't been set\"\n            );\n        }\n        return getUnusedId(this.ownData);\n    }\n    /**\n     * Creates a new item instance; no validation is performed.\n     *\n     * @param {object} obj - the new instance data\n     * @memberof MockAPIController\n     */\n    create(obj) {\n        const newId = getUnusedId(this.ownData);\n        const newItem = { ...obj, id: newId };\n        this.ownData.push(newItem);\n        return newItem;\n    }\n    /**\n     * Validates the properties of a new item instance. Throws an error\n     * if the properties are invalid/incompatable.\n     *\n     * @param {object} obj\n     * @memberof MockAPIController\n     */\n    validateNew() {\n        throw new Error(\"Subclasses must impliment `validateNew()`\");\n    }\n    /**\n     * Update an item if it can be found. Otherwise, return null.\n     *\n     * @param {*} obj\n     * @returns {(object|null)}\n     * @memberof MockAPIController\n     */\n    updateIfFound(obj) {\n        const item = this.rawFind(obj);\n        if (!item) {\n            return null;\n        }\n        // We've found a matching item. Update all non-null\n        // properties\n        for (const prop in obj) {\n            if (prop != null) {\n                item[prop] = obj[prop];\n            }\n        }\n        return item;\n    }\n    /**\n     * Upsert an item. `validateNew` will be run on the item before it is created.\n     * Null/undefined parameters will not be updated.\n     *\n     * @param {object} obj\n     * @returns {object}\n     * @memberof MockAPIController\n     */\n    upsert(obj) {\n        if (this.rawFind(obj)) {\n            return this.updateIfFound(obj);\n        }\n        this.validateNew(obj);\n        return this.create(obj);\n    }\n}\n","import { getAttributesCheckMessage, MockAPIController } from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes\n} from \"../defs/doc-generation\";\n\nexport class Session extends MockAPIController {\n    constructor(data) {\n        super(data, data.sessions);\n    }\n    create(session) {\n        const newSession = super.create(session);\n        // If we insert a new session, we need to make sure we create\n        // a corresponding assignments_by_session array\n        this.data.assignments_by_session[newSession.id] = [];\n        return newSession;\n    }\n    validateNew(session) {\n        // if we're here, we need to create a new session\n        // but check if the session name is empty or duplicate\n        const message = getAttributesCheckMessage(session, this.ownData, {\n            name: { required: true, unique: true }\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n}\n\nexport const sessionsRoutes = {\n    get: {\n        \"/sessions\": documentCallback({\n            func: data => new Session(data).findAll(),\n            summary: \"Get all available sessions\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.session)\n        })\n    },\n    post: {\n        \"/sessions\": documentCallback({\n            func: (data, params, body) => {\n                // body should be a session object. If it contains an id,\n                // update an existing session. Otherwise, create a new one.\n                return new Session(data).upsert(body);\n            },\n            summary: \"Upsert a session\",\n            returns: docApiPropTypes.session,\n            posts: docApiPropTypes.session\n        }),\n        \"/sessions/delete\": documentCallback({\n            func: (data, params, body) => {\n                return new Session(data).delete(body);\n            },\n            summary: \"Delete a session\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.session\n        })\n    }\n};\n","import {\n    getAttributesCheckMessage,\n    findAllById,\n    MockAPIController\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes\n} from \"../defs/doc-generation\";\nimport { Session } from \"./sessions\";\n\nexport class ContractTemplate extends MockAPIController {\n    constructor(data) {\n        super(data);\n        this.ownData = this.data.contract_templates;\n    }\n    validateNew(template, session = null) {\n        // The name and file are required\n        const message = getAttributesCheckMessage(template, this.ownData, {\n            template_name: { required: true },\n            template_file: { required: true }\n        });\n        if (message) {\n            throw new Error(message);\n        }\n        // If we're inserting to a session, the name must be unique\n        if (session) {\n            const message = getAttributesCheckMessage(\n                template,\n                this.findAllBySession(session),\n                {\n                    template_name: { required: true, unique: true }\n                }\n            );\n            if (message) {\n                throw new Error(message);\n            }\n        }\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).find(session);\n        return findAllById(\n            this.data.contract_templates_by_session[matchingSession.id] || [],\n            this.ownData\n        );\n    }\n    upsertBySession(obj, session) {\n        const matchingSession = new Session(this.data).find(session);\n        // If this is not an upsert, validate the paramters. Otherwise, don't validate.\n        if (!this.find(obj)) {\n            this.validateNew(obj, matchingSession);\n        }\n        const newTemplate = this.upsert(obj);\n        // Make sure there is an array for to store the contract_templates by session,\n        // and the push to this array before returning the new object\n        this.data.contract_templates_by_session[matchingSession.id] =\n            this.data.contract_templates_by_session[matchingSession.id] || [];\n        this.data.contract_templates_by_session[matchingSession.id].push(\n            newTemplate.id\n        );\n        return newTemplate;\n    }\n}\n\nexport const templatesRoutes = {\n    get: {\n        \"/available_contract_templates\": documentCallback({\n            func: data => [...data.available_contract_templates],\n            summary:\n                \"Get all available contract templates (these are literal files on the server).\",\n            returns: wrappedPropTypes.arrayOf(\n                docApiPropTypes.contractTemplateMinimal\n            )\n        }),\n        \"/sessions/:session_id/contract_templates\": documentCallback({\n            func: (data, params) =>\n                new ContractTemplate(data).findAllBySession(params.session_id),\n            summary: \"Get contract templates associated with this session.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.contractTemplate)\n        })\n    },\n    post: {\n        \"/sessions/:session_id/contract_templates\": documentCallback({\n            func: (data, params, body) => {\n                return new ContractTemplate(data).upsertBySession(\n                    body,\n                    params.session_id\n                );\n            },\n            summary:\n                \"Associate a position template with a session; this method upserts\",\n            posts: docApiPropTypes.contractTemplate,\n            returns: docApiPropTypes.contractTemplate\n        })\n    }\n};\n","import {\n    find,\n    getAttributesCheckMessage,\n    deleteInArray,\n    findAllById,\n    MockAPIController\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes\n} from \"../defs/doc-generation\";\nimport { Session } from \"./sessions\";\n\nexport class Position extends MockAPIController {\n    constructor(data) {\n        super(data, data.positions);\n    }\n    validateNew(position, session = null) {\n        // If we're inserting to a session, the position_code must be unique\n        if (session) {\n            const message = getAttributesCheckMessage(\n                position,\n                this.findAllBySession(session),\n                {\n                    position_code: { required: true, unique: true }\n                }\n            );\n            if (message) {\n                throw new Error(message);\n            }\n        }\n    }\n    delete(position) {\n        const matchingPosition = this.rawFind(position);\n        if (!matchingPosition) {\n            throw new Error(\n                `Cannot find position matching ${JSON.stringify(position)}`\n            );\n        }\n        super.delete(matchingPosition);\n        // After an instructor is deleted, they should be removed from all courses\n\n        // remove this instructor from any positions\n        for (const bySessionsList of Object.values(\n            this.data.positions_by_session\n        )) {\n            if (bySessionsList.includes(matchingPosition.id)) {\n                deleteInArray(matchingPosition.id, bySessionsList);\n            }\n        }\n        return matchingPosition;\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).find(session);\n        return findAllById(\n            this.data.positions_by_session[matchingSession.id] || [],\n            this.ownData\n        );\n    }\n    upsertBySession(obj, session) {\n        const matchingSession = new Session(this.data).rawFind(session);\n        // If this is not an upsert, validate the paramters. Otherwise, don't validate.\n        if (!this.rawFind(obj)) {\n            this.validateNew(obj, matchingSession);\n        }\n        const newPosition = this.upsert(obj);\n        // Make sure there is an array for to store the contract_templates by session,\n        // and the push to this array before returning the new object\n        this.data.positions_by_session[matchingSession.id] =\n            this.data.positions_by_session[matchingSession.id] || [];\n        this.data.positions_by_session[matchingSession.id].push(newPosition.id);\n        return newPosition;\n    }\n    findAssociatedSession(position) {\n        const matchingPosition = this.find(position);\n        if (!matchingPosition) {\n            throw new Error(\n                `Could not associated session because there is no position matching ${JSON.stringify(\n                    position\n                )}`\n            );\n        }\n        const ret = Object.keys(this.data.positions_by_session).find(x =>\n            this.data.positions_by_session[x].includes(matchingPosition.id)\n        );\n        // Make sure we recast the id as an int\n        return ret != null ? +ret : ret;\n    }\n}\n\nexport const positionsRoutes = {\n    get: {\n        \"/sessions/:session_id/positions\": documentCallback({\n            func: (data, params) =>\n                new Position(data).findAllBySession(params.session_id),\n            summary: \"Get positions associated with this session.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.position)\n        })\n    },\n    post: {\n        \"/sessions/:session_id/positions\": documentCallback({\n            func: (data, params, body) => {\n                return new Position(data).upsertBySession(\n                    body,\n                    params.session_id\n                );\n            },\n            summary:\n                \"Upsert a position associated with a session. If a new position is created, it will be automatically associated with the given session\",\n            posts: docApiPropTypes.position,\n            returns: docApiPropTypes.position\n        }),\n        \"/positions\": documentCallback({\n            func: (data, params, body) => {\n                const positions = data.positions;\n                // body should be a session object. If it contains an id,\n                // update an existing session. Otherwise, create a new one.\n                const matchingPosition = find(body, positions);\n                if (matchingPosition) {\n                    return Object.assign(matchingPosition, body);\n                }\n                throw new Error(`Cannot find position with id=${body.id}`);\n            },\n            summary: \"Update a position\",\n            posts: docApiPropTypes.position,\n            returns: docApiPropTypes.position\n        }),\n        \"/positions/delete\": documentCallback({\n            func: (data, params, body) => {\n                return new Position(data).delete(body);\n            },\n            summary: \"Delete a position\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.session\n        })\n    }\n};\n","import {\n    getAttributesCheckMessage,\n    deleteInArray,\n    MockAPIController\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes\n} from \"../defs/doc-generation\";\n\nexport class Instructor extends MockAPIController {\n    constructor(data) {\n        super(data, data.instructors);\n    }\n    validateNew(instructor) {\n        const message = getAttributesCheckMessage(instructor, this.ownData, {\n            utorid: { required: true, unique: true },\n            first_name: { required: true },\n            last_name: { required: true }\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    delete(instructor) {\n        const matchingInstructor = this.find(instructor);\n        if (!matchingInstructor) {\n            throw new Error(\n                `Cannot find instructor matching ${JSON.stringify(instructor)}`\n            );\n        }\n        super.delete(matchingInstructor);\n        // After an instructor is deleted, they should be removed from all courses\n\n        // remove this instructor from any positions\n        for (const position of this.data.positions) {\n            if (\n                (position.instructor_ids || []).includes(matchingInstructor.id)\n            ) {\n                deleteInArray(matchingInstructor.id, position.instructor_ids);\n            }\n        }\n        return matchingInstructor;\n    }\n}\n\nexport const instructorsRoutes = {\n    get: {\n        \"/instructors\": documentCallback({\n            func: data => new Instructor(data).findAll(),\n            summary: \"Get a list of all instructors\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.instructor)\n        })\n    },\n    post: {\n        \"/instructors\": documentCallback({\n            func: (data, params, body) => {\n                return new Instructor(data).upsert(body);\n            },\n            summary: \"Upsert an instructor\",\n            posts: docApiPropTypes.instructor,\n            returns: docApiPropTypes.instructor\n        }),\n        \"/instructors/delete\": documentCallback({\n            func: (data, params, body) => {\n                return new Instructor(data).delete(body);\n            },\n            summary: \"Delete an instructor (removes from all positions)\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.instructor\n        })\n    }\n};\n","import { documentCallback, docApiPropTypes } from \"../defs/doc-generation\";\nimport { find, MockAPIController, findAllById } from \"./utils\";\nimport { Assignment } from \"./assignments\";\n\nexport class WageChunk extends MockAPIController {\n    constructor(data) {\n        super(data, data.wage_chunks);\n    }\n    validateNew() {\n        // There is nothing to validate for a wage chunk\n    }\n    findAllByAssignment(assignment) {\n        const matchingAssignment = new Assignment(this.data).rawFind(\n            assignment\n        );\n        if (!matchingAssignment) {\n            throw new Error(\n                `Could not find assignment matching ${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n        return findAllById(\n            [matchingAssignment.id],\n            this.ownData,\n            \"assignment_id\"\n        );\n    }\n    upsertByAssignment(wageChunk, assignment) {\n        const matchingAssignment = new Assignment(this.data).rawFind(\n            assignment\n        );\n        if (!matchingAssignment) {\n            throw new Error(\n                `Could not find assignment matching ${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n        return this.upsert({\n            ...wageChunk,\n            assignment_id: matchingAssignment.id\n        });\n    }\n    /**\n     * Sets the list of wage chunks associated with a given assignment to `wageChunks`.\n     * Any wage chunks omitted from the list are deleted.\n     *\n     * @param {*} wageChunks\n     * @param {*} assignment\n     * @returns\n     * @memberof WageChunk\n     */\n    setAllByAssignment(wageChunks, assignment) {\n        const matchingAssignment = this.rawFind(assignment);\n        if (!matchingAssignment) {\n            throw new Error(\n                `Could not find assignment matching ${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n        const existingWageChunks = this.findAllByAssignment(assignment);\n        // every wage chunk that is not in the `wageChunks` list gets deleted\n        for (const wageChunk of existingWageChunks) {\n            if (!find(wageChunk, wageChunks)) {\n                this.delete(wageChunk);\n            }\n        }\n        // Now we can upsert all the wageChunks\n        wageChunks.forEach(chunk =>\n            this.upsertByAssignment(chunk, matchingAssignment)\n        );\n        // Recompute the wage chunks list. This is \"needless\"\n        // logically, but it might catch some bugs at some point.\n        return this.findAllByAssignment(matchingAssignment);\n    }\n}\n\nexport const wageChunkRoutes = {\n    get: {},\n    post: {\n        \"/wage_chunks\": documentCallback({\n            func: (data, params, body) => new WageChunk(data).upsert(body),\n            posts: docApiPropTypes.wageChunk,\n            summary: \"Upsert a wage_chunk\",\n            returns: docApiPropTypes.wageChunk\n        }),\n        \"/wage_chunks/delete\": documentCallback({\n            func: (data, params, body) => new WageChunk(data).delete(body),\n            posts: docApiPropTypes.wageChunk,\n            summary: \"Delete a wage_chunk. Must have a valid id specified.\",\n            returns: docApiPropTypes.wageChunk\n        })\n    }\n};\n","import {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes\n} from \"../defs/doc-generation\";\nimport {\n    getAttributesCheckMessage,\n    findAllById,\n    sum,\n    splitDateRangeAtNewYear,\n    MockAPIController\n} from \"./utils\";\nimport { Session } from \"./sessions\";\nimport { Position } from \"./positions\";\nimport { WageChunk } from \"./wage_chunks\";\n\nexport class Assignment extends MockAPIController {\n    constructor(data) {\n        super(data, data.assignments);\n    }\n    validateNew(assignment) {\n        // No uniqueness required, so pass in an empty array ([]) to the verifier\n        const message = getAttributesCheckMessage(assignment, [], {\n            position_id: { required: true },\n            applicant_id: { required: true }\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).rawFind(session);\n        return findAllById(\n            this.data.assignments_by_session[matchingSession.id] || [],\n            this.ownData\n            // Call \"find\" again to make sure every item gets packaged appropriately\n        ).map(x => new Assignment(this.data).find(x));\n    }\n    /**\n     * Grabs a bunch of data from the wage chunks related to an assignment\n     *\n     * @param {string} assignment\n     * @returnType {{hours: number, wage_chunks: object[]}}\n     */\n    getWageChunkInfo(assignment) {\n        const wageChunks = new WageChunk(this.data).findAllByAssignment(\n            assignment\n        );\n        const hours = sum(...wageChunks.map(x => x.hours));\n        return { hours, wageChunks };\n    }\n    /**\n     * Grab the active offer for an assignment\n     *\n     * @param {number} matchingAssignment.id\n     * @param {object} this.data\n     * @returns {({}|null)} - an offer object or `undefined`\n     */\n    getActiveOffer(assignment) {\n        return new ActiveOffer(this.data).findByAssignment(assignment);\n    }\n    /**\n     * Pieces together all the details of an assignment from the mockAPI data\n     *\n     * @param {object} matchingAssignment - an assignment\n     * @returns\n     */\n    find(assignment) {\n        const matchingAssignment = this.rawFind(assignment);\n        if (!matchingAssignment) {\n            return matchingAssignment;\n        }\n        const ret = { ...matchingAssignment };\n        // compute the hours from wage chunks\n        const { hours } = this.getWageChunkInfo(matchingAssignment);\n        Object.assign(ret, { hours });\n        // compute offer_status\n        const activeOffer = this.getActiveOffer(matchingAssignment);\n        if (activeOffer) {\n            Object.assign(ret, { active_offer_status: activeOffer.status });\n        }\n        return ret;\n    }\n    upsert(assignment) {\n        // Call `find` to make sure the `hours` field is computed\n        const upsertedAssignment = this.find(super.upsert(assignment));\n\n        // If `hours` is passed into the assignment, we need to modify the wage chunks\n        // associated with the assignment (but only if the hours differ).\n        if (\n            assignment.hours == null ||\n            +upsertedAssignment.hours === +assignment.hours\n        ) {\n            return upsertedAssignment;\n        }\n\n        // Make sure the assignment is in the assignments_by_session list\n        const session_id = new Position(this.data).findAssociatedSession(\n            upsertedAssignment.position_id\n        );\n        if (session_id) {\n            this.data.assignments_by_session[session_id].push(\n                upsertedAssignment.id\n            );\n        }\n\n        let wageChunks = new WageChunk(this.data).findAllByAssignment(\n            upsertedAssignment\n        );\n        // If there are no wage chunks, we need to create some\n        if (wageChunks.length === 0) {\n            const dateRanges = splitDateRangeAtNewYear(\n                upsertedAssignment.start_date,\n                upsertedAssignment.end_date\n            );\n            // create the wage chunks with zero hours, because it will be updated soon\n            for (const range of dateRanges) {\n                new WageChunk(this.data).upsertByAssignment(\n                    {\n                        hours: 0,\n                        start_date: range.start_date,\n                        end_date: range.end_date\n                    },\n                    upsertedAssignment\n                );\n            }\n        }\n\n        // Now we are gauranteed to have wage chunks, so set them to the correct number\n        // of hours\n        wageChunks = new WageChunk(this.data).findAllByAssignment(\n            upsertedAssignment\n        );\n        const delta =\n            +assignment.hours - +(this.find(upsertedAssignment).hours || 0);\n        const perChunkDelta = delta / wageChunks.length;\n        for (const chunk of wageChunks) {\n            new WageChunk(this.data).upsert({\n                ...chunk,\n                hours: (chunk.hours || 0) + perChunkDelta\n            });\n        }\n\n        // Find the assignment again, to make sure all computed fields are properly computed\n        return this.find(upsertedAssignment);\n    }\n}\n\nclass ActiveOffer extends MockAPIController {\n    constructor(data) {\n        super(data, data.offers);\n    }\n    findByAssignment(assignment) {\n        const matchingAssignment = this._ensureAssignment(assignment);\n\n        // offers are never deleted, only added to the table, so\n        // picking the last one is the same as picking the \"newest\"\n        const offers = findAllById(\n            [matchingAssignment.id],\n            this.data.offers,\n            \"assignment_id\"\n        );\n        const activeOffer = offers[offers.length - 1];\n        if (!activeOffer) {\n            return null;\n        }\n        // an offer is only active if it has been accepted, rejected, or is pending\n        if (\n            activeOffer.status === \"accepted\" ||\n            activeOffer.status === \"rejected\" ||\n            activeOffer.status === \"pending\"\n        ) {\n            return activeOffer;\n        }\n        return null;\n    }\n    _ensureAssignment(assignment) {\n        const matchingAssignment = new Assignment(this.data).rawFind(\n            assignment\n        );\n        if (!matchingAssignment) {\n            throw new Error(\n                `Could not find assignment matching ${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n        return matchingAssignment;\n    }\n    withdrawByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        return this.upsert({\n            ...offer,\n            status: \"withdrawn\",\n            withdrawn_date: new Date().toISOString()\n        });\n    }\n    rejectByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        return this.upsert({\n            ...offer,\n            status: \"rejected\",\n            rejected_date: new Date().toISOString()\n        });\n    }\n    acceptByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        return this.upsert({\n            ...offer,\n            status: \"accepted\",\n            accepted_date: new Date().toISOString()\n        });\n    }\n    emailByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        return this.upsert({\n            ...offer,\n            status: \"pending\",\n            emailed_date: new Date().toISOString()\n        });\n    }\n    nagByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        if (!offer.emailed_date) {\n            throw new Error(\n                `The ative offer for assignment with id=${assignment.id} has not been emailed yet, so a nag email cannot be sent`\n            );\n        }\n        return this.upsert({\n            ...offer,\n            nag_count: (offer.nag_count || 0) + 1\n        });\n    }\n    createByAssignment(assignment) {\n        const matchingAssignment = this._ensureAssignment(assignment);\n        const offer = this.findByAssignment(matchingAssignment);\n        if (offer) {\n            throw new Error(\n                `An offer already exists for assignment=${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n        return this.create({\n            assignment_id: matchingAssignment.assignment_id,\n            status: \"pending\"\n        });\n    }\n}\n\nexport const assignmentsRoutes = {\n    get: {\n        \"/sessions/:session_id/assignments\": documentCallback({\n            func: (data, params) =>\n                new Assignment(data).findAllBySession(params.session_id),\n            summary: \"Get assignments associated with a session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.assignment)\n        }),\n        \"/assignments/:assignment_id\": documentCallback({\n            func: (data, params) =>\n                new Assignment(data).find(params.assignment_id),\n            summary: \"Get an assignment\",\n            returns: docApiPropTypes.assignment\n        }),\n        \"/assignments/:assignment_id/active_offer\": documentCallback({\n            func: (data, params) =>\n                new Assignment(data).getActiveOffer(params.assignment_id),\n            summary: \"Get the active offer associated with an assignment\",\n            returns: docApiPropTypes.offer\n        }),\n        \"/assignments/:assignment_id/wage_chunks\": documentCallback({\n            func: (data, params) =>\n                new Assignment(data).getWageChunkInfo(params.assignment_id)\n                    .wageChunks,\n            summary: \"Get the wage_chunks associated with an assignment\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.wageChunk)\n        })\n    },\n    post: {\n        \"/assignments\": documentCallback({\n            func: (data, params, body) => new Assignment(data).upsert(body),\n            posts: docApiPropTypes.assignment,\n            summary: \"Upsert an assignment\",\n            returns: docApiPropTypes.assignment\n        }),\n        \"/assignments/:assignment_id/wage_chunks\": documentCallback({\n            func: (data, params, body) => {\n                return new WageChunk(data).setAllByAssignment(\n                    body,\n                    params.assignment_id\n                );\n            },\n            summary:\n                \"Sets the wage chunks of an assignment to the specified list. The contents of the list are upserted. Omitted wage chunks are deleted.\",\n            posts: wrappedPropTypes.arrayOf(docApiPropTypes.wageChunk),\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.wageChunk)\n        }),\n        \"/assignments/:assignment_id/active_offer/withdraw\": documentCallback({\n            func: (data, params) =>\n                new ActiveOffer(data).withdrawByAssignment(\n                    params.assignment_id\n                ),\n            summary: \"Withdraws the active offer for the specified assignment\",\n            returns: docApiPropTypes.offer\n        }),\n        \"/assignments/:assignment_id/active_offer/reject\": documentCallback({\n            func: (data, params) =>\n                new ActiveOffer(data).rejectByAssignment(params.assignment_id),\n            summary: \"Rejects the active offer for the specified assignment\",\n            returns: docApiPropTypes.offer\n        }),\n        \"/assignments/:assignment_id/active_offer/accept\": documentCallback({\n            func: (data, params) =>\n                new ActiveOffer(data).acceptByAssignment(params.assignment_id),\n            summary: \"Accepts the active offer for the specified assignment\",\n            returns: docApiPropTypes.offer\n        }),\n        \"/assignments/:assignment_id/active_offer/create\": documentCallback({\n            func: (data, params) =>\n                new ActiveOffer(data).createByAssignment(params.assignment_id),\n            summary:\n                \"Creates an offer for the specified assignment, provided there are no active offers for this assignment.\",\n            returns: docApiPropTypes.offer\n        }),\n        \"/assignments/:assignment_id/active_offer/email\": documentCallback({\n            func: (data, params) =>\n                new ActiveOffer(data).emailByAssignment(params.assignment_id),\n            summary: \"Emails the active offer for the specified assignment\",\n            returns: docApiPropTypes.offer\n        }),\n        \"/assignments/:assignment_id/active_offer/nag\": documentCallback({\n            func: (data, params) =>\n                new ActiveOffer(data).nagByAssignment(params.assignment_id),\n            summary:\n                \"Sends a nag email for the active offer for the specified assignment which has already been emailed once\",\n            returns: docApiPropTypes.offer\n        })\n    }\n};\n","import {\n    getAttributesCheckMessage,\n    findAllById,\n    MockAPIController\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes\n} from \"../defs/doc-generation\";\nimport { Session } from \"./sessions\";\n\nexport class Applicant extends MockAPIController {\n    constructor(data) {\n        super(data, data.applicants);\n    }\n    validateNew(applicant) {\n        const message = getAttributesCheckMessage(applicant, this.ownData, {\n            utorid: { required: true, unique: true },\n            first_name: { required: true },\n            last_name: { required: true }\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).find(session);\n        if (!matchingSession) {\n            throw new Error(\n                `Cannot find applicant by session because session ${JSON.stringify(\n                    session\n                )} cannot be found`\n            );\n        }\n        // The applicants for this session are those who have submitted an application for this session\n        const applicantIds = findAllById(\n            [matchingSession.id],\n            this.data.applications,\n            \"session_id\"\n        ).map(x => x.applicant_id);\n        return findAllById(applicantIds, this.ownData);\n    }\n}\n\nexport const applicantsRoutes = {\n    get: {\n        \"/sessions/:session_id/applicants\": documentCallback({\n            func: (data, params) =>\n                new Applicant(data).findAllBySession(params.session_id),\n            summary: \"Get all applicants associated with the given session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.applicant)\n        }),\n        \"/applicants\": documentCallback({\n            func: data => new Applicant(data).findAll(),\n            summary: \"Get all applicants\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.applicant)\n        }),\n        \"/applicants/:applicant_id\": documentCallback({\n            func: (data, params) =>\n                new Applicant(data).find(params.applicant_id),\n            summary: \"Get an applicant\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.applicant)\n        })\n    },\n    post: {\n        \"/applicants\": documentCallback({\n            func: (data, params, body) => new Applicant(data).upsert(body),\n            summary: \"Upsert an applicant\",\n            posts: docApiPropTypes.applicant,\n            returns: docApiPropTypes.applicant\n        })\n    }\n};\n","import {\n    getAttributesCheckMessage,\n    MockAPIController,\n    findAllById\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes\n} from \"../defs/doc-generation\";\nimport { Session } from \"./sessions\";\n\nexport class Application extends MockAPIController {\n    constructor(data) {\n        super(data, data.applications);\n    }\n    validateNew(applicant) {\n        const message = getAttributesCheckMessage(applicant, this.ownData, {\n            session_id: { required: true },\n            applicant_id: { required: true }\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).find(session);\n        if (!matchingSession) {\n            throw new Error(\n                `Cannot find applicant by session because session ${JSON.stringify(\n                    session\n                )} cannot be found`\n            );\n        }\n        // The applicants for this session are those who have submitted an application for this session\n        return findAllById([matchingSession.id], this.ownData, \"session_id\");\n    }\n}\n\nexport const applicationsRoutes = {\n    get: {\n        \"/sessions/:session_id/applications\": documentCallback({\n            func: (data, params) =>\n                new Application(data).findAllBySession(params.session_id),\n            summary: \"Get all applications associated with the given session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.application)\n        })\n    },\n    post: {\n        \"/applications\": documentCallback({\n            func: (data, params, body) => new Application(data).upsert(body),\n            summary: \"Upsert an application\",\n            posts: docApiPropTypes.application,\n            returns: docApiPropTypes.application\n        })\n    }\n};\n","import { MockAPIController, find } from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes\n} from \"../defs/doc-generation\";\n\nexport class User extends MockAPIController {\n    constructor(data) {\n        super(data, data.users);\n    }\n    rawFind(query) {\n        if (query == null) {\n            return null;\n        }\n        if (query.utorid != null) {\n            return find(query, this.ownData, \"utorid\");\n        }\n        return find({ utorid: query }, this.ownData, \"utorid\");\n    }\n    setActiveUser(user) {\n        const matchingUser = this.find(user);\n        if (!matchingUser) {\n            throw new Error(\n                `Cannot find user ${JSON.stringify(user)} to set as active`\n            );\n        }\n        this.data.active_user = matchingUser.utorid;\n    }\n    getActiveUser() {\n        return this.find(this.data.active_user);\n    }\n}\n\nexport const activeUserRoutes = {\n    get: {\n        \"/users\": documentCallback({\n            func: data => new User(data).findAll(),\n            summary:\n                \"Get all available contract templates (these are literal files on the server).\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user)\n        }),\n        \"/active_user\": documentCallback({\n            func: data => new User(data).getActiveUser(),\n            summary: \"Gets the currently active user.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n            roles: [\"instructor\", \"ta\"]\n        })\n    },\n    post: {\n        \"/users\": documentCallback({\n            func: (data, params, body) => new User(data).upsert(body),\n            summary: \"Upserts user info\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n            posts: docApiPropTypes.user\n        })\n    }\n};\n","import {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes\n} from \"../defs/doc-generation\";\nimport { User } from \"./active_user\";\n\n// persistent storage for the Debug class\nconst storage = {};\n\nexport class Debug {\n    constructor(data) {\n        this.data = data;\n    }\n    getAllData() {\n        return this.data;\n    }\n    makeSnapshot(name = \"snapshot\") {\n        storage[name] = JSON.stringify(this.getAllData());\n        return this.getAllData();\n    }\n    clearData() {\n        this.makeSnapshot(\"beforeclear\");\n        Object.keys(this.data).forEach(key => delete this.data[key]);\n        return this.getAllData();\n    }\n    restoreSnapshot(name = \"snapshot\") {\n        const snapshot = JSON.parse(storage[name] || \"{}\");\n        this.clearData();\n        Object.assign(this.data, snapshot);\n        return this.getAllData();\n    }\n}\n\nexport const debugRoutes = {\n    get: {},\n    post: {\n        \"/debug/active_user\": documentCallback({\n            func: (data, params, body) => new User(data).upsert(body),\n            summary:\n                \"Sets the active user; this will override whatever credentials are passed to the server.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n            posts: docApiPropTypes.user\n        }),\n        \"/debug/clear_data\": documentCallback({\n            func: data => {\n                return new Debug(data).clearData();\n            },\n            summary: \"Deletes all data in the database\"\n        }),\n        \"/debug/snapshot\": documentCallback({\n            func: data => {\n                return new Debug(data).makeSnapshot();\n            },\n            summary: \"Makes a snapshot of the current state of the database\"\n        }),\n        \"/debug/restore_snapshot\": documentCallback({\n            func: data => {\n                return new Debug(data).restoreSnapshot();\n            },\n            summary: \"Restores the last snapshot of the database\"\n        })\n    }\n};\n","import Route from \"route-parser\";\nimport { mockData } from \"./data\";\nimport { sessionsRoutes } from \"./sessions\";\nimport { templatesRoutes } from \"./contract_templates\";\nimport { positionsRoutes } from \"./positions\";\nimport { instructorsRoutes } from \"./instructors\";\nimport { documentCallback } from \"../defs/doc-generation\";\nimport { assignmentsRoutes } from \"./assignments\";\nimport { applicantsRoutes } from \"./applicants\";\nimport { applicationsRoutes } from \"./applications\";\nimport { wageChunkRoutes } from \"./wage_chunks\";\nimport { debugRoutes } from \"./debug\";\nimport { activeUserRoutes } from \"./active_user\";\n\n/**\n * Mock API server that runs locally; useuful for demo purposes.\n *\n * @module\n */\n\nexport class MockAPI {\n    routePrefix = \"/api/v1\";\n    // a list of selectors for each route\n    getRoutes = Object.assign(\n        {},\n        sessionsRoutes.get,\n        templatesRoutes.get,\n        positionsRoutes.get,\n        instructorsRoutes.get,\n        assignmentsRoutes.get,\n        applicantsRoutes.get,\n        applicationsRoutes.get,\n        wageChunkRoutes.get,\n        debugRoutes.get,\n        activeUserRoutes.get,\n        {\n            \"/all_data\": documentCallback({\n                func: data => data,\n                exclude: true\n            })\n        }\n    );\n    postRoutes = Object.assign(\n        {},\n        sessionsRoutes.post,\n        templatesRoutes.post,\n        positionsRoutes.post,\n        instructorsRoutes.post,\n        assignmentsRoutes.post,\n        applicantsRoutes.post,\n        applicationsRoutes.post,\n        wageChunkRoutes.post,\n        debugRoutes.post,\n        activeUserRoutes.post\n    );\n\n    constructor(seedData) {\n        this.active = false;\n        this.data = seedData;\n        this._getRoutesParsers = Object.keys(this.getRoutes).map(routeStr => {\n            // We want to peel of the role from the start of the route, but we don't want\n            // to consider it part of the route for documentation purposes. Since `routeStr`\n            // is used to find the callback of the route, we hack `Route` so that `spec`\n            // is the same as `routeStr`.\n            const r = new Route(\"(/:role)\" + routeStr);\n            r.spec = routeStr;\n            return r;\n        });\n        this._postRoutesParsers = Object.keys(this.postRoutes).map(routeStr => {\n            // We want to peel of the role from the start of the route, but we don't want\n            // to consider it part of the route for documentation purposes. Since `routeStr`\n            // is used to find the callback of the route, we hack `Route` so that `spec`\n            // is the same as `routeStr`.\n            const r = new Route(\"(/:role)\" + routeStr);\n            r.spec = routeStr;\n            return r;\n        });\n    }\n\n    /**\n     * Make a mock `apiGET` call. Always returns an object of\n     * the form\n     * `{status: ..., message: ..., payload: ...}`\n     * This method is bound, so it is safe to pass this function around.\n     *\n     * @memberof MockAPI\n     * @param {string} url An API route without `/api/v1` (e.g., `/sessions`)\n     */\n    apiGET = url => {\n        for (const route of this._getRoutesParsers) {\n            const match = route.match(url);\n            // if we have a match, run the selector with the parsed data\n            if (match) {\n                try {\n                    const payload = this.getRoutes[route.spec](\n                        this.data,\n                        match\n                    );\n                    if (payload == null) {\n                        throw new Error(\n                            `Could not find data for route ${\n                                route.spec\n                            } with params ${JSON.stringify(match)}`\n                        );\n                    }\n                    return {\n                        status: \"success\",\n                        message: \"\",\n                        payload\n                    };\n                } catch (e) {\n                    return { status: \"error\", message: e.toString() };\n                }\n            }\n        }\n        return {\n            status: \"error\",\n            message: `could not find route matching ${url}`\n        };\n    };\n\n    /**\n     * Make a mock `apiPOST` call. Always returns an object of\n     * the form\n     * `{status: ..., message: ..., payload: ...}`\n     * This method is bound, so it is safe to pass this function around.\n     *\n     * @memberof MockAPI\n     * @param {string} url An API route without `/api/v1` (e.g., `/sessions`)\n     * @param {object} body The body of a post request. This should be an object, *not* a JSON string.\n     */\n    apiPOST = (url, body) => {\n        for (const route of this._postRoutesParsers) {\n            const match = route.match(url);\n            // if we have a match, run the selector with the parsed data\n            if (match) {\n                try {\n                    const payload = this.postRoutes[route.spec](\n                        this.data,\n                        match,\n                        body\n                    );\n                    return {\n                        status: \"success\",\n                        message: \"\",\n                        payload\n                    };\n                } catch (e) {\n                    return { status: \"error\", message: e.toString() };\n                }\n            }\n        }\n        return {\n            status: \"error\",\n            message: `could not find route matching ${url}`\n        };\n    };\n\n    /**\n     * Replaces the global `window.fetch` object with calls to `apiGET` and\n     * `apiPOST`. This means that true network requests will no longer\n     * work.\n     *\n     * @param {number} [delay=1000]\n     * @memberof MockAPI\n     */\n    replaceGlobalFetch(delay = 1000) {\n        if (this.active) {\n            return;\n        }\n        this.active = true;\n        this._origFetch = fetch;\n        window.fetch = async (url, init = {}) => {\n            // Parse the URL first. We only want the pathname\n            const parsedURL = new URL(url, \"http://dummy.com\");\n            url = parsedURL.pathname;\n            // Make sure the url doesn't start with \"/api/v1\"\n            url = url.startsWith(this.routePrefix)\n                ? url.replace(this.routePrefix, \"\")\n                : url;\n            let mockResponse;\n            if (init.method === \"GET\") {\n                mockResponse = this.apiGET(url);\n            } else {\n                let body = init.body;\n                if (typeof body === \"string\") {\n                    body = JSON.parse(body);\n                }\n                mockResponse = this.apiPOST(url, body);\n            }\n            // eslint-disable-next-line\n            console.log(\n                `MockAPI ${init.method} Request.`,\n                url,\n                init,\n                \"Reponding with\",\n                mockResponse\n            );\n            // Create a `Response` object to return so that we fully immitate\n            // the `fetch` api.\n            const responseObj = new Response(\n                new Blob([JSON.stringify(mockResponse)], {\n                    type: \"application/json\"\n                }),\n                { status: 200, statusText: \"OK\" }\n            );\n            return new Promise(resolve => {\n                window.setTimeout(() => resolve(responseObj), delay);\n            });\n        };\n    }\n\n    /**\n     * Restore the global `window.fetch` to what the browser provides.\n     * If `window.fetch` has not been overridden, this function does nothing.\n     *\n     * @memberof MockAPI\n     */\n    restoreGlobalFetch() {\n        this.active = false;\n        window.fetch = this._origFetch || fetch;\n    }\n}\n\nconst mockAPI = new MockAPI(mockData);\nexport { mockAPI, mockData };\n","/**\n * Tools for generating documentation\n */\n\nimport PropTypes from \"prop-types\";\nimport RouteParser from \"route-parser\";\nimport { generatePropTypes } from \"./prop-types\";\n\nclass CallAtom {\n    constructor(prop, args) {\n        this.name = prop;\n        this.args = args;\n    }\n    toString() {\n        if (this.args == null) {\n            return \"\" + this.name;\n        }\n        return \"\" + this.name + \"(\" + this.args.join(\", \") + \")\";\n    }\n}\nfunction createCallChain(chain = [], prop, args) {\n    return chain.concat([new CallAtom(prop, args)]);\n}\n/**\n * A proxy to wrap `PropTypes` so that the call chain can be recorded.\n * For example, `PropTypes.bool.isRequired` would have the added method `.callChain`\n * which would return an array of `CallAtom` objects consisting of `bool` and `isRequired`.\n * This can be used to generate documentation from existing proptype definitions.\n *\n * @param {*} obj\n * @param {*} [callChain=[]]\n * @returns\n */\nfunction propTypesProxy(obj, callChain = []) {\n    const handler = {\n        get(obj, prop, receiver) {\n            if (prop === \"callChain\") {\n                return callChain;\n            } else if (prop === \"toJSON\") {\n                return () => callChain;\n            }\n            const ret = Reflect.get(obj, prop, receiver);\n            if (ret instanceof Object) {\n                return propTypesProxy(ret, createCallChain(callChain, prop));\n            }\n            return ret;\n        },\n        apply(obj, thisArg, args) {\n            const lastProp = callChain.pop() || { name: \"<root>\" };\n            const ret = Reflect.apply(obj, thisArg, args);\n            if (ret instanceof Object) {\n                return propTypesProxy(\n                    ret,\n                    createCallChain(callChain, lastProp.name, args)\n                );\n            }\n            return ret;\n        },\n        ownKeys(obj) {\n            return [...Reflect.ownKeys(obj), \"callChain\", \"toJSON\"];\n        }\n    };\n\n    return new Proxy(obj, handler);\n}\nconst wrappedPropTypes = propTypesProxy(PropTypes);\n/**\n * PropType defintions for the API that have been wrapped in\n * a proxy so they can be convereted into documentation.\n */\nconst docApiPropTypes = generatePropTypes(wrappedPropTypes);\n\nconst PROPTYPES_TO_SWAGGER_TYPES = {\n    string: \"string\",\n    number: \"number\",\n    bool: \"boolean\",\n    object: \"object\",\n    array: \"array\",\n    any: {}\n};\n\nfunction wrappedPropTypesToSwagger(pt) {\n    const ret = {};\n    if (!pt.callChain) {\n        // eslint-disable-next-line\n        console.warn(\n            \"Attempting to compute swagger values for non-wrapped object\",\n            pt\n        );\n    } else {\n        // We are a proxied PropTypes object\n        //\n        // PropTypes calls can be at most two long with the second argument\n        // being `.isRequired`\n        const [type, isRequired] = pt.callChain;\n        const requiredList = [];\n        if (isRequired) {\n            ret[\"required\"] = true;\n        }\n        if (type.args) {\n            // in this case, we were a PropTypes function called with some arguments\n            switch (type.name) {\n                case \"shape\":\n                    // in this case we're passing in an object with properties to be validated\n                    ret[\"type\"] = \"object\";\n                    ret[\"properties\"] = {};\n                    for (const [key, val] of Object.entries(type.args[0])) {\n                        const swaggerVal = wrappedPropTypesToSwagger(val);\n                        if (swaggerVal[\"required\"]) {\n                            // Required properties in swagger must be listed up-front (i.e., as a list\n                            // of property names, not as an attribute of an individual property),\n                            // so hoist them.\n                            requiredList.push(key);\n                            delete swaggerVal[\"required\"];\n                        }\n                        ret[\"properties\"][key] = swaggerVal;\n                    }\n                    if (requiredList.length > 0) {\n                        ret[\"required\"] = requiredList;\n                    }\n                    break;\n                case \"arrayOf\":\n                    ret[\"type\"] = \"array\";\n                    ret[\"items\"] = wrappedPropTypesToSwagger(type.args[0]);\n                    break;\n                case \"oneOf\":\n                    // XXX assuming `oneOf` is only used for strings\n                    ret[\"type\"] = \"string\";\n                    ret[\"enum\"] = type.args[0];\n                    break;\n                case \"oneOfType\":\n                    ret[\"oneOf\"] = type.args[0].map(wrappedPropTypesToSwagger);\n                    break;\n                default:\n                    break;\n            }\n        } else {\n            if (PROPTYPES_TO_SWAGGER_TYPES[type.name]) {\n                // in this case, we're a basic swagger type\n                ret[\"type\"] = PROPTYPES_TO_SWAGGER_TYPES[type.name];\n            }\n        }\n    }\n\n    return ret;\n}\n\n/**\n * Wrap `payload` in a standard API response formatted\n * for openapi\n *\n * @param {object} payload\n * @returns {object}\n */\nfunction wrapInStandardApiResponseForSwagger(payload = { type: \"object\" }) {\n    return {\n        type: \"object\",\n        properties: {\n            status: {\n                type: \"string\",\n                enum: [\"success\", \"error\"]\n            },\n            message: { type: \"string\" },\n            payload\n        },\n        required: [\"status\"]\n    };\n}\n\n/**\n * Take a path template in `\"route-parser\"`\n * form, e.g. `/sessions/:session_id`, and encode it for\n * consumption by swagger, e.g., `/sessions/{session_id}`.\n *\n * @param {string} url\n * @returns {string}\n */\nfunction urlTemplateToSwagger(url) {\n    // get the template variables\n    // using a trick: have the RoutePasers\n    // parse it's own template, giving us\n    // a list of variables in the process\n    const parsed = RouteParser(url);\n    const templateVars = Object.keys(parsed.match(parsed.spec));\n    const subs = {};\n    for (const templateVar of templateVars) {\n        subs[templateVar] = \"{\" + templateVar + \"}\";\n    }\n    return { url: decodeURI(parsed.reverse(subs)), templateVars };\n}\n\n/**\n * Convert the `docs` attribute from a callback that\n * has been documented with `documentCallback` into an openapi\n * object.\n *\n * @param {object} docs\n * @param {string[]} [templateVars=[]] - list of template variables in the route\n * @returns {object} - openapi object\n */\nfunction documentedCallbackToSwagger(docs, templateVars = []) {\n    const ret = { responses: { default: {} } };\n    if (!docs) {\n        return ret;\n    }\n    // Routes are all prefixed. `admin` can access all routes.\n    // other routes are restricted depending on the list specified in `roles`.\n    const prefixRoles = [\"admin\", ...(docs.roles || [])];\n    ret.summary =\n        `(prefixes: ${prefixRoles.map(x => \"/\" + x).join(\", \")}) ` +\n        docs.summary;\n    // If there are templateVars, they should become `paramters`\n    if (templateVars.length > 0) {\n        ret.parameters = templateVars.map(x => ({\n            name: x,\n            in: \"path\",\n            description: x,\n            required: true\n        }));\n    }\n    // `docs.returns` holds information about what the route will return\n    if (docs.returns) {\n        ret.responses.default = {\n            content: {\n                \"application/json\": {\n                    schema: wrapInStandardApiResponseForSwagger(\n                        wrappedPropTypesToSwagger(docs.returns)\n                    )\n                }\n            }\n        };\n    }\n    // `docs.posts` holds information about what you can put in the\n    // requestBody\n    if (docs.posts) {\n        ret.requestBody = {\n            content: {\n                \"application/json\": {\n                    schema: wrappedPropTypesToSwagger(docs.posts)\n                }\n            }\n        };\n    }\n\n    return ret;\n}\n\n/**\n * Turn mockAPI routes into swagger-ui JSON object\n *\n * @param {{getRoutes: object, postRoutes: object}} [mockAPI={}]\n * @returns {object} - openapi configuration\n */\nfunction mockApiRoutesAsSwaggerPaths(mockAPI = {}) {\n    const { getRoutes = {}, postRoutes = {} } = mockAPI;\n    const ret = {};\n    for (const [path, val] of Object.entries(getRoutes)) {\n        const { url: templatePath, templateVars } = urlTemplateToSwagger(path);\n        if (val.docs && val.docs.exclude) {\n            continue;\n        }\n        ret[templatePath] = Object.assign(ret[templatePath] || {}, {\n            get: documentedCallbackToSwagger(val.docs, templateVars)\n        });\n    }\n    for (const [path, val] of Object.entries(postRoutes)) {\n        const { url: templatePath, templateVars } = urlTemplateToSwagger(path);\n        if (val.docs && val.docs.exclude) {\n            continue;\n        }\n        ret[templatePath] = Object.assign(ret[templatePath] || {}, {\n            post: documentedCallbackToSwagger(val.docs, templateVars)\n        });\n    }\n\n    // The initial segment of each route is a \"tag\"; get a unique\n    // list of each of these tags and then for annotating the routes\n    const tags = Array.from(\n        new Set(\n            Object.keys(ret)\n                .map(x => x.split(\"/\")[1])\n                .filter(x => x)\n        )\n    );\n    // If a route contains one of the \"tags\", then it should be annotated\n    // accordingly (with each relavent tag)\n    for (const [path, info] of Object.entries(ret)) {\n        const applicableTags = tags.filter(x => path.includes(x));\n        if (info.get && applicableTags.length > 0) {\n            info.get.tags = applicableTags;\n        }\n        if (info.post && applicableTags.length > 0) {\n            info.post.tags = applicableTags;\n        }\n    }\n\n    // Alphabetize the routes so they display in a sensible order.\n    const sortedRet = {};\n    for (const path of Object.keys(ret).sort()) {\n        sortedRet[path] = ret[path];\n    }\n\n    return sortedRet;\n}\n\n/**\n * Document a function with attributes for autogenerating openapi\n * specifications from.\n *\n * @param {*} { func, exclude = false, ...attrs }\n * @returns\n */\nfunction documentCallback({ func, exclude = false, ...attrs }) {\n    // create a wrapped function that we can stuff attributes onto\n    const ret = (...args) => func(...args);\n    ret.docs = {\n        exclude,\n        ...attrs\n    };\n    return ret;\n}\n\nexport {\n    wrappedPropTypes,\n    wrappedPropTypesToSwagger,\n    urlTemplateToSwagger,\n    mockApiRoutesAsSwaggerPaths,\n    documentCallback,\n    docApiPropTypes\n};\n","export function setGlobals(globals = {}, location = window.location) {\n    const searchParams = new URLSearchParams();\n    for (let [key, val] of Object.entries(globals)) {\n        searchParams.append(key, JSON.stringify(val));\n    }\n    if (window.history.pushState && (\"\" + searchParams).length > 0) {\n        let newurl = new URL(location);\n        newurl.search = \"?\" + searchParams;\n        newurl = \"\" + newurl;\n        if (\"\" + newurl !== \"\" + location) {\n            window.history.pushState({ path: newurl }, \"\", newurl);\n        }\n    }\n    return { type: \"SET_GLOBALS\", payload: globals };\n}\n","import React from \"react\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { setGlobals } from \"../views/globals/actions\";\n\nlet mockAPI = { replaceGlobalFetch: () => {}, restoreGlobalFetch: () => {} };\n//import { mockAPI } from \"../api/mockAPI\";\n\nfunction setActive(state, props = {}) {\n    const { fetchSessions = () => {}, active, _setActive = () => {} } = props;\n    if (state === active) {\n        // avoid getting into an update loop\n        return;\n    }\n\n    // store the current activation state in a global (url-persistent) variable\n    props.setGlobals({ ...props.globals, mockAPI: state });\n    if (state === true) {\n        mockAPI.replaceGlobalFetch();\n    } else {\n        mockAPI.restoreGlobalFetch();\n    }\n    _setActive(mockAPI.active);\n    // after the mock API has been set, refetch the sessions,\n    // which will trigger a refetch of all the other data.\n    fetchSessions();\n}\n\n/**\n * A toggle switch for turning on and off the Mock API. An instance\n * of the Mock API is included in this component, and this component\n * takes no arguments.\n *\n * This component only renders when `process.env.REACT_APP_DEV_FEATURES` is truthy.\n *\n * @export\n * @returns {React.ElementType}\n */\nlet ToggleMockApi = function ToggleMockApi(props) {\n    const [active, _setActive] = React.useState(mockAPI.active);\n    const fullProps = { ...props, active, _setActive };\n    // Check the global state to see if we should activate right away\n    React.useEffect(() => {\n        if (props.globals.mockAPI === true) {\n            setActive(true, fullProps);\n        }\n        // eslint-disable-next-line\n    }, [props.globals]);\n\n    return (\n        <span\n            title={\n                \"The Mock API simulates the TAPP API but uses browser-based storage. This allows you to test TAPP functionality without a working server.\"\n            }\n        >\n            Mock API{\" \"}\n            <ButtonGroup>\n                <Button\n                    variant={active ? \"primary\" : \"secondary\"}\n                    onClick={() => setActive(true, fullProps)}\n                >\n                    On\n                </Button>\n                <Button\n                    variant={active ? \"secondary\" : \"primary\"}\n                    onClick={() => setActive(false, fullProps)}\n                >\n                    Off\n                </Button>\n            </ButtonGroup>\n        </span>\n    );\n};\n\n// in production, ToggleMockApi is a no-op. In development, it actually\n// does something.\n/* eslint-disable */\nif (process.env.REACT_APP_DEV_FEATURES) {\n    const mock = require(\"../api/mockAPI\");\n    mockAPI = mock.mockAPI;\n} else {\n    ToggleMockApi = function ToggleMockApi() {\n        return null;\n    };\n}\n/* eslint-enable */\n\nToggleMockApi = connect(state => ({ globals: state.ui.globals }), {\n    setGlobals\n})(ToggleMockApi);\n\nexport { ToggleMockApi };\n","import { error } from \"react-notification-system-redux\";\n\n// these properties are for `react-notification-system-redux`\nconst defaultNotifProps = {\n    position: \"tr\",\n    autoDismiss: 10,\n    title: \"Error\"\n};\n\nexport const fetchError = payload =>\n    error({\n        ...defaultNotifProps,\n        title: \"Error fetching data\",\n        message: payload\n    });\n\nexport const upsertError = payload =>\n    error({\n        ...defaultNotifProps,\n        title: \"Error updating/inserting data\",\n        message: payload\n    });\n\nexport const deleteError = payload =>\n    error({\n        ...defaultNotifProps,\n        title: \"Error deleting data\",\n        message: payload\n    });\n\n// General error for when a more specific error\n// type is not known\nexport const apiError = payload =>\n    error({\n        ...defaultNotifProps,\n        title: \"API Error\",\n        message: payload\n    });\n","import { API_INTERACTION_START, API_INTERACTION_END } from \"../constants\";\n\n// actions\nexport const apiInteractionStart = (id, message) => ({\n    type: API_INTERACTION_START,\n    payload: { id, message }\n});\nexport const apiInteractionEnd = id => ({\n    type: API_INTERACTION_END,\n    payload: { id }\n});\n","export const API_INTERACTION_START = \"API_INTERACTION_START\";\nexport const API_INTERACTION_END = \"API_INTERACTION_END\";\n\n/* Constants were batch-created with the following code:\n\n    let wrap = x => x.map(y => `export const ${y} = \"${y}\";`);\n    console.log(\n        [\n            \"session\",\n            \"instructor\",\n            \"position\",\n            \"assignment\",\n            \"offer\",\n            \"contract_template\",\n            \"application\",\n            \"wage_chunk\"\n        ]\n            .map(x => {\n                x = x.toUpperCase();\n                return [`// \\`${x.toLowerCase()}\\`-related constants`]\n                    .concat(\n                        wrap([\n                            `FETCH_${x}S_SUCCESS`,\n                            `FETCH_ONE_${x}_SUCCESS`,\n                            `UPSERT_ONE_${x}_SUCCESS`,\n                            `DELETE_ONE_${x}_SUCCESS`\n                        ])\n                    )\n                    .join(\"\\n\");\n            })\n            .join(\"\\n\\n\")\n    );\n*/\n\n// `session`-related constants\nexport const FETCH_SESSIONS_SUCCESS = \"FETCH_SESSIONS_SUCCESS\";\nexport const FETCH_ONE_SESSION_SUCCESS = \"FETCH_ONE_SESSION_SUCCESS\";\nexport const UPSERT_ONE_SESSION_SUCCESS = \"UPSERT_ONE_SESSION_SUCCESS\";\nexport const DELETE_ONE_SESSION_SUCCESS = \"DELETE_ONE_SESSION_SUCCESS\";\nexport const SET_ACTIVE_SESSION = \"SET_ACTIVE_SESSION\";\n\n// `instructor`-related constants\nexport const FETCH_INSTRUCTORS_SUCCESS = \"FETCH_INSTRUCTORS_SUCCESS\";\nexport const FETCH_ONE_INSTRUCTOR_SUCCESS = \"FETCH_ONE_INSTRUCTOR_SUCCESS\";\nexport const UPSERT_ONE_INSTRUCTOR_SUCCESS = \"UPSERT_ONE_INSTRUCTOR_SUCCESS\";\nexport const DELETE_ONE_INSTRUCTOR_SUCCESS = \"DELETE_ONE_INSTRUCTOR_SUCCESS\";\nexport const ADD_INSTRUCTOR_TO_POSITION_SUCCESS =\n    \"ADD_INSTRUCTOR_TO_POSITION_SUCCESS\";\n\n// `position`-related constants\nexport const FETCH_POSITIONS_SUCCESS = \"FETCH_POSITIONS_SUCCESS\";\nexport const FETCH_ONE_POSITION_SUCCESS = \"FETCH_ONE_POSITION_SUCCESS\";\nexport const UPSERT_POSITIONS_SUCCESS = \"UPSERT_POSITIONS_SUCCESS\";\nexport const UPSERT_ONE_POSITION_SUCCESS = \"UPSERT_ONE_POSITION_SUCCESS\";\nexport const DELETE_ONE_POSITION_SUCCESS = \"DELETE_ONE_POSITION_SUCCESS\";\n\n// `assignment`-related constants\nexport const FETCH_ASSIGNMENTS_SUCCESS = \"FETCH_ASSIGNMENTS_SUCCESS\";\nexport const FETCH_ONE_ASSIGNMENT_SUCCESS = \"FETCH_ONE_ASSIGNMENT_SUCCESS\";\nexport const UPSERT_ONE_ASSIGNMENT_SUCCESS = \"UPSERT_ONE_ASSIGNMENT_SUCCESS\";\nexport const DELETE_ONE_ASSIGNMENT_SUCCESS = \"DELETE_ONE_ASSIGNMENT_SUCCESS\";\n\n// `offer`-related constants\nexport const FETCH_OFFERS_SUCCESS = \"FETCH_OFFERS_SUCCESS\";\nexport const FETCH_ONE_OFFER_SUCCESS = \"FETCH_ONE_OFFER_SUCCESS\";\nexport const UPSERT_ONE_OFFER_SUCCESS = \"UPSERT_ONE_OFFER_SUCCESS\";\nexport const DELETE_ONE_OFFER_SUCCESS = \"DELETE_ONE_OFFER_SUCCESS\";\nexport const SET_OFFER_ACCEPTED_SUCCESS = \"SET_OFFER_ACCEPTED_SUCCESS\";\nexport const SET_OFFER_REJECTED_SUCCESS = \"SET_OFFER_REJECTED_SUCCESS\";\nexport const OFFER_CREATE_SUCCESS = \"OFFER_CREATE_SUCCESS\";\nexport const OFFER_EMAIL_SUCCESS = \"OFFER_EMAIL_SUCCESS\";\nexport const OFFER_NAG_SUCCESS = \"OFFER_NAG_SUCCESS\";\nexport const OFFER_WITHDRAW_SUCCESS = \"OFFER_WITHDRAW_SUCCESS\";\n\n// `contract_template`-related constants\nexport const FETCH_CONTRACT_TEMPLATES_SUCCESS =\n    \"FETCH_CONTRACT_TEMPLATES_SUCCESS\";\nexport const FETCH_ONE_CONTRACT_TEMPLATE_SUCCESS =\n    \"FETCH_ONE_CONTRACT_TEMPLATE_SUCCESS\";\nexport const UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS =\n    \"UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS\";\nexport const DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS =\n    \"DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS\";\nexport const FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS =\n    \"FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS\";\n\n// `application`-related constants\nexport const FETCH_APPLICATIONS_SUCCESS = \"FETCH_APPLICATIONS_SUCCESS\";\nexport const FETCH_ONE_APPLICATION_SUCCESS = \"FETCH_ONE_APPLICATION_SUCCESS\";\nexport const UPSERT_ONE_APPLICATION_SUCCESS = \"UPSERT_ONE_APPLICATION_SUCCESS\";\nexport const DELETE_ONE_APPLICATION_SUCCESS = \"DELETE_ONE_APPLICATION_SUCCESS\";\n\n// `wage_chunk`-related constants\nexport const FETCH_WAGE_CHUNKS_SUCCESS = \"FETCH_WAGE_CHUNKS_SUCCESS\";\nexport const FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS =\n    \"FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS\";\nexport const UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS =\n    \"UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS\";\nexport const FETCH_ONE_WAGE_CHUNK_SUCCESS = \"FETCH_ONE_WAGE_CHUNK_SUCCESS\";\nexport const UPSERT_ONE_WAGE_CHUNK_SUCCESS = \"UPSERT_ONE_WAGE_CHUNK_SUCCESS\";\nexport const DELETE_ONE_WAGE_CHUNK_SUCCESS = \"DELETE_ONE_WAGE_CHUNK_SUCCESS\";\n\n// `applicant`-related constants\nexport const FETCH_APPLICANTS_SUCCESS = \"FETCH_APPLICANTS_SUCCESS\";\nexport const FETCH_ONE_APPLICANT_SUCCESS = \"FETCH_ONE_APPLICANT_SUCCESS\";\nexport const UPSERT_ONE_APPLICANT_SUCCESS = \"UPSERT_ONE_APPLICANT_SUCCESS\";\nexport const DELETE_ONE_APPLICANT_SUCCESS = \"DELETE_ONE_APPLICANT_SUCCESS\";\nexport const ADD_APPLICANT_TO_SESSION_SUCCESS =\n    \"ADD_APPLICANT_TO_SESSION_SUCCESS\";\n\n// `user`/`active_user` constants\nexport const FETCH_ACTIVE_USER_SUCCESS = \"FETCH_ACTIVE_USER_SUCCESS\";\nexport const SET_ACTIVE_USER_ROLE_SUCCESS = \"SET_ACTIVE_USER_ROLE_SUCCESS\";\nexport const FETCH_USERS_SUCCESS = \"FETCH_USERS_SUCCESS\";\nexport const UPSERT_USERS_SUCCESS = \"UPSERT_USERS_SUCCESS\";\n\n// `debug` constants\nexport const DEBUG_SET_ACTIVE_USER_SUCCESS = \"DEBUG_SET_ACTIVE_USER_SUCCESS\";\n","import uuid from \"uuid-random\";\nimport PropTypes from \"prop-types\";\nimport { apiError } from \"./errors\";\nimport { apiInteractionStart, apiInteractionEnd } from \"./status\";\n\n/**\n * Turn an array of items into a hash of items indexed\n * by the value of `indexBy`\n *\n * @export\n * @param {array} l\n * @param {string} [indexBy=\"id\"]\n * @returns {object[]}\n */\nexport function arrayToHash(l, indexBy = \"id\") {\n    if (!Array.isArray(l)) {\n        return l;\n    }\n    const ret = {};\n    for (const d of l) {\n        ret[d[indexBy]] = d;\n    }\n    return ret;\n}\n\n/**\n * Creates an action function that returns an object of the form\n * ```\n *    {\n *        type: TYPE,\n *        payload: payload\n *    }\n * ```\n * This factory function can be used if your action is of this standard form.\n *\n * @export\n * @param {string} type\n * @returns {function(object): {type: string, payload: object}}\n */\nexport function actionFactory(type) {\n    return payload => ({\n        type,\n        payload\n    });\n}\n\n/**\n * Split an object into two objects. One with only properties listed in\n * `props` and the other with all remaining properties.\n *\n * @param {*} obj - object to be split\n * @param {*} [props=[]] - list of properties to split out\n * @returns {[object, object]} list of two objects. The first contains all properties not listed in `props`. The second contains all properties listed in `props`\n */\nexport function splitObjByProps(obj, props = []) {\n    const ret = {},\n        filtered = {};\n    for (const prop of props) {\n        if (Object.hasOwnProperty.call(obj, prop)) {\n            filtered[prop] = obj[prop];\n        }\n    }\n    for (const prop in obj) {\n        if (!Object.hasOwnProperty.call(filtered, prop)) {\n            ret[prop] = obj[prop];\n        }\n    }\n    return [ret, filtered];\n}\n\n/**\n * Create a function that takes an `obj` object. It effectively does\n * `obj[outPropName] = obj[inPropName].id; delete obj[inPropName]` but\n * is non-destructive.\n *\n * @export\n * @param {string} inPropName\n * @param {string} outPropName\n * @param {boolean} [isArrayOfIds=false]\n * @returns\n */\nexport function flattenIdFactory(\n    inPropName,\n    outPropName,\n    isArrayOfIds = false\n) {\n    return function(obj) {\n        // if the `inPropName` field doesn't exist, don't change anything\n        // and don't error!\n        if (obj[inPropName] == null) {\n            return obj;\n        }\n        const [ret, filtered] = splitObjByProps(obj, [inPropName]);\n        if (isArrayOfIds) {\n            ret[outPropName] = filtered[inPropName].map(x => x.id);\n        } else {\n            ret[outPropName] = filtered[inPropName].id;\n        }\n        return ret;\n    };\n}\n\nexport const onActiveSessionChangeActions = [];\n\n/**\n * Registers an action to be called whenever activeSession changes.\n * If the action is a function, it should expect no arguments. It may\n * be a redux-thunk.\n *\n * @export\n * @param {(function|object)} dispatcher\n */\nexport function runOnActiveSessionChange(action) {\n    // if we passed in a regular object, encapsulate it\n    // in a function.\n    if (!(action instanceof Function)) {\n        action = () => action;\n    }\n    onActiveSessionChangeActions.push(action);\n}\n\n/**\n * Create a dispatcher that validates `payload` accoring to the specified\n * `propTypes`. If validation fails, a warning will be printed to the console\n * and exectution of the dispatcher will stop. This function also wraps the\n * dispatch in `apiInteractionStart` and `apiInteractionEnd` actions.\n *\n * If the action only accepts one argument, then `propTypes` should be a single\n * `PropTypes` object (e.g., `{id: PropTypes.any.isRequired}`). If the action\n * accepts multiple arguments, `propTypes` should be an array (of length the number\n * of accepted arguments) of `PropTypes` objects.\n *\n * @export\n * @param {object} obj An object with information to create an action\n * @param {function} obj.dispatcher The action that will be dispatched after validation passes\n * @param {string} obj.name The name of the action\n * @param {string} obj.description A description of what the action does\n * @param {?(PropTypes|PropTypes[])} obj.propTypes A PropTypes object or an array of PropTypes objects\n * @param {?(function|boolean)} obj.onErrorDispatch Function that returns an action to be executed on error, or boolean `true` to autogenerate an error action\n * @returns {function} A redux-thunk action\n */\nexport function validatedApiDispatcher({\n    dispatcher,\n    // eslint-disable-next-line react/forbid-foreign-prop-types\n    propTypes,\n    name,\n    description,\n    onErrorDispatch\n}) {\n    return (...args) => {\n        // we return a new dispatcher that performs some validation\n        // and then dispatches as usual\n        return async dispatch => {\n            // validate `args`. `args` is an array containing the arguments.\n            // if propTypes is an array, it lists the propTypes for every argument,\n            // otherwise there is just one argument.\n\n            let wasPropTypesError = false;\n            // This function performs the actual PropType check with extra arguments that\n            // will make the warnings in the console more descriptive\n            function propTypeCheck(propTypes, arg) {\n                PropTypes.checkPropTypes(\n                    propTypes,\n                    arg || {},\n                    \"api action argument\",\n                    name,\n                    () => {\n                        wasPropTypesError = true;\n                    }\n                );\n            }\n            if (Array.isArray(propTypes)) {\n                if (propTypes.length !== args.length) {\n                    wasPropTypesError = true;\n                } else {\n                    for (let i = 0; i < propTypes.length; i++) {\n                        propTypeCheck(propTypes[i], args[i]);\n                    }\n                }\n            } else if (propTypes) {\n                propTypeCheck(propTypes, args[0]);\n            }\n            if (wasPropTypesError) {\n                dispatch(\n                    apiError(\n                        `Invalid arguments to ${name} while attempting action \"${description}\"`\n                    )\n                );\n                return;\n            }\n\n            // Declare the start of an API interaction. Generate a `statusId`\n            // so that we can specify which API interaction is ending (since multiple\n            // ones may be going at the same time).\n            const statusId = uuid();\n            dispatch(apiInteractionStart(statusId, description));\n            try {\n                // We need to await so that promise errors get thrown\n                // as real errors\n                await dispatch(dispatcher(...args));\n            } catch (e) {\n                if (onErrorDispatch) {\n                    if (onErrorDispatch instanceof Function) {\n                        dispatch(onErrorDispatch(e));\n                    } else {\n                        dispatch(\n                            apiError(\n                                `Error encountered during \"${description}\"`\n                            )\n                        );\n                    }\n                } else {\n                    throw e;\n                }\n            } finally {\n                // Always declare the API interaction done, even\n                // if there was an error somewhere along the way.\n                dispatch(apiInteractionEnd(statusId));\n            }\n        };\n    };\n}\n","/*\n * A collection of untilty functions for interfacing with the API\n */\n\nconst API_URL = \"/api/v1\";\nconst FETCH_INIT = {\n    credentials: \"same-origin\",\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n};\n\n/**\n * Error thrown whenever an api call returns with `status===\"error\"`\n *\n * @class ApiError\n * @extends {Error}\n */\nclass ApiError extends Error {\n    constructor(resp) {\n        const errorMessage = resp.message;\n        super(errorMessage);\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ApiFetchError);\n        }\n        this.response = resp;\n        this.status = resp.status;\n    }\n}\n\n/**\n * Error thrown whenever an api fetch request\n * returns with a status other than 200\n *\n * @class ApiFetchError\n * @extends {ApiError}\n */\nclass ApiFetchError extends ApiError {\n    constructor(resp, path) {\n        const errorMessage = `Got status ${resp.status} ${\n            resp.statusText\n        } when fetching ${API_URL + path}`;\n        super({ message: errorMessage });\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ApiFetchError);\n        }\n        this.response = resp;\n        this.status = resp.status;\n    }\n}\n\n// Ensure that `path` starts with a `/`\nfunction _ensurePath(path) {\n    return path.startsWith(\"/\") ? path : \"/\" + path;\n}\n\n// Process a `fetch` response from the API.\n// Successful responses from the API should be of\n// the form `{status: (\"success\"|\"error\"), message: \"...\", payload: ...}.\n// Throw an error on a failed HTTP request or a `status !== \"success\"`\n// response from the API.\nasync function _processFetchResponse(resp, path) {\n    if (resp.status === 200) {\n        const json = await resp.json();\n        if (json.status !== \"success\") {\n            // If we got random JSON instead of {status: ..., message: ..., payload: ...}\n            // There will be no `json.message`. Provide a default message that will get\n            // overridden in this case\n            throw new ApiError({\n                message: \"Server response did not have `status === 'success`\",\n                ...json\n            });\n        }\n        return json.payload;\n    }\n    // if we made it this far, there was a bad status\n    // returned during fetch\n    throw new ApiFetchError(resp, path);\n}\n\n/**\n * Do a GET requestion on the specified api route\n *\n * @param {string} path\n * @returns {Promise<object>} Promise containing the processed JSON response\n * @throws {(ApiError|ApiFetchError|Error)} Throws an error if the fetch fails or returns with `status===\"error\"`\n */\nasync function apiGET(path) {\n    // remove a leading \"/\" if there is one in `path`\n    path = _ensurePath(path);\n    const resp = await fetch(API_URL + path, {\n        ...FETCH_INIT,\n        method: \"GET\"\n    });\n    return await _processFetchResponse(resp, path);\n}\n\n/**\n * Do a POST requestion on the specified api route\n *\n * @param {string} path\n * @param {object} [body={}]\n * @returns {Promise<object>} Promise containing the processed JSON response\n * @throws {(ApiError|ApiFetchError|Error)} Throws an error if the fetch fails or returns with `status===\"error\"`\n */\nasync function apiPOST(path, body = {}) {\n    // remove a leading \"/\" if there is one in `path`\n    path = _ensurePath(path);\n    const resp = await fetch(API_URL + path, {\n        ...FETCH_INIT,\n        method: \"POST\",\n        body: JSON.stringify(body)\n    });\n    return await _processFetchResponse(resp, path);\n}\n\nexport { API_URL, ApiError, ApiFetchError, apiGET, apiPOST };\n","/*\n * A set of utility functions to help with creating reducers\n */\n\nimport { combineReducers as _origCombineReducers } from \"redux\";\nimport { createReducer as _origCreateReducer } from \"redux-create-reducer\";\n\n/**\n * Either updates the item `modelData`\n * with id == newItem.id, or appends it.\n *\n * @param {object} modelData\n * @param {object} newItem\n * @returns {object} An updated version of modelData\n */\nexport function upsertItem(modelData, newItem) {\n    let didUpdate = false;\n    const newModelData = modelData.map(item => {\n        if (item.id === newItem.id) {\n            didUpdate = 1;\n            return newItem;\n        }\n        return item;\n    });\n    if (!didUpdate) {\n        newModelData.push(newItem);\n    }\n    return newModelData;\n}\n\n/**\n * Create a basic reducer for the operations\n *   FETCH_MANY\n *   FETCH_ONE\n *   UPSERT_ONE\n *   DELETE_ONE\n * A basic reducer assumes that `state._modelData` is\n * an array and that each item in that array has an `id`\n * that can be used to determine upserts and deletes, etc..\n *\n * @param {string} FETCH_MANY\n * @param {string} FETCH_ONE\n * @param {string} UPSERT_ONE\n * @param {string} DELETE_ONE\n * @returns {object} An object of reducers suitable for passing to `createReducer`\n */\nexport function createBasicReducerObject(\n    FETCH_MANY,\n    FETCH_ONE,\n    UPSERT_ONE,\n    DELETE_ONE\n) {\n    return {\n        [FETCH_MANY]: (state, action) => ({\n            ...state,\n            _modelData: action.payload\n        }),\n        [FETCH_ONE]: (state, action) => ({\n            ...state,\n            _modelData: upsertItem(state._modelData, action.payload)\n        }),\n        [UPSERT_ONE]: (state, action) => ({\n            ...state,\n            _modelData: upsertItem(state._modelData, action.payload)\n        }),\n        [DELETE_ONE]: (state, action) => {\n            const deletedItem = action.payload;\n            return {\n                ...state,\n                _modelData: state._modelData.filter(\n                    item => item.id !== deletedItem.id\n                )\n            };\n        }\n    };\n}\n\n/**\n * Wraps \"redux-create-reducer\"'s version of `createReducer` to add\n * a `_storePath` attribute to the initial state and the reducer.\n * `_storePath` is used by `localStoreSelector` to return the local\n * state when passed in the global state. (For example, if\n *    `state = { a: b: localState }`, then `localStoreSelector(state) === localState`.)\n *\n * @param {object} initialState\n * @param {object} handlers\n * @returns\n */\nexport function createReducer(initialState, handlers) {\n    const path = [];\n    function pushToPath(dir) {\n        path.unshift(dir);\n    }\n    // Every isolated state should have a unique id, so generate\n    // a random one.\n    const _storePath = { id: Math.random(), path, pushToPath };\n\n    // add _storePath to the initial state and to the\n    // new reducer\n    initialState._storePath = _storePath;\n    const reducer = _origCreateReducer(initialState, handlers);\n    reducer._storePath = _storePath;\n\n    // For convenience, attach a local store selector to the reducer\n    reducer._localStoreSelector = createLocalStoreSelector(_storePath);\n\n    return reducer;\n}\n\n/**\n * Search `state` for a local state in the location of `_storePath.path`.\n * For example, if `_storePath.path = [\"a\", \"b\"]`, this function will\n * return `state.a.b`.\n *\n * @param {object} state Redux state\n * @param {object} _storePath The `_storePath` object to use for searching `state`\n * @returns\n */\nfunction _localStoreSelector(state, _storePath) {\n    if (state._storePath && state._storePath.id === _storePath.id) {\n        return state;\n    }\n    try {\n        let localState = state;\n        for (const dir of _storePath.path) {\n            localState = localState[dir];\n        }\n        return localState;\n    } catch (e) {\n        // eslint-disable-next-line\n        console.error(\n            \"Searching\",\n            state,\n            \"for local state with path\",\n            _storePath.join(\".\"),\n            \"but encountered an error\"\n        );\n    }\n    return state;\n}\n\n/**\n * Create a selector that, when passed in the global redux state, will search\n * and return a local state based on the information in `_storePath`. This selector\n * can be passed either the local state or the global state. If it is passed the local\n * state, it checks that the `state._storePath.id` field matches `_storePath.id`;\n * if so, this selector immediately returns `state`. Otherwise, use `_storePath.path`\n * to search for the local state. For example, if `_storePath.path = [\"a\", \"b\"]`,\n * the returned selector will return `state.a.b`.\n *\n * @export\n * @param {object} _storePath\n * @param {array} _storePath.path The path to search in the redux state\n * @param {array} _storePath.id The unique id of the local state\n * @returns {Function} A selector that returns the local state (based on `_storePath`) when passed the global state\n */\nexport function createLocalStoreSelector(_storePath) {\n    return state => _localStoreSelector(state, _storePath);\n}\n\n/**\n * Wraps \"redux\"'s `combineReducers` function so that `reducer._storePath.pushToPath`\n * is called on all child reducers.\n *\n * Redux's `combineReducers` function creates a new reducer from `model` that dispatches\n * actions to all reducers listed in `model`, but passes them an isolated part of the\n * store instead of passing in the full redux store as `state`. This is great for writing\n * reducers, but it makes things complicated for writing selectors, since, in general,\n * a selector will get passed the whole state, not the isolated part of the state that\n * `combineReducers` supplies. This wrapped version of `combineReducers` adds to a `path`\n * variable that is present in each reducer and which can be passed to a smart selector.\n *\n * @export\n * @param {object} model An object whose values are reducers\n * @returns {Function} A reducer\n */\nexport function combineReducers(model) {\n    const pushToPathCallbacks = [];\n    // recursively call all `pushToPath` functions.\n    // They have been stored in `pushToPathCallbacks`\n    function pushToPath(dir) {\n        for (const func of pushToPathCallbacks) {\n            func(dir);\n        }\n    }\n\n    for (const [dir, reducer] of Object.entries(model)) {\n        if (reducer._storePath) {\n            reducer._storePath.pushToPath(dir);\n            pushToPathCallbacks.push(reducer._storePath.pushToPath);\n        }\n    }\n\n    const newReducer = _origCombineReducers(model);\n    newReducer._storePath = { pushToPath };\n\n    return newReducer;\n}\n","import {\n    FETCH_SESSIONS_SUCCESS,\n    FETCH_ONE_SESSION_SUCCESS,\n    UPSERT_ONE_SESSION_SUCCESS,\n    DELETE_ONE_SESSION_SUCCESS,\n    SET_ACTIVE_SESSION\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: [],\n    activeSession: null\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_SESSIONS_SUCCESS,\n    FETCH_ONE_SESSION_SUCCESS,\n    UPSERT_ONE_SESSION_SUCCESS,\n    DELETE_ONE_SESSION_SUCCESS\n);\n\nexport const sessionsReducer = createReducer(initialState, {\n    ...basicReducers,\n    [SET_ACTIVE_SESSION]: (state, action) => ({\n        ...state,\n        activeSession: action.payload\n    })\n});\n","import {\n    FETCH_USERS_SUCCESS,\n    FETCH_ACTIVE_USER_SUCCESS,\n    SET_ACTIVE_USER_ROLE_SUCCESS\n} from \"../constants\";\nimport { createReducer } from \"./utils\";\n\nconst initialState = {\n    users: [],\n    active_user: {},\n    active_role: \"admin\"\n};\n\nexport const usersReducer = createReducer(initialState, {\n    [FETCH_ACTIVE_USER_SUCCESS]: (state, action) => ({\n        ...state,\n        active_user: action.payload\n    }),\n    [FETCH_USERS_SUCCESS]: (state, action) => ({\n        ...state,\n        users: action.payload\n    }),\n    [SET_ACTIVE_USER_ROLE_SUCCESS]: (state, action) => ({\n        ...state,\n        active_role: action.payload\n    })\n});\n","import {\n    FETCH_ACTIVE_USER_SUCCESS,\n    FETCH_USERS_SUCCESS,\n    UPSERT_USERS_SUCCESS,\n    SET_ACTIVE_USER_ROLE_SUCCESS\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport { actionFactory, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { usersReducer } from \"../reducers/users\";\n\n// actions\nconst fetchActiveUserSuccess = actionFactory(FETCH_ACTIVE_USER_SUCCESS);\nconst fetchUsersSuccess = actionFactory(FETCH_USERS_SUCCESS);\nconst upsertUserSuccess = actionFactory(UPSERT_USERS_SUCCESS);\nconst setActiveUserRoleSuccess = actionFactory(SET_ACTIVE_USER_ROLE_SUCCESS);\n\n// dispatchers\nexport const fetchActiveUser = validatedApiDispatcher({\n    name: \"fetchActiveUser\",\n    description: \"Fetch the active user\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/active_user`);\n        dispatch(fetchActiveUserSuccess(data));\n    }\n});\n\nexport const upsertUser = validatedApiDispatcher({\n    name: \"upsertUsers\",\n    description: \"Upserts a user (setting their role(s))\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: user => async dispatch => {\n        const data = await apiPOST(`/admin/users`, user);\n        dispatch(upsertUserSuccess(data));\n        // After we update a wage chunk, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchUsers(user));\n    }\n});\n\nexport const fetchUsers = validatedApiDispatcher({\n    name: \"fetchUsers\",\n    description: \"Fetch all users\",\n    propTypes: {},\n    onErrorDispatch: e => upsertError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/users`);\n        dispatch(fetchUsersSuccess(data));\n    }\n});\n\nexport const setActiveUserRole = validatedApiDispatcher({\n    name: \"setActiveUserRole\",\n    description: \"Sets the role of the active user\",\n    onErrorDispatch: e => deleteError(e.toString()),\n    dispatcher: payload => async dispatch => {\n        dispatch(setActiveUserRoleSuccess(payload));\n    }\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\n\n// wage chunk data is stored with the assignments in the redux store\nexport const localStoreSelector = usersReducer._localStoreSelector;\nexport const usersSelector = localStoreSelector;\nexport const activeRoleSelector = state => usersSelector(state).active_role;\n","import PropTypes from \"prop-types\";\nimport { createSelector } from \"reselect\";\nimport {\n    FETCH_SESSIONS_SUCCESS,\n    FETCH_ONE_SESSION_SUCCESS,\n    UPSERT_ONE_SESSION_SUCCESS,\n    DELETE_ONE_SESSION_SUCCESS,\n    SET_ACTIVE_SESSION\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    onActiveSessionChangeActions,\n    validatedApiDispatcher\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { sessionsReducer } from \"../reducers/sessions\";\nimport { activeRoleSelector } from \"./users\";\n\n// actions\nconst fetchSessionsSuccess = actionFactory(FETCH_SESSIONS_SUCCESS);\nconst fetchOneSessionSuccess = actionFactory(FETCH_ONE_SESSION_SUCCESS);\nconst upsertOneSessionSuccess = actionFactory(UPSERT_ONE_SESSION_SUCCESS);\nconst deleteOneSessionSuccess = actionFactory(DELETE_ONE_SESSION_SUCCESS);\nconst setActiveSessionAction = actionFactory(SET_ACTIVE_SESSION);\n\n// dispatchers\nexport const fetchSessions = validatedApiDispatcher({\n    name: \"fetchSessions\",\n    description: \"Fetch sessions\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/sessions`);\n        await dispatch(fetchSessionsSuccess(data));\n\n        // after sessions are fetched, we compare with the active session.\n        // The active session might need to be \"updated\" if the ID matches but\n        // the data doesn't\n        const activeSession = activeSessionSelector(getState());\n\n        if (activeSession) {\n            const matchingSession = data.filter(\n                s => s.id === activeSession.id\n            )[0];\n            if (\n                matchingSession &&\n                JSON.stringify(matchingSession) !==\n                    JSON.stringify(activeSession)\n            ) {\n                // Force an override of the active session, even though the `id`s match.\n                dispatch(setActiveSession(matchingSession, true));\n            }\n        }\n    }\n});\n\nexport const fetchSession = validatedApiDispatcher({\n    name: \"fetchSession\",\n    description: \"Fetch session\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/sessions/${payload.id}`);\n        dispatch(fetchOneSessionSuccess(data));\n    }\n});\n\nexport const upsertSession = validatedApiDispatcher({\n    name: \"upsertSession\",\n    description: \"Add/insert session\",\n    propTypes: {},\n    onErrorDispatch: e => upsertError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/sessions`, payload);\n        dispatch(upsertOneSessionSuccess(data));\n    }\n});\n\nexport const deleteSession = payload =>\n    validatedApiDispatcher({\n        name: \"deleteSession\",\n        description: \"Delete session\",\n        propTypes: { id: PropTypes.any.isRequired },\n        onErrorDispatch: e => deleteError(e.toString()),\n        dispatcher: async (dispatch, getState) => {\n            const role = activeRoleSelector(getState());\n            const data = await apiPOST(`/${role}/sessions/delete`, payload);\n            dispatch(deleteOneSessionSuccess(data));\n        }\n    });\n\n/**\n * Sets the `activeSession`. `activeSession` is used\n * in other API calls, so changing the active session may\n * trigger changes in other data (for example, `instructors` or `positions`)\n *\n * @param {object} payload - The session to set active\n */\nexport const setActiveSession = validatedApiDispatcher({\n    name: \"setActiveSession\",\n    description: \"Set the active session\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: true,\n    dispatcher: (payload, forceChange = false) => async (\n        dispatch,\n        getState\n    ) => {\n        // Check to see if the active session is actually different. If it is, we will\n        // trigger side-effects\n        const state = getState();\n        if (\n            !forceChange &&\n            (activeSessionSelector(state) || { id: null }).id === payload.id\n        ) {\n            return;\n        }\n        // If we made it here, the activeSession is changing.\n        await dispatch(setActiveSessionAction(payload));\n        // now that we have updated the active session, call all the dispatchers\n        // who requested to be updated whenever the active session changes.\n        // Save their return values so that we can await them after they're\n        // dispatched. This way the browser can do parallel fetching.\n        const promises = [];\n        for (const action of onActiveSessionChangeActions) {\n            promises.push(dispatch(action()));\n        }\n        await Promise.all(promises);\n    }\n});\n\n// selectors\nexport const localStoreSelector = sessionsReducer._localStoreSelector;\nexport const sessionsSelector = createSelector(\n    localStoreSelector,\n    state => state._modelData\n);\nexport const activeSessionSelector = createSelector(\n    localStoreSelector,\n    state => state.activeSession\n);\n","import {\n    FETCH_POSITIONS_SUCCESS,\n    FETCH_ONE_POSITION_SUCCESS,\n    UPSERT_ONE_POSITION_SUCCESS,\n    DELETE_ONE_POSITION_SUCCESS,\n    ADD_INSTRUCTOR_TO_POSITION_SUCCESS\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: []\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_POSITIONS_SUCCESS,\n    FETCH_ONE_POSITION_SUCCESS,\n    UPSERT_ONE_POSITION_SUCCESS,\n    DELETE_ONE_POSITION_SUCCESS\n);\n\nexport const positionsReducer = createReducer(initialState, {\n    ...basicReducers,\n    [ADD_INSTRUCTOR_TO_POSITION_SUCCESS]: (state, action) => {\n        const positionId = action.payload.position.id;\n        const instructors = action.payload.instructors;\n\n        // update the instructors list, but only if we're in the\n        // right position\n        function updateInstructors(position) {\n            if (position.id !== positionId) {\n                return position;\n            }\n            return {\n                ...position,\n                instructors: instructors\n            };\n        }\n\n        return {\n            ...state,\n            _modelData: state._modelData.map(updateInstructors)\n        };\n    }\n});\n","import {\n    FETCH_INSTRUCTORS_SUCCESS,\n    FETCH_ONE_INSTRUCTOR_SUCCESS,\n    UPSERT_ONE_INSTRUCTOR_SUCCESS,\n    DELETE_ONE_INSTRUCTOR_SUCCESS\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: []\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_INSTRUCTORS_SUCCESS,\n    FETCH_ONE_INSTRUCTOR_SUCCESS,\n    UPSERT_ONE_INSTRUCTOR_SUCCESS,\n    DELETE_ONE_INSTRUCTOR_SUCCESS\n);\n\nexport const instructorsReducer = createReducer(initialState, basicReducers);\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_INSTRUCTORS_SUCCESS,\n    FETCH_ONE_INSTRUCTOR_SUCCESS,\n    UPSERT_ONE_INSTRUCTOR_SUCCESS,\n    DELETE_ONE_INSTRUCTOR_SUCCESS\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    runOnActiveSessionChange,\n    validatedApiDispatcher\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { instructorsReducer } from \"../reducers/instructors\";\nimport { createSelector } from \"reselect\";\nimport { activeRoleSelector } from \"./users\";\n\n// actions\nconst fetchInstructorsSuccess = actionFactory(FETCH_INSTRUCTORS_SUCCESS);\nconst fetchOneInstructorSuccess = actionFactory(FETCH_ONE_INSTRUCTOR_SUCCESS);\nconst upsertOneInstructorSuccess = actionFactory(UPSERT_ONE_INSTRUCTOR_SUCCESS);\nconst deleteOneInstructorSuccess = actionFactory(DELETE_ONE_INSTRUCTOR_SUCCESS);\n\n// dispatchers\nexport const fetchInstructors = validatedApiDispatcher({\n    name: \"fetchInstructors\",\n    description: \"Fetch instructors\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/instructors`);\n        dispatch(fetchInstructorsSuccess(data));\n    }\n});\n\nexport const fetchInstructor = validatedApiDispatcher({\n    name: \"fetchInstructor\",\n    description: \"Fetch instructor\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/instructors/${payload.id}`);\n        dispatch(fetchOneInstructorSuccess(data));\n    }\n});\n\nexport const upsertInstructor = validatedApiDispatcher({\n    name: \"upsertInstructor\",\n    description: \"Add/insert instructor\",\n    propTypes: {},\n    onErrorDispatch: e => upsertError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/instructors`, payload);\n        dispatch(upsertOneInstructorSuccess(data));\n    }\n});\n\nexport const deleteInstructor = validatedApiDispatcher({\n    name: \"deleteInstructor\",\n    description: \"Delete instructor\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => deleteError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/instructors/delete`, payload);\n        dispatch(deleteOneInstructorSuccess(data));\n    }\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = instructorsReducer._localStoreSelector;\nexport const instructorsSelector = createSelector(\n    localStoreSelector,\n    state => state._modelData\n);\n\n// Any time the active session changes, we want to refetch\n// all data. Calling `runOnActiveSessionChange` ensures that\n// when the active session changes all data is re-fetched\nrunOnActiveSessionChange(fetchInstructors);\n","import {\n    FETCH_CONTRACT_TEMPLATES_SUCCESS,\n    FETCH_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: [],\n    all: []\n};\n\n// basicReducers is an object whose keys are FETCH_*_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_CONTRACT_TEMPLATES_SUCCESS,\n    FETCH_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS\n);\n\nexport const contractTemplatesReducer = createReducer(initialState, {\n    ...basicReducers,\n    [FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS]: (state, action) => ({\n        ...state,\n        all: action.payload\n    })\n});\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_CONTRACT_TEMPLATES_SUCCESS,\n    UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    runOnActiveSessionChange,\n    validatedApiDispatcher\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { contractTemplatesReducer } from \"../reducers/contract_templates\";\nimport { createSelector } from \"reselect\";\nimport { activeRoleSelector } from \"./users\";\n\n// actions\nconst fetchContractTemplatesSuccess = actionFactory(\n    FETCH_CONTRACT_TEMPLATES_SUCCESS\n);\nconst fetchAllContractTemplatesSuccess = actionFactory(\n    FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS\n);\nconst upsertOneContractTemplateSuccess = actionFactory(\n    UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS\n);\nconst deleteOneContractTemplateSuccess = actionFactory(\n    DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS\n);\n\n// dispatchers\nexport const fetchContractTemplates = validatedApiDispatcher({\n    name: \"fetchContractTemplates\",\n    description: \"Fetch contract_templates\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/contract_templates`\n        );\n        dispatch(fetchContractTemplatesSuccess(data));\n    }\n});\n\nexport const upsertContractTemplate = validatedApiDispatcher({\n    name: \"upsertContractTemplate\",\n    description: \"Add/insert contract_template\",\n    propTypes: {},\n    onErrorDispatch: e => upsertError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/contract_templates`,\n            payload\n        );\n        dispatch(upsertOneContractTemplateSuccess(data));\n    }\n});\n\nexport const deleteContractTemplate = validatedApiDispatcher({\n    name: \"deleteContractTemplate\",\n    description: \"Delete contract_template from a session\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => deleteError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/contract_templates/delete`,\n            payload\n        );\n        dispatch(deleteOneContractTemplateSuccess(data));\n    }\n});\n\nexport const fetchAllContractTemplates = validatedApiDispatcher({\n    name: \"fetchAllContractTemplates\",\n    description: \"Fetch all available contract_templates\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/available_contract_templates`);\n        dispatch(fetchAllContractTemplatesSuccess(data));\n    }\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = contractTemplatesReducer._localStoreSelector;\nexport const contractTemplatesSelector = createSelector(\n    localStoreSelector,\n    state => state._modelData\n);\nexport const allContractTemplatesSelector = createSelector(\n    localStoreSelector,\n    state => state.all\n);\n\n// Any time the active session changes, we want to refetch\n// all data. Calling `runOnActiveSessionChange` ensures that\n// when the active session changes all data is re-fetched\nrunOnActiveSessionChange(fetchContractTemplates);\n","import {\n    FETCH_APPLICANTS_SUCCESS,\n    FETCH_ONE_APPLICANT_SUCCESS,\n    UPSERT_ONE_APPLICANT_SUCCESS,\n    DELETE_ONE_APPLICANT_SUCCESS,\n    ADD_APPLICANT_TO_SESSION_SUCCESS\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: []\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_APPLICANTS_SUCCESS,\n    FETCH_ONE_APPLICANT_SUCCESS,\n    UPSERT_ONE_APPLICANT_SUCCESS,\n    DELETE_ONE_APPLICANT_SUCCESS\n);\n\n/**\n * Produces an array that is the union of `target` and `source`.\n *\n * @param {object[]} target\n * @param {object[]} source\n */\nfunction insertIfMissing(target, source) {\n    const missingItems = [];\n    for (let item of target) {\n        if (!source.some(x => x.id === item.id)) {\n            // the current item is new\n            missingItems.push(item);\n        }\n    }\n    if (missingItems.length > 0) {\n        return target.concat(missingItems);\n    }\n    return target;\n}\n\nexport const applicantsReducer = createReducer(initialState, {\n    ...basicReducers,\n    [ADD_APPLICANT_TO_SESSION_SUCCESS]: (state, action) => ({\n        ...state,\n        _modelData: insertIfMissing(state._modelData, action.payload)\n    })\n});\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_APPLICANTS_SUCCESS,\n    FETCH_ONE_APPLICANT_SUCCESS,\n    UPSERT_ONE_APPLICANT_SUCCESS,\n    DELETE_ONE_APPLICANT_SUCCESS\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    runOnActiveSessionChange,\n    validatedApiDispatcher\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { applicantsReducer } from \"../reducers/applicants\";\nimport { createSelector } from \"reselect\";\nimport { activeRoleSelector } from \"./users\";\n\n// actions\nconst fetchApplicantsSuccess = actionFactory(FETCH_APPLICANTS_SUCCESS);\nconst fetchOneApplicantSuccess = actionFactory(FETCH_ONE_APPLICANT_SUCCESS);\nconst upsertOneApplicantSuccess = actionFactory(UPSERT_ONE_APPLICANT_SUCCESS);\nconst deleteOneApplicantSuccess = actionFactory(DELETE_ONE_APPLICANT_SUCCESS);\n\n// dispatchers\nexport const fetchApplicants = validatedApiDispatcher({\n    name: \"fetchApplicants\",\n    description: \"Fetch applicants\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        // When we fetch applicants, we only want the applicants associated with the current session\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/applicants`\n        );\n        dispatch(fetchApplicantsSuccess(data));\n    }\n});\n\nexport const fetchApplicant = validatedApiDispatcher({\n    name: \"fetchApplicant\",\n    description: \"Fetch applicant\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/applicants/${payload.id}`);\n        dispatch(fetchOneApplicantSuccess(data));\n    }\n});\n\nexport const upsertApplicant = validatedApiDispatcher({\n    name: \"upsertApplicant\",\n    description: \"Add/insert applicant\",\n    propTypes: {},\n    onErrorDispatch: e => upsertError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/applicants`, payload);\n        dispatch(upsertOneApplicantSuccess(data));\n    }\n});\n\nexport const deleteApplicant = validatedApiDispatcher({\n    name: \"deleteApplicant\",\n    description: \"Delete applicant\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => deleteError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/applicants/delete`,\n            payload\n        );\n        dispatch(deleteOneApplicantSuccess(data));\n    }\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = applicantsReducer._localStoreSelector;\nexport const applicantsSelector = createSelector(\n    localStoreSelector,\n    state => state._modelData\n);\n\n// Any time the active session changes, we want to refetch\n// all data. Calling `runOnActiveSessionChange` ensures that\n// when the active session changes all data is re-fetched\nrunOnActiveSessionChange(fetchApplicants);\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_POSITIONS_SUCCESS,\n    FETCH_ONE_POSITION_SUCCESS,\n    UPSERT_ONE_POSITION_SUCCESS,\n    DELETE_ONE_POSITION_SUCCESS\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    runOnActiveSessionChange,\n    validatedApiDispatcher,\n    arrayToHash,\n    flattenIdFactory,\n    splitObjByProps\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { positionsReducer } from \"../reducers/positions\";\nimport { createSelector } from \"reselect\";\nimport { instructorsSelector } from \"./instructors\";\nimport { contractTemplatesSelector } from \"./contract_templates\";\nimport { activeRoleSelector } from \"./users\";\nimport { applicantsSelector } from \"./applicants\";\n\n// actions\nconst fetchPositionsSuccess = actionFactory(FETCH_POSITIONS_SUCCESS);\nconst fetchOnePositionSuccess = actionFactory(FETCH_ONE_POSITION_SUCCESS);\nconst upsertOnePositionSuccess = actionFactory(UPSERT_ONE_POSITION_SUCCESS);\nconst deleteOnePositionSuccess = actionFactory(DELETE_ONE_POSITION_SUCCESS);\n\n// dispatchers\nexport const fetchPositions = validatedApiDispatcher({\n    name: \"fetchPositions\",\n    description: \"Fetch positions\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/positions`\n        );\n        dispatch(fetchPositionsSuccess(data));\n    }\n});\n\nexport const fetchPosition = validatedApiDispatcher({\n    name: \"fetchPosition\",\n    description: \"Fetch position\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/positions/${payload.id}`\n        );\n        dispatch(fetchOnePositionSuccess(data));\n    }\n});\n\n// Some helper functions to convert the data that the UI uses\n// into data that the API can use\nconst instructorsToInstructorIds = flattenIdFactory(\n    \"instructors\",\n    \"instructor_ids\",\n    true\n);\nconst contractTemplateToContractTemplateId = flattenIdFactory(\n    \"contract_template\",\n    \"contract_template_id\"\n);\n\nconst instructorToInstructorId = flattenIdFactory(\n    \"instructor\",\n    \"instructor_id\"\n);\n\nconst applicantToApplicantId = flattenIdFactory(\"applicant\", \"applicant_id\");\n\nfunction prepForApi(data) {\n    const [ret, filtered] = splitObjByProps(data, [\"instructor_preferences\"]);\n\n    if (filtered[\"instructor_preferences\"]) {\n        ret[\"instructor_preferences\"] = filtered[\n            \"instructor_preferences\"\n        ].map(preference =>\n            applicantToApplicantId(instructorToInstructorId(preference))\n        );\n    }\n\n    return contractTemplateToContractTemplateId(\n        instructorsToInstructorIds(ret)\n    );\n}\n\nexport const upsertPosition = validatedApiDispatcher({\n    name: \"upsertPosition\",\n    description: \"Add/insert position\",\n    propTypes: {},\n    onErrorDispatch: e => upsertError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/positions`,\n            prepForApi(payload)\n        );\n        dispatch(upsertOnePositionSuccess(data));\n    }\n});\n\nexport const deletePosition = validatedApiDispatcher({\n    name: \"deletePosition\",\n    description: \"Delete position\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => deleteError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/positions/delete`,\n            prepForApi(payload)\n        );\n        dispatch(deleteOnePositionSuccess(data));\n    }\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = positionsReducer._localStoreSelector;\nconst _positionsSelector = createSelector(\n    localStoreSelector,\n    state => state._modelData\n);\n/**\n * Get the positions, but populate the `instructors` array with the full instructor\n * information.\n */\nexport const positionsSelector = createSelector(\n    [\n        _positionsSelector,\n        instructorsSelector,\n        contractTemplatesSelector,\n        applicantsSelector\n    ],\n    (positions, instructors, contractTemplates, applicants) => {\n        // Hash the instructors by `id` for fast lookup\n        const instructorsById = arrayToHash(instructors);\n        const contractTemplatesById = arrayToHash(contractTemplates);\n        const applicantsById = arrayToHash(applicants);\n\n        // Leave all the data alone, except replace the `instructor_ids` list\n        // with the full instructor data.\n        return positions.map(\n            ({\n                instructor_ids,\n                contract_template_id,\n                instructor_preferences,\n                ...rest\n            }) => ({\n                ...rest,\n                instructors: instructor_ids.map(x => instructorsById[x]),\n                contract_template: contractTemplatesById[contract_template_id],\n                instructor_preferences: (instructor_preferences || []).map(\n                    ({ applicant_id, instructor_id, ...rest }) => ({\n                        instructor: instructorsById[instructor_id],\n                        applicant: applicantsById[applicant_id],\n                        ...rest\n                    })\n                )\n            })\n        );\n    }\n);\n\n// Any time the active session changes, we want to refetch\n// all data. Calling `runOnActiveSessionChange` ensures that\n// when the active session changes all data is re-fetched\nrunOnActiveSessionChange(fetchPositions);\n","import {\n    FETCH_ASSIGNMENTS_SUCCESS,\n    FETCH_ONE_ASSIGNMENT_SUCCESS,\n    UPSERT_ONE_ASSIGNMENT_SUCCESS,\n    DELETE_ONE_ASSIGNMENT_SUCCESS,\n    FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS,\n    UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: [],\n    // Since we don't want to fetch all wage chunks all the time,\n    // we fetch them on a per-assignment basis and store them here.\n    _wageChunksByAssignmentId: {}\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_ASSIGNMENTS_SUCCESS,\n    FETCH_ONE_ASSIGNMENT_SUCCESS,\n    UPSERT_ONE_ASSIGNMENT_SUCCESS,\n    DELETE_ONE_ASSIGNMENT_SUCCESS\n);\n\n/**\n * Given a list of all the wage chunks for a particular assignment,\n * sets the _wageChunksByAssignmentId hash appropriately.\n *\n * @param {*} state\n * @param {{payload: object}} action\n * @returns\n */\nfunction setWageChunks(state, action) {\n    const assignmentId = (action.payload[0] || {}).assignment_id;\n    if (!assignmentId) {\n        return state;\n    }\n    return {\n        ...state,\n        _wageChunksByAssignmentId: {\n            ...state._wageChunksByAssignmentId,\n            [assignmentId]: action.payload\n        }\n    };\n}\n\nexport const assignmentsReducer = createReducer(initialState, {\n    ...basicReducers,\n    // wage chunks are closely associated with assignments, so their actions happen\n    // here\n    [FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS]: setWageChunks,\n    [UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS]: setWageChunks\n});\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_ASSIGNMENTS_SUCCESS,\n    FETCH_ONE_ASSIGNMENT_SUCCESS,\n    UPSERT_ONE_ASSIGNMENT_SUCCESS,\n    DELETE_ONE_ASSIGNMENT_SUCCESS\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    runOnActiveSessionChange,\n    validatedApiDispatcher,\n    arrayToHash,\n    flattenIdFactory\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { assignmentsReducer } from \"../reducers/assignments\";\nimport { createSelector } from \"reselect\";\nimport { applicantsSelector } from \"./applicants\";\nimport { positionsSelector } from \"./positions\";\nimport { activeRoleSelector } from \"./users\";\n\n// actions\nconst fetchAssignmentsSuccess = actionFactory(FETCH_ASSIGNMENTS_SUCCESS);\nconst fetchOneAssignmentSuccess = actionFactory(FETCH_ONE_ASSIGNMENT_SUCCESS);\nconst upsertOneAssignmentSuccess = actionFactory(UPSERT_ONE_ASSIGNMENT_SUCCESS);\nconst deleteOneAssignmentSuccess = actionFactory(DELETE_ONE_ASSIGNMENT_SUCCESS);\n\n// dispatchers\nexport const fetchAssignments = validatedApiDispatcher({\n    name: \"fetchAssignments\",\n    description: \"Fetch assignments\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/assignments`\n        );\n        dispatch(fetchAssignmentsSuccess(data));\n    }\n});\n\nexport const fetchAssignment = validatedApiDispatcher({\n    name: \"fetchAssignment\",\n    description: \"Fetch assignment\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/assignments/${payload.id}`);\n        dispatch(fetchOneAssignmentSuccess(data));\n    }\n});\n\n// Some helper functions to convert the data that the UI uses\n// into data that the API can use\nconst applicantToApplicantId = flattenIdFactory(\"applicant\", \"applicant_id\");\nconst positionToPositionId = flattenIdFactory(\"position\", \"position_id\");\nfunction prepForApi(data) {\n    return positionToPositionId(applicantToApplicantId(data));\n}\n\nexport const upsertAssignment = validatedApiDispatcher({\n    name: \"upsertAssignment\",\n    description: \"Add/insert assignment\",\n    propTypes: {},\n    onErrorDispatch: e => upsertError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/assignments`, prepForApi(payload));\n        dispatch(upsertOneAssignmentSuccess(data));\n    }\n});\n\nexport const deleteAssignment = validatedApiDispatcher({\n    name: \"deleteAssignment\",\n    description: \"Delete assignment\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => deleteError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/delete`,\n            prepForApi(payload)\n        );\n        dispatch(deleteOneAssignmentSuccess(data));\n    }\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needing to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = assignmentsReducer._localStoreSelector;\n/**\n * Get just the assignment data as it appears in the store; i.e., it has references to\n * id's of applicants and positions.\n */\nconst _assignmentsSelector = createSelector(\n    localStoreSelector,\n    state => state._modelData\n);\n/**\n * Get the current assignments. This selector is memoized and will only\n * be recomputed when assignments, applicants, or positions change.\n */\nexport const assignmentsSelector = createSelector(\n    [_assignmentsSelector, applicantsSelector, positionsSelector],\n    (assignments, applicants, positions) => {\n        if (assignments.length === 0) {\n            return [];\n        }\n        applicants = arrayToHash(applicants);\n        positions = arrayToHash(positions);\n        return assignments.map(({ position_id, applicant_id, ...rest }) => ({\n            ...rest,\n            position: positions[position_id] || {},\n            applicant: applicants[applicant_id] || {}\n        }));\n    }\n);\n\n// Any time the active session changes, we want to refetch\n// all data. Calling `runOnActiveSessionChange` ensures that\n// when the active session changes all data is re-fetched\nrunOnActiveSessionChange(fetchAssignments);\n","import {\n    FETCH_APPLICATIONS_SUCCESS,\n    FETCH_ONE_APPLICATION_SUCCESS,\n    UPSERT_ONE_APPLICATION_SUCCESS,\n    DELETE_ONE_APPLICATION_SUCCESS\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: []\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_APPLICATIONS_SUCCESS,\n    FETCH_ONE_APPLICATION_SUCCESS,\n    UPSERT_ONE_APPLICATION_SUCCESS,\n    DELETE_ONE_APPLICATION_SUCCESS\n);\n\nexport const applicationsReducer = createReducer(initialState, basicReducers);\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_APPLICATIONS_SUCCESS,\n    FETCH_ONE_APPLICATION_SUCCESS,\n    UPSERT_ONE_APPLICATION_SUCCESS,\n    DELETE_ONE_APPLICATION_SUCCESS\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    arrayToHash,\n    runOnActiveSessionChange,\n    validatedApiDispatcher,\n    flattenIdFactory,\n    splitObjByProps\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { applicationsReducer } from \"../reducers/applications\";\nimport { createSelector } from \"reselect\";\nimport { applicantsSelector } from \"./applicants\";\nimport { activeRoleSelector } from \"./users\";\nimport { positionsSelector } from \"./positions\";\n\n// actions\nconst fetchApplicationsSuccess = actionFactory(FETCH_APPLICATIONS_SUCCESS);\nconst fetchOneApplicationSuccess = actionFactory(FETCH_ONE_APPLICATION_SUCCESS);\nconst upsertOneApplicationSuccess = actionFactory(\n    UPSERT_ONE_APPLICATION_SUCCESS\n);\nconst deleteOneApplicationSuccess = actionFactory(\n    DELETE_ONE_APPLICATION_SUCCESS\n);\n\nconst applicantToApplicantId = flattenIdFactory(\"applicant\", \"applicant_id\");\nconst positionToPositionId = flattenIdFactory(\"position\", \"position_id\");\nfunction prepForApi(data) {\n    const [ret, filtered] = splitObjByProps(data, [\"position_preferences\"]);\n\n    if (filtered[\"position_preferences\"]) {\n        ret[\"position_preferences\"] = filtered[\n            \"position_preferences\"\n        ].map(preference => positionToPositionId(preference));\n    }\n\n    return applicantToApplicantId(ret);\n}\n\n// dispatchers\nexport const fetchApplications = validatedApiDispatcher({\n    name: \"fetchApplications\",\n    description: \"Fetch applications\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/applications`\n        );\n        dispatch(fetchApplicationsSuccess(data));\n    }\n});\n\nexport const fetchApplication = validatedApiDispatcher({\n    name: \"fetchApplication\",\n    description: \"Fetch application\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/applications/${payload.id}`\n        );\n        dispatch(fetchOneApplicationSuccess(data));\n    }\n});\n\nexport const upsertApplication = validatedApiDispatcher({\n    name: \"upsertApplication\",\n    description: \"Add/insert application\",\n    propTypes: {},\n    onErrorDispatch: e => upsertError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/applications`,\n            prepForApi(payload)\n        );\n        dispatch(upsertOneApplicationSuccess(data));\n    }\n});\n\nexport const deleteApplication = validatedApiDispatcher({\n    name: \"deleteApplication\",\n    description: \"Delete application\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => deleteError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/applications/delete`,\n            prepForApi(payload)\n        );\n        dispatch(deleteOneApplicationSuccess(data));\n    }\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = applicationsReducer._localStoreSelector;\nexport const _applicationsSelector = createSelector(\n    localStoreSelector,\n    state => state._modelData\n);\n\n// Get the current list of applications and recompute `applicant_id` and `position_id`\n// to have corresponding `applicant` and `position` objects\nexport const applicationsSelector = createSelector(\n    [_applicationsSelector, applicantsSelector, positionsSelector],\n    (applications, applicants, positions) => {\n        if (applications.length === 0) {\n            return [];\n        }\n\n        const applicantsById = arrayToHash(applicants);\n        const positionsById = arrayToHash(positions);\n\n        // Change `applicant_id` to the corresponding `applicant` object\n        // and similarly, change each `position_id` in each entry of\n        // `position_preferences` to corresponding `position` object.\n        return applications.map(\n            ({ position_preferences, applicant_id, ...rest }) => ({\n                ...rest,\n                applicant: applicantsById[applicant_id] || {},\n                position_preferences: (position_preferences || []).map(\n                    ({ position_id, ...rest }) => ({\n                        position: positionsById[position_id],\n                        ...rest\n                    })\n                )\n            })\n        );\n    }\n);\n\n// Any time the active session changes, we want to refetch\n// all data. Calling `runOnActiveSessionChange` ensures that\n// when the active session changes all data is re-fetched\nrunOnActiveSessionChange(fetchApplications);\n","import PropTypes from \"prop-types\";\nimport {\n    UPSERT_ONE_WAGE_CHUNK_SUCCESS,\n    DELETE_ONE_WAGE_CHUNK_SUCCESS,\n    FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS,\n    UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport { actionFactory, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { createSelector } from \"reselect\";\nimport { assignmentsReducer } from \"../reducers/assignments\";\nimport { fetchAssignment } from \"./assignments\";\nimport { activeRoleSelector } from \"./users\";\n\n// actions\nconst fetchWageChunksForAssignmentSuccess = actionFactory(\n    FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS\n);\nconst upsertWageChunksForAssignmentSuccess = actionFactory(\n    UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS\n);\nconst upsertOneWageChunkSuccess = actionFactory(UPSERT_ONE_WAGE_CHUNK_SUCCESS);\nconst deleteOneWageChunkSuccess = actionFactory(DELETE_ONE_WAGE_CHUNK_SUCCESS);\n\n// dispatchers\nexport const fetchWageChunksForAssignment = validatedApiDispatcher({\n    name: \"fetchWageChunksForAssignment\",\n    description: \"Fetch wage chunks associated with an assignment\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        // When we fetch wage chunks for an assignment, we only get the wage chunks for that particular assignment\n        const { id: assignmentId } = payload;\n        const data = await apiGET(\n            `/${role}/assignments/${assignmentId}/wage_chunks`\n        );\n        dispatch(fetchWageChunksForAssignmentSuccess(data));\n    }\n});\n\nexport const upsertWageChunksForAssignment = validatedApiDispatcher({\n    name: \"upsertWageChunksForAssignment\",\n    description: \"Fetch wage chunks associated with an assignment\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: (assignment, payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        // When we fetch wage chunks for an assignment, we only get the wage chunks for that particular assignment\n        const { id: assignmentId } = assignment;\n        const data = await apiPOST(\n            `/${role}/assignments/${assignmentId}/wage_chunks`,\n            payload\n        );\n        dispatch(upsertWageChunksForAssignmentSuccess(data));\n        // After we update a wage chunk, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    }\n});\n\nexport const upsertWageChunk = validatedApiDispatcher({\n    name: \"upsertWageChunk\",\n    description: \"Add/insert wage chunk\",\n    propTypes: {},\n    onErrorDispatch: e => upsertError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/wage_chunks`, payload);\n        dispatch(upsertOneWageChunkSuccess(data));\n    }\n});\n\nexport const deleteWageChunk = validatedApiDispatcher({\n    name: \"deleteWageChunk\",\n    description: \"Delete a wage chunk\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => deleteError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/wage_chunks/delete`, payload);\n        dispatch(deleteOneWageChunkSuccess(data));\n    }\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\n\n// wage chunk data is stored with the assignments in the redux store\nexport const localStoreSelector = assignmentsReducer._localStoreSelector;\nexport const wageChunksByAssignmentSelector = createSelector(\n    localStoreSelector,\n    state =>\n        function(assignment) {\n            const assignment_id = assignment.id;\n            if (!state._wageChunksByAssignmentId[assignment_id]) {\n                return [];\n            }\n            return state._wageChunksByAssignmentId[assignment_id];\n        }\n);\n","import {\n    FETCH_ONE_OFFER_SUCCESS,\n    SET_OFFER_ACCEPTED_SUCCESS,\n    SET_OFFER_REJECTED_SUCCESS,\n    OFFER_CREATE_SUCCESS,\n    OFFER_EMAIL_SUCCESS,\n    OFFER_NAG_SUCCESS,\n    OFFER_WITHDRAW_SUCCESS\n} from \"../constants\";\nimport { fetchError } from \"./errors\";\nimport { actionFactory, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { fetchAssignment } from \"./assignments\";\nimport { activeRoleSelector } from \"./users\";\n\n// actions\nexport const fetchOfferSucces = actionFactory(FETCH_ONE_OFFER_SUCCESS);\nexport const setOfferAcceptedSuccess = actionFactory(\n    SET_OFFER_ACCEPTED_SUCCESS\n);\nexport const setOfferRejectedSuccess = actionFactory(\n    SET_OFFER_REJECTED_SUCCESS\n);\nexport const offerCreateSuccess = actionFactory(OFFER_CREATE_SUCCESS);\nexport const offerEmailSuccess = actionFactory(OFFER_EMAIL_SUCCESS);\nexport const offerNagSuccess = actionFactory(OFFER_NAG_SUCCESS);\nexport const offerWithdrawSuccess = actionFactory(OFFER_WITHDRAW_SUCCESS);\n\n// dispatchers\nexport const fetchActiveOfferForAssignment = validatedApiDispatcher({\n    name: \"fetchActiveOfferForAssignment\",\n    description: \"Fetch an offer associated with an assignment\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(\n            `/${role}/assignments/${payload.id}/active_offer`\n        );\n        dispatch(fetchOfferSucces(data));\n    }\n});\n\nexport const setOfferForAssignmentAccepted = validatedApiDispatcher({\n    name: \"setOfferForAssignmentAccepted\",\n    description: \"Set an offer as accepted\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: assignment => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/accept`\n        );\n        dispatch(setOfferAcceptedSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    }\n});\n\nexport const setOfferForAssignmentRejected = validatedApiDispatcher({\n    name: \"setOfferForAssignmentRejected\",\n    description: \"Set an offer as rejected\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: assignment => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/reject`\n        );\n        dispatch(setOfferRejectedSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    }\n});\n\nexport const offerForAssignmentWithdraw = validatedApiDispatcher({\n    name: \"offerForAssignmentWithdraw\",\n    description: \"Withdraw an offer\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: assignment => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/withdraw`\n        );\n        dispatch(offerWithdrawSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    }\n});\n\nexport const offerForAssignmentCreate = validatedApiDispatcher({\n    name: \"offerForAssignmentCreate\",\n    description: \"Create an offer\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: assignment => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/create`\n        );\n        dispatch(offerCreateSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    }\n});\n\nexport const offerForAssignmentEmail = validatedApiDispatcher({\n    name: \"offerForAssignmentEmail\",\n    description: \"Email an offer\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: assignment => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/email`\n        );\n        dispatch(offerEmailSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    }\n});\n\nexport const offerForAssignmentNag = validatedApiDispatcher({\n    name: \"offerForAssignmentNag\",\n    description: \"Send a nag email for an offer\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: assignment => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/nag`\n        );\n        dispatch(offerNagSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    }\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { NavLink, Switch, Route } from \"react-router-dom\";\n\nimport \"./main.css\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport { ToggleMockApi } from \"../../components/mockAPI\";\nimport { fetchSessions } from \"../../api/actions\";\n\nimport SwaggerUI from \"swagger-ui-react\";\nimport \"swagger-ui-react/swagger-ui.css\";\nimport { mockApiRoutesAsSwaggerPaths } from \"../../api/defs/doc-generation\";\nimport { mockAPI } from \"../../api/mockAPI\";\n\n/**\n * Wrap `\"react-router-dom\"`'s `NavLink` in Bootstrap\n * styling.\n *\n * @param {*} props\n * @returns\n */\nfunction BootstrapNavLink(props) {\n    return (\n        <Nav.Link\n            as={NavLink}\n            activeClassName=\"bg-warning text-dark\"\n            to={props.to}\n        >\n            {props.children}\n        </Nav.Link>\n    );\n}\nBootstrapNavLink.propTypes = {\n    to: PropTypes.string\n};\n\nconst swaggerData = {\n    openapi: \"3.0.0\",\n    info: {\n        description:\n            \"TAPP is a program for TA management--for making TA assignments and distributing TA contracts.\",\n        title: \"TAPP\"\n    },\n    servers: [\n        { url: \"/api/v1/admin\" },\n        { url: \"/api/v1/instructor\" },\n        { url: \"/api/v1/ta\" },\n        { url: \"/api/v1\" }\n    ],\n    paths: {\n        /* XXX this is hear temporarily to serve as an example for generating Swagger (openapi) documenation\n        \"/bob\": {\n            get: {\n                summary: \"Bob's summary\",\n                tags: [\"helful\"],\n                produces: \"application/json\",\n                responses: {\n                    default: {\n                        description: \"OK\",\n                        content: {\n                            \"application/json\": {\n                                schema: {\n                                    type: \"object\",\n                                    properties: {\n                                        status: {\n                                            type: \"string\",\n                                            enum: [\"success\", \"error\"]\n                                        },\n                                        message: { type: \"string\" },\n                                        payload: {\n                                            type: \"array\",\n                                            items: {\n                                                type: \"object\",\n                                                properties: {\n                                                    name: { type: \"string\" }\n                                                },\n                                                required: [\"name\"]\n                                            }\n                                        }\n                                    },\n                                    required: [\"status\"]\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n*/\n        ...mockApiRoutesAsSwaggerPaths(mockAPI)\n    }\n};\n\n// When toggled, `ToggleMockApi` will try\n// to refetch all the sessions, so pass it an\n// appropriate dispatcher.\nconst ConnectedToggleMockApi = connect(null, { fetchSessions })(ToggleMockApi);\n\nfunction DevFrame(props) {\n    return (\n        <div id=\"dev-frame\" className=\"bg-info\">\n            <div id=\"dev-frame-header\">\n                <Navbar expand variant=\"dark\">\n                    <Navbar.Brand\n                        href=\"#/\"\n                        title=\"View TAPP in development mode in a framed window.\"\n                    >\n                        Dev Mode\n                    </Navbar.Brand>\n                    <Nav className=\"mr-auto\">\n                        <BootstrapNavLink to=\"/dashboard\">\n                            Dashboard\n                        </BootstrapNavLink>\n                    </Nav>\n                    <Nav className=\"mr-auto\">\n                        <BootstrapNavLink to=\"/api-docs\">\n                            API Docs\n                        </BootstrapNavLink>\n                    </Nav>\n                    <Navbar.Collapse className=\"justify-content-end\">\n                        <ConnectedToggleMockApi />\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n            <div id=\"dev-frame-body\">\n                <div id=\"dev-frame-body-inner\">\n                    <Switch>\n                        <Route path=\"/api-docs\">\n                            <SwaggerUI spec={swaggerData} docExpansion=\"list\" />\n                        </Route>\n                        <Route>{props.children}</Route>\n                    </Switch>\n                </div>\n            </div>\n            <div id=\"dev-frame-footer\"></div>\n        </div>\n    );\n}\n\nexport { DevFrame };\n","/*\n * A collection of untilty functions for interfacing with urls\n */\n\n/**\n * Try to parse `s` as a native javascript type. E.g., \"45.6\" will\n * be parsed as a number, \"true\" will be parsed as `true`, \"[]\"\n * will be parsed as an empty array.\n *\n * @param {string} s\n * @returns\n */\nfunction stringToNativeType(s) {\n    try {\n        return JSON.parse(s);\n    } catch (e) {\n        return s;\n    }\n}\n\nfunction parseURLSearchString(s) {\n    const searchParams = new URLSearchParams(s);\n    const ret = {};\n    for (const [key, val] of searchParams.entries()) {\n        ret[key] = stringToNativeType(val);\n    }\n    return ret;\n}\n\nexport { stringToNativeType, parseURLSearchString };\n","/**\n * Notifications popup whenever they show up in state.ui.notifications\n */\nimport { connect } from \"react-redux\";\nimport Notifications from \"react-notification-system-redux\";\n\nexport const ConnectedNotifications = connect(state => ({\n    notifications: state.ui.notifications\n}))(Notifications);\n","import { SET_SELECTED_ROWS } from \"./constants\";\n\n// actions\nexport const setSelectedRows = data => ({\n    type: SET_SELECTED_ROWS,\n    payload: data\n});\n\n// selectors\nexport const offerTableSelector = state => state.ui.offerTable;\n","import React from \"react\";\nimport { Form, Col } from \"react-bootstrap\";\n\n/**\n * A higher-order-function which returns a function that creates editable fields.\n * For example, `fieldEditorFactory(x, setX)(\"I set foo\", \"foo\", \"number\")` returns\n * a react `<input />` element that will call `setX({...x, foo: <new foo val>})` whenever\n * the input changes.\n *\n * A `type=` parameter can be passed in; when used, some types are coerced. For example,\n * `type=number` will automatically coerce strings to numbers so `setBoundData` would be\n * passed an object with the specified attribute cast as a number.\n *\n * @export\n * @param {object} boundData - object whose attributes will be (non-destructively) set\n * @param {function(object): void} setBoundData - setter function\n * @returnType {function(title: string, attr: string, type: string, inputAttrs: object): React.Node}\n */\nexport function fieldEditorFactory(boundData, setBoundData) {\n    /**\n     * Create a callback function which updates the specified attribute.\n     *\n     * @param {string} attr\n     * @returns\n     */\n    function setAttrFactory(attr, coerceFunc = x => x) {\n        return e => {\n            const newVal = e.target.value || \"\";\n            const newData = { ...boundData, [attr]: coerceFunc(newVal) };\n            setBoundData(newData);\n        };\n    }\n\n    /**\n     * Create a bootstrap form component that updates the specified attr\n     * of `boundData`\n     *\n     * @param {string} title - Label text of the form control\n     * @param {string} attr - attribute of `boundData` to be updated when this form control changes\n     * @param {string?} type - the type of the `<input />` element\n     * @param {object?} inputAttrs - additional attributes to be passed to the `<input />` element\n     * @returnType {React.Node}\n     */\n    function createFieldEditor(title, attr, type = \"text\", inputAttrs = {}) {\n        // Function called on the value before it is passed to setBoundData\n        let coerceFunc = x => x;\n        // Function that is called on the value before it is passed to the `<input />`\n        // element\n        let valueFunc = x => x || \"\";\n\n        // depending on the type we want to coerce values appropriately\n        switch (type) {\n            case \"number\":\n                coerceFunc = Number;\n                break;\n            case \"date\":\n                coerceFunc = x => new Date(x).toISOString();\n                valueFunc = x => {\n                    try {\n                        return new Date(x).toISOString().slice(0, 10);\n                    } catch (e) {\n                        return \"\";\n                    }\n                };\n                break;\n            default:\n                break;\n        }\n\n        return (\n            <React.Fragment>\n                <Form.Label>{title}</Form.Label>\n                <Form.Control\n                    type={type}\n                    value={valueFunc(boundData[attr])}\n                    onChange={setAttrFactory(attr, coerceFunc)}\n                    {...inputAttrs}\n                />\n            </React.Fragment>\n        );\n    }\n\n    return createFieldEditor;\n}\n\n/**\n * Place all children side-by-side in a react-boostrap `Form.Row`\n *\n * @export\n * @param {*} props\n * @returnType {React.Node}\n */\nexport function DialogRow(props) {\n    const { children } = props;\n    return (\n        <Form.Row style={{ alignItems: \"baseline\" }}>\n            {React.Children.map(children, (child, index) => {\n                return (\n                    <Form.Group as={Col} key={index}>\n                        {child}\n                    </Form.Group>\n                );\n            })}\n        </Form.Row>\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"react-bootstrap\";\nimport { docApiPropTypes } from \"../../api/defs/doc-generation\";\nimport { fieldEditorFactory, DialogRow } from \"./common-controls\";\n/**\n * Edit a session\n *\n * @export\n * @param {{session: object, setSession: function}} props\n * @returns\n */\nexport function SessionEditor(props) {\n    const { session, setSession } = props;\n\n    const createFieldEditor = fieldEditorFactory(session, setSession);\n\n    return (\n        <Form>\n            <DialogRow>\n                {createFieldEditor(\"Session Name (e.g. 2019 Fall)\", \"name\")}\n                {createFieldEditor(\"Start Date\", \"start_date\", \"date\")}\n                {createFieldEditor(\"End Date\", \"end_date\", \"date\")}\n            </DialogRow>\n            <DialogRow>\n                {createFieldEditor(\n                    \"Rate 1 (pre-January rate)\",\n                    \"rate1\",\n                    \"number\",\n                    {\n                        step: \"0.01\",\n                        min: 0\n                    }\n                )}\n                {createFieldEditor(\n                    \"Rate 2 (post-January rate)\",\n                    \"rate2\",\n                    \"number\",\n                    {\n                        step: \"0.01\",\n                        min: 0\n                    }\n                )}\n            </DialogRow>\n        </Form>\n    );\n}\nSessionEditor.propTypes = {\n    session: docApiPropTypes.session.isRequired,\n    setSession: PropTypes.func.isRequired\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport class ApplicantsList extends React.Component {\n    static propTypes = {\n        applicants: PropTypes.arrayOf(\n            PropTypes.shape({\n                first_name: PropTypes.string,\n                last_name: PropTypes.string\n            })\n        ).isRequired\n    };\n    render() {\n        const { applicants } = this.props;\n        let applicantsList = <div>No Applicants...</div>;\n        if (applicants.length > 0) {\n            applicantsList = (\n                <ul>\n                    {applicants.map(applicant => (\n                        <li key={applicant.id}>\n                            {applicant.first_name} {applicant.last_name}\n                        </li>\n                    ))}\n                </ul>\n            );\n        }\n        return (\n            <div>\n                <h3>Available Applicants</h3>\n                {applicantsList}\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactTable from \"react-table\";\nimport { docApiPropTypes } from \"../api/defs/doc-generation\";\n\nconst DEFAULT_COLUMNS = [\n    { Header: \"Template Name\", accessor: \"template_name\" },\n    { Header: \"Template File\", accessor: \"template_file\" }\n];\n\n/**\n * List the instructors using a ReactTable. `columns` can be passed\n * in to customize columns/cell renderers.\n *\n * @export\n * @param {{instructors: object[], columns: object[]}} props\n * @returns\n */\nexport function ContractTemplatesList(props) {\n    const { contractTemplates, columns = DEFAULT_COLUMNS } = props;\n    return (\n        <React.Fragment>\n            <h3>Contract Templates</h3>\n            <ReactTable\n                data={contractTemplates}\n                columns={columns}\n                showPagination={false}\n                minRows={1}\n            />\n        </React.Fragment>\n    );\n}\nContractTemplatesList.propTypes = {\n    contractTemplates: PropTypes.arrayOf(docApiPropTypes.contractTemplate)\n        .isRequired,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({ Header: PropTypes.any.isRequired })\n    )\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactTable from \"react-table\";\nimport { docApiPropTypes } from \"../api/defs/doc-generation\";\nimport { Col, Form } from \"react-bootstrap\";\n\nconst DEFAULT_COLUMNS = [\n    { Header: \"Last Name\", accessor: \"last_name\" },\n    { Header: \"First Name\", accessor: \"first_name\" },\n    { Header: \"UTORid\", accessor: \"utorid\" }\n];\n\n/**\n * List the instructors using a ReactTable. `columns` can be passed\n * in to customize columns/cell renderers.\n *\n * @export\n * @param {{instructors: object[], columns: object[]}} props\n * @returns\n */\nexport function InstructorsList(props) {\n    const { instructors, columns = DEFAULT_COLUMNS } = props;\n    return (\n        <React.Fragment>\n            <h3>Instructors</h3>\n            <ReactTable\n                data={instructors}\n                columns={columns}\n                showPagination={false}\n                minRows={1}\n            />\n        </React.Fragment>\n    );\n}\nInstructorsList.propTypes = {\n    instructors: PropTypes.arrayOf(docApiPropTypes.instructor).isRequired,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({ Header: PropTypes.any.isRequired })\n    )\n};\n\nconst DEFAULT_INSTRUCTOR = {\n    utorid: \"\",\n    last_name: \"\",\n    first_name: \"\"\n};\n\n/**\n * Edit information about an instructor.\n *\n * @export\n * @param {{instructor: object, setInstructor: function}} props\n * @returns\n */\nexport function InstructorEditor(props) {\n    const { instructor: instructorProps, setInstructor } = props;\n    const instructor = { ...DEFAULT_INSTRUCTOR, ...instructorProps };\n\n    /**\n     * Create a callback function which updates the specified attribute\n     * of a position.\n     *\n     * @param {string} attr\n     * @returns\n     */\n    function setAttrFactory(attr) {\n        return e => {\n            const newVal = e.target.value || \"\";\n            const newInstructor = { ...instructor, [attr]: newVal };\n            setInstructor(newInstructor);\n        };\n    }\n\n    /**\n     * Create a bootstrap form component that updates the specified attr\n     * of `position`\n     *\n     * @param {string} title - Label text of the form control\n     * @param {string} attr - attribute of `position` to be updated when this form control changes\n     * @returns {node}\n     */\n    function createFieldEditor(title, attr, type = \"text\") {\n        return (\n            <React.Fragment>\n                <Form.Label>{title}</Form.Label>\n                <Form.Control\n                    type={type}\n                    value={instructor[attr] || \"\"}\n                    onChange={setAttrFactory(attr)}\n                />\n            </React.Fragment>\n        );\n    }\n\n    return (\n        <Form>\n            <Form.Row>\n                <Form.Group as={Col}>\n                    {createFieldEditor(\"First Name\", \"first_name\")}\n                </Form.Group>\n                <Form.Group as={Col}>\n                    {createFieldEditor(\"Last Name\", \"last_name\")}\n                </Form.Group>\n                <Form.Group as={Col}>\n                    {createFieldEditor(\"UTORid\", \"utorid\")}\n                </Form.Group>\n            </Form.Row>\n        </Form>\n    );\n}\nInstructorEditor.propTypes = {\n    instructor: docApiPropTypes.instructor,\n    setInstructor: PropTypes.func\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FaEdit } from \"react-icons/fa\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nimport \"./edit-field-widgets.css\";\n\n/**\n * A dialog allowing one to edit `props.value`. `onChagne` is called\n * when \"save\" is clicked while editing this value.\n *\n * @param {*} props\n * @returns\n */\nfunction EditFieldDialog(props) {\n    const { title, value, show, onHide, onChange } = props;\n    const [fieldVal, setFieldVal] = React.useState(value);\n\n    function cancelClick() {\n        setFieldVal(value);\n        onHide();\n    }\n\n    function saveClick() {\n        // eslint-disable-next-line\n        if (fieldVal != value) {\n            // Only call `onChange` if the value has changed\n            onChange(fieldVal, value);\n        }\n        onHide();\n    }\n\n    const changeIndicator =\n        // eslint-disable-next-line\n        fieldVal == value ? null : (\n            <span>\n                Change from{\" \"}\n                <span className=\"field-dialog-formatted-name\">{value}</span> to{\" \"}\n                <span className=\"field-dialog-formatted-name\">{fieldVal}</span>\n            </span>\n        );\n\n    return (\n        <Modal show={show} onHide={cancelClick}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <input\n                    type=\"text\"\n                    value={fieldVal}\n                    onChange={e => setFieldVal(e.currentTarget.value)}\n                />{\" \"}\n                {changeIndicator}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={cancelClick} variant=\"outline-secondary\">\n                    Cancel\n                </Button>\n                <Button onClick={saveClick}>Save</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\n/**\n * An edit icon that appears on hover.\n *\n * @param {*} props\n * @returns\n */\nfunction EditFieldIcon(props) {\n    const { title, hidden, onClick } = props;\n    if (hidden) {\n        return null;\n    }\n    return (\n        <div\n            className=\"show-on-hover edit-glyph\"\n            onClick={onClick}\n            title={title}\n        >\n            <FaEdit />\n        </div>\n    );\n}\n\n/**\n * Adds an \"edit\" icon which shows up when hovering on the wrapped widget.\n * Clicking the \"edit\" icon opens a dialog that allows one to edit the value.\n * `onChange` is called if \"save\" is pressed in the edit dialog.\n *\n * @export\n * @param {{children, title, value, onChange: function, editable: boolean}} props\n * @returns\n */\nexport function EditableField(props) {\n    const { children, title, value, onChange, editable = true } = props;\n    const [dialogShow, setDialogShow] = React.useState(false);\n    return (\n        <div className=\"show-on-hover-wrapper\">\n            {children}\n            <EditFieldIcon\n                title={title}\n                hidden={!editable}\n                onClick={() => setDialogShow(true)}\n            />\n            <EditFieldDialog\n                title={title}\n                value={value}\n                onChange={onChange}\n                show={dialogShow}\n                onHide={() => setDialogShow(false)}\n            />\n        </div>\n    );\n}\nEditFieldDialog.propTypes = {\n    title: PropTypes.node,\n    value: PropTypes.any.isRequired,\n    onChange: PropTypes.func,\n    editable: PropTypes.bool\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { instructorsSelector, upsertInstructor } from \"../../api/actions\";\nimport { InstructorsList } from \"../../components/instructors\";\nimport { EditableField } from \"../../components/edit-field-widgets\";\n\n/**\n * A cell that renders editable applicant information\n *\n * @param {*} props\n * @returns\n */\nfunction EditableCell(props) {\n    const title = `Edit ${props.column.Header}`;\n    const { upsertInstructor, field } = props;\n    function onChange(newVal) {\n        const applicantId = props.original.id;\n        upsertInstructor({ id: applicantId, [field]: newVal });\n    }\n    return (\n        <EditableField\n            title={title}\n            value={props.value || \"\"}\n            onChange={onChange}\n        >\n            {props.value}\n        </EditableField>\n    );\n}\n\nfunction EditableInstructorsList(props) {\n    const { upsertInstructor, ...rest } = props;\n\n    // Bind an `ApplicantCell` to a particular field\n    function generateCell(field) {\n        return props => (\n            <EditableCell\n                field={field}\n                upsertInstructor={upsertInstructor}\n                {...props}\n            />\n        );\n    }\n\n    const columns = [\n        {\n            Header: \"Last Name\",\n            accessor: \"last_name\",\n            Cell: generateCell(\"last_name\")\n        },\n        {\n            Header: \"First Name\",\n            accessor: \"first_name\",\n            Cell: generateCell(\"first_name\")\n        },\n        {\n            Header: \"Email\",\n            accessor: \"email\",\n            Cell: generateCell(\"email\")\n        },\n        {\n            Header: \"UTORid\",\n            accessor: \"utorid\",\n            Cell: generateCell(\"utorid\")\n        }\n    ];\n\n    return <InstructorsList columns={columns} {...rest} />;\n}\n\n/**\n * EditableInstructorsList that has been connected to the redux store\n * for live updates and editability.\n */\nexport const ConnectedInstructorsList = connect(\n    state => ({\n        instructors: instructorsSelector(state)\n    }),\n    { upsertInstructor }\n)(EditableInstructorsList);\n","/**\n * Trims the input string. If the `x` is not a string, it is\n * coerced\n *\n * @param {string} x\n * @returns\n */\nexport function strip(x) {\n    if (x == null) {\n        return \"\";\n    }\n    return (\"\" + x).trim();\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { InstructorEditor } from \"../../components/instructors\";\nimport { Modal, Button, Alert } from \"react-bootstrap\";\nimport { upsertInstructor, instructorsSelector } from \"../../api/actions\";\nimport { strip } from \"../../libs/utils\";\n\nconst BLANK_INSTRUCTOR = {\n    first_name: \"\",\n    last_name: \"\",\n    utorid: \"\"\n};\n\n/**\n * Find if there is a conflicting instructor in the passed in list\n * of instructors, or if any required fields are incorrect.\n *\n * @param {object} instructor\n * @param {object[]} instructors\n */\nfunction getConficts(instructor, instructors) {\n    const ret = { delayShow: \"\", immediateShow: \"\" };\n    if (\n        !strip(instructor.utorid) ||\n        !strip(instructor.first_name) ||\n        !strip(instructor.last_name)\n    ) {\n        ret.delayShow = \"A first name, last name, and utorid is required\";\n    }\n    const matchingInstructor = instructors.find(\n        x => strip(x.utorid) === strip(instructor.utorid)\n    );\n    if (matchingInstructor) {\n        ret.immediateShow = (\n            <p>\n                Another instructor exists with utorid={instructor.utorid}:{\" \"}\n                <b>\n                    {matchingInstructor.first_name}{\" \"}\n                    {matchingInstructor.last_name}\n                </b>\n            </p>\n        );\n    }\n    return ret;\n}\n\nfunction AddInstructorDialog(props) {\n    const { show, onHide = () => {}, instructors, upsertInstructor } = props;\n    const [newInstructor, setNewInstructor] = React.useState(BLANK_INSTRUCTOR);\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewInstructor(BLANK_INSTRUCTOR);\n        }\n    }, [show]);\n\n    function createInstructor() {\n        upsertInstructor(newInstructor);\n        onHide();\n    }\n\n    const conflicts = getConficts(newInstructor, instructors);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Instructor</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <InstructorEditor\n                    instructor={newInstructor}\n                    setInstructor={setNewInstructor}\n                />\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createInstructor}\n                    title={conflicts.delayShow || \"Create Instructor\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    Create Instructor\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n/**\n * AddInstructorDialog that has been connected to the redux store\n */\nexport const ConnectedAddInstructorDialog = connect(\n    state => ({ instructors: instructorsSelector(state) }),\n    { upsertInstructor }\n)(AddInstructorDialog);\n","import React from \"react\";\nimport { ConnectedInstructorsList } from \"./editable-instructors-list\";\nimport { ConnectedAddInstructorDialog } from \"./add-instructor-dialog\";\nimport { Button } from \"react-bootstrap\";\n\nexport function AdminIstructorsView() {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    return (\n        <div>\n            <Button\n                onClick={() => {\n                    setAddDialogVisible(true);\n                }}\n            >\n                Add Instructor\n            </Button>\n            <ConnectedAddInstructorDialog\n                show={addDialogVisible}\n                onHide={() => {\n                    setAddDialogVisible(false);\n                }}\n            />\n            <ConnectedInstructorsList />\n        </div>\n    );\n}\n\nexport { ConnectedInstructorsList, ConnectedAddInstructorDialog };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactTable from \"react-table\";\nimport { docApiPropTypes } from \"../api/defs/doc-generation\";\nimport { Badge } from \"react-bootstrap\";\n\nconst DEFAULT_COLUMNS = [\n    { Header: \"Position Code\", accessor: \"position_code\" },\n    { Header: \"Position Title\", accessor: \"position_title\" },\n    { Header: \"Hours\", accessor: \"hours_per_assignment\" },\n    { Header: \"Start\", accessor: \"start_date\" },\n    { Header: \"End\", accessor: \"end_date\" },\n    {\n        Header: \"Instructors\",\n        accessor: \"instructors\",\n        Cell: props => (\n            <React.Fragment>\n                {props.value.map((instructor = {}) => {\n                    const name = `${instructor.first_name} ${instructor.last_name}`;\n                    return (\n                        <Badge variant=\"secondary\" className=\"mr-1\" key={name}>\n                            {name}\n                        </Badge>\n                    );\n                })}\n            </React.Fragment>\n        )\n    },\n    { Header: \"Contract Template\", accessor: \"contract_template.template_name\" }\n];\n\n/**\n * List the instructors using a ReactTable. `columns` can be passed\n * in to customize columns/cell renderers.\n *\n * @export\n * @param {{instructors: object[], columns: object[]}} props\n * @returns\n */\nexport function PositionsList(props) {\n    const { positions, columns = DEFAULT_COLUMNS } = props;\n    return (\n        <React.Fragment>\n            <h3>Positions</h3>\n            <ReactTable\n                data={positions}\n                columns={columns}\n                showPagination={false}\n                minRows={1}\n            />\n        </React.Fragment>\n    );\n}\nPositionsList.propTypes = {\n    positions: PropTypes.arrayOf(docApiPropTypes.position).isRequired,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({ Header: PropTypes.any.isRequired })\n    )\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./components.css\";\n\nexport class SearchBox extends React.Component {\n    static propTypes = {\n        data: PropTypes.arrayOf(\n            PropTypes.shape({\n                first_name: PropTypes.string,\n                last_name: PropTypes.string\n            })\n        ).isRequired\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            filters: \"\",\n            data: this.props.data\n        };\n    }\n\n    filter(event) {\n        let input = event.target.value;\n        let newData = this.props.data.filter(x => {\n            for (let key in x) {\n                let v = x[key] && x[key].toString().toLowerCase();\n                if (v && v.indexOf(input.toLowerCase()) !== -1) {\n                    return true;\n                }\n            }\n            return false;\n        });\n        this.setState({\n            filters: input,\n            data: newData\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        //constructor is only invoked when the component is first created. if data change, need to update on componentWillReceiveProps\n        if (nextProps.data !== this.props.data) {\n            this.setState({ data: nextProps.data });\n        }\n    }\n\n    render() {\n        let applicants = this.state.data;\n        let applicantsList = <div>No Applicants...</div>;\n        if (applicants.length > 0) {\n            applicantsList = (\n                <ul>\n                    {applicants.map(applicant => (\n                        <li key={applicant.id}>\n                            {applicant.first_name} {applicant.last_name}\n                        </li>\n                    ))}\n                </ul>\n            );\n        }\n\n        return (\n            <div className=\"search-box\">\n                <input\n                    className=\"search\"\n                    type=\"text\"\n                    name=\"\"\n                    value={this.state.filters}\n                    placeholder=\"Search here\"\n                    onChange={this.filter.bind(this)}\n                />\n                {applicantsList}\n            </div>\n        );\n    }\n}\n","export const readFile = (component, loadDataFunc) => {\n    let files = component.files;\n    if (files.length > 0) {\n        const reader = new FileReader();\n        let importFunc = importChoices(files[0].name, loadDataFunc);\n        reader.readAsText(files[0]);\n        reader.onload = event => importFunc(event.target.result);\n    }\n    component.value = \"\";\n};\n\nexport const downloadFile = async (route, loadMessage) => {\n    try {\n        const res = await fetch(route);\n        if (res.status === 200) {\n            const blob = await res.blob();\n            let filename = getFilename(res);\n            if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n                window.navigator.msSaveOrOpenBlob(blob, filename); //special case for Edge & IE\n            } else {\n                let url = URL.createObjectURL(blob),\n                    a = document.createElement(\"a\");\n                a.href = url;\n                a.download = filename;\n                a.target = \"_self\"; //required in FF\n                a.style.display = \"none\";\n                document.body.appendChild(a); //required in FF\n                a.click();\n                URL.revokeObjectURL(url);\n                document.body.removeChild(a); //required in FF\n            }\n            loadMessage(optSuccess(true, null));\n        } else {\n            const err = await res.json();\n            loadMessage(optSuccess(false, err));\n        }\n    } catch (err) {\n        loadMessage(optSuccess(false, err));\n    }\n};\n\nconst optSuccess = (success, content) => {\n    return {\n        success: success,\n        content: content\n    };\n};\n\nconst getFilename = res => {\n    try {\n        return res.headers\n            .get(\"Content-Disposition\")\n            .match(/filename=\"(.*)\"/)[1];\n    } catch (err) {\n        return \"Untitled\";\n    }\n};\n\nconst importChoices = (file, loadDataFunc) => {\n    switch (getExtension(file)) {\n        case \".json\":\n            return data => {\n                try {\n                    loadDataFunc(optSuccess(true, JSON.parse(data)));\n                } catch (err) {\n                    loadDataFunc(optSuccess(false, err));\n                }\n            };\n        default:\n            return data => {\n                loadDataFunc(optSuccess(true, data));\n            };\n    }\n};\n\nconst getExtension = file => {\n    let extension = file.match(/\\.\\w+$/g);\n    if (extension.length > 0) return extension[0];\n    else return null;\n};\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Dropdown, DropdownButton, Modal } from \"react-bootstrap\";\nimport { readFile } from \"../libs/fileManager\";\n\n/**\n * Renders an dropdown import button component that imports data from file.\n *\n * The data should be in json format.\n *\n * @export\n * @param {function(list[object])} props.uploadFunc\n */\nexport function ImportButton(props) {\n    let { uploadFunc } = props;\n    const [data, setData] = useState(null); // eslint-disable-line\n    const [dialogContents, setDialogContents] = useState(\"\"); // eslint-disable-line\n    const [dialogOpen, setDialogOpen] = useState(false);\n\n    /**\n     * closes the dialog by setting dialogOpen to false\n     */\n    function handleClose() {\n        setDialogOpen(false);\n    }\n\n    /**\n     * Read the json file content and import the data in it to the backend.\n     *\n     * Implementation details discussed in TAPP meeting on Aug 29:\n     *   - assume frontend data is up to date\n     *   - upload the assignment object\n     *   - if there's an part of inconsistency between the imported data and frontend data\n     *   then apiGET that part of data and re-verify it\n     *\n     * @param {event} e\n     */\n    function importFile(e) {\n        let importClicked = data => {\n            // passed in data is of json format\n            console.log(data);\n            throw new Error(\"Not implemented!\");\n\n            /* TODO: \n            * const diffs = getDiffs(data, ...dataFromBackend);\n            * if (diffs) {\n            *     setData(data)\n            *     setDialogContents(diffs);\n            *     setDialogOpen(true);\n            * } else {\n            *     uploadFunc(data)\n            } */\n        };\n\n        readFile(e.target, importClicked);\n    }\n\n    return (\n        <div>\n            <DropdownButton id=\"dropdown-basic-button\" title=\"Import\">\n                <input\n                    id=\"raised-button-file\"\n                    type=\"file\"\n                    accept=\"application/json\"\n                    style={{ display: \"none\" }}\n                    onChange={importFile}\n                />\n                <label htmlFor=\"raised-button-file\">\n                    <Dropdown.Item>Import From File</Dropdown.Item>\n                </label>\n            </DropdownButton>\n\n            <Modal show={dialogOpen} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>The following will be overwritten</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <p>{dialogContents}</p>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Cancel\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => uploadFunc(data)}>\n                        Proceed\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    );\n}\n\nImportButton.propTypes = {\n    uploadFunc: PropTypes.func\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactTable from \"react-table\";\nimport selectTableHOC from \"react-table/lib/hoc/selectTable\";\n\nimport \"react-table/react-table.css\";\n// This HOC adds a checkbox to every row of a ReactTable\nconst SelectTable = selectTableHOC(ReactTable);\n\nconst COLUMNS = [\n    { Header: \"Last Name\", accessor: \"applicant.last_name\" },\n    { Header: \"First Name\", accessor: \"applicant.first_name\" },\n    { Header: \"Email\", accessor: \"applicant.email\", width: 250 },\n    {\n        Header: \"Student Number\",\n        accessor: \"applicant.student_number\",\n        width: 100\n    },\n    {\n        Header: \"Position\",\n        accessor: \"position.position_code\",\n        width: 130\n    },\n    {\n        Header: \"Hours\",\n        accessor: \"hours\",\n        width: 100\n    },\n    {\n        Header: \"Contract\",\n        accessor: \"position.contract_template.template_name\",\n        width: 100\n    },\n    {\n        Header: \"First Time?\",\n        accessor: \"applicant.first_time_ta\",\n        Cell: props => (\n            <div style={{ backgroundColor: \"red\" }}>\n                {(\"\" + props.value).toUpperCase()}\n            </div>\n        ),\n        width: 100\n    }, // boolean\n    { Header: \"Status\", accessor: \"status\", width: 100 },\n    { Header: \"Nag Count\", accessor: \"nag_count\", width: 100 }\n];\n\n/**\n * Converts a row of the offer table into a string for omni-searching\n *\n * @param {*} row\n * @returns {string}\n */\nfunction rowToStr(row) {\n    // flatten to a string two levels deep\n    return Object.values(row)\n        .map(x => (typeof x === \"string\" ? x : Object.values(x).join(\" \")))\n        .join(\" \")\n        .toLowerCase();\n}\n\n/**\n * A filterable offer table. If `selected` and `setSelected` props are provided,\n * rows of this table can be selected.\n *\n * @param {*} props\n * @param {list} props.data - a list of assignments\n * @param {list} props.selected - a list of assignment `id`s that are selected\n * @param {func} props.setSelected - function that is called to set the selected ids\n * @returns\n */\nfunction OfferTable(props) {\n    const { data, selected, setSelected, columns = COLUMNS } = props;\n    // internally we use a more efficient datastructure than a list to keep track of `selected` things.\n    const _selected = new Set(selected);\n    const _setSelected = _selected => {\n        // convert `_selected` back to a list before setting it.\n        setSelected([..._selected]);\n    };\n\n    const [filterString, setFilterString] = React.useState(\"\");\n    const [lastSelected, setLastSelected] = React.useState(null);\n    const [allSelected, setAllSelected] = React.useState(false);\n    function isSelected(id) {\n        return _selected.has(id);\n    }\n\n    const filteredData = filterString\n        ? data.filter(row => rowToStr(row).includes(filterString.toLowerCase()))\n        : data;\n\n    // we need a reference to the internal table so that we can get the \"visible data\"\n    // if it happens to be filtered or sorted\n    let reactTableRef = React.useRef(null);\n    /**\n     * Gets the data that is actually displayed in the ReactTable. This is useful\n     * for range selecting (shift-cliking should select in the range that is displayed)\n     *\n     * @returns {[object]}\n     */\n    function getDisplayedData() {\n        if (!reactTableRef) {\n            // eslint-disable-next-line\n            console.warn(\n                \"Trying to get data displayed in a ReactTable, but no ref has been created\"\n            );\n            return [];\n        }\n        try {\n            return reactTableRef\n                .getWrappedInstance()\n                .getResolvedState()\n                .sortedData.map(x => x._original);\n        } catch (e) {\n            return [];\n        }\n    }\n\n    // Every time `selection` changes, compute whether everything visible\n    // is selected\n    React.useEffect(() => {\n        let allSelected = false;\n        const displayedData = getDisplayedData();\n        if (\n            displayedData.length > 0 &&\n            displayedData.every(row => _selected.has(row.id))\n        ) {\n            allSelected = true;\n        }\n        setAllSelected(allSelected);\n    }, [_selected, filterString]);\n\n    function onToggleRow(ref, shiftOn, row) {\n        // The shift key isn't held. Only select a single item\n        if (!shiftOn) {\n            const newSelectedState = !_selected.has(row.id);\n            const newSelected = new Set(_selected);\n            if (newSelectedState === true) {\n                newSelected.add(row.id);\n                _setSelected(newSelected);\n                setLastSelected(row.id);\n            } else {\n                newSelected.delete(row.id);\n                _setSelected(newSelected);\n                setLastSelected(null);\n            }\n            return;\n        }\n        // The shift key was held, but nothing was \"last clicked\", so we should treat it\n        // as if the shift weren't held\n        if (shiftOn && lastSelected == null) {\n            return onToggleRow(ref, false, row);\n        }\n        // The shift key was held and there was a last selected, so select everything\n        // in the range between the newly clicked row and the last clicked row\n\n        // Get the displayed row data so we don't misselect things.\n        const rowIds = getDisplayedData().map(row => row.id);\n        const lastSelectedIndex = rowIds.indexOf(lastSelected);\n        if (lastSelectedIndex === -1) {\n            // If the \"last selected\" thing is hidden, we should behave like the no-shift case\n            return onToggleRow(ref, false, row);\n        }\n        const selectedIndex = rowIds.indexOf(row.id);\n        const [start, end] = [\n            Math.min(lastSelectedIndex, selectedIndex),\n            Math.max(lastSelectedIndex, selectedIndex)\n        ];\n\n        _setSelected(\n            new Set([\n                ..._selected,\n                ...rowIds.filter((v, i) => i <= end && i >= start)\n            ])\n        );\n    }\n\n    function onToggleAll() {\n        // If everything is selected, set the selected status to `false`\n        // otherwise, set it to true.\n        const rowIds = getDisplayedData().map(row => row.id);\n        if (allSelected) {\n            const newSelected = new Set(_selected);\n            for (const id of rowIds) {\n                newSelected.delete(id);\n            }\n            _setSelected(newSelected);\n        } else {\n            _setSelected(new Set([..._selected, ...rowIds]));\n        }\n    }\n\n    let tableComponent = (\n        <SelectTable\n            ref={r => (reactTableRef = r)}\n            data={filteredData}\n            columns={columns}\n            toggleSelection={onToggleRow}\n            selectAll={allSelected}\n            toggleAll={onToggleAll}\n            isSelected={isSelected}\n            selectType=\"checkbox\"\n            keyField=\"id\"\n            minRows={1}\n            showPagination={false}\n        />\n    );\n    // if `selected` was not passed in, the table rows should not be selectable\n    if (selected == null) {\n        tableComponent = <ReactTable columns={columns} data={filteredData} />;\n    }\n    return (\n        <div>\n            Filter:{\" \"}\n            <input\n                type=\"text\"\n                onChange={e => setFilterString(e.target.value)}\n            />\n            {tableComponent}\n        </div>\n    );\n}\nOfferTable.propTypes = {\n    selected: PropTypes.array,\n    setSelected: PropTypes.func,\n    data: PropTypes.array.isRequired,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({\n            Header: PropTypes.string,\n            accessor: PropTypes.oneOfType([PropTypes.string, PropTypes.func])\n        })\n    )\n};\n\nexport { OfferTable };\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n    assignmentsSelector,\n    upsertApplicant,\n    upsertAssignment\n} from \"../../api/actions\";\nimport { OfferTable } from \"../../components/offer-table\";\nimport { EditableField } from \"../../components/edit-field-widgets\";\nimport { offerTableSelector, setSelectedRows } from \"./actions\";\n\nfunction capitalize(word = \"\") {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n}\n\n/**\n * A cell that renders editable applicant information\n *\n * @param {*} props\n * @returns\n */\nfunction ApplicantCell(props) {\n    const title = `Edit ${props.column.Header}`;\n    const { upsertApplicant, field } = props;\n    function onChange(newVal) {\n        const applicantId = props.original.applicant.id;\n        upsertApplicant({ id: applicantId, [field]: newVal });\n    }\n    return (\n        <EditableField\n            title={title}\n            value={props.value || \"\"}\n            onChange={onChange}\n        >\n            {props.value}\n        </EditableField>\n    );\n}\n\n/**\n * A cell that renders editable assignment information\n *\n * @param {*} props\n * @returns\n */\nfunction AssignmentCell(props) {\n    const title = `Edit ${props.column.Header}`;\n    const { upsertAssignment, field } = props;\n    const active_offer_status = props.original.active_offer_status;\n    function onChange(newVal) {\n        const applicationId = props.original.id;\n        upsertAssignment({ id: applicationId, [field]: newVal });\n    }\n    return (\n        <EditableField\n            title={title}\n            value={props.value || \"\"}\n            onChange={onChange}\n            editable={!active_offer_status}\n        >\n            {props.value}\n        </EditableField>\n    );\n}\n\nfunction EditableOfferTable(props) {\n    const { upsertApplicant, upsertAssignment, ...rest } = props;\n\n    // Bind an `ApplicantCell` to a particular field\n    function generateApplicantCell(field) {\n        return props => (\n            <ApplicantCell\n                field={field}\n                upsertApplicant={upsertApplicant}\n                {...props}\n            />\n        );\n    }\n\n    // Bind an `AssignmentCell` to a particular field\n    function generateAssignmentCell(field) {\n        return props => (\n            <AssignmentCell\n                field={field}\n                upsertAssignment={upsertAssignment}\n                {...props}\n            />\n        );\n    }\n\n    const columns = [\n        {\n            Header: \"Last Name\",\n            accessor: \"applicant.last_name\",\n            Cell: generateApplicantCell(\"last_name\")\n        },\n        {\n            Header: \"First Name\",\n            accessor: \"applicant.first_name\",\n            Cell: generateApplicantCell(\"first_name\")\n        },\n        {\n            Header: \"Email\",\n            accessor: \"applicant.email\",\n            Cell: generateApplicantCell(\"email\")\n        },\n        {\n            Header: \"Position\",\n            accessor: \"position.position_code\"\n        },\n        {\n            Header: \"Hours\",\n            accessor: \"hours\",\n            Cell: generateAssignmentCell(\"hours\")\n        },\n        {\n            Header: \"Status\",\n            id: \"status\",\n            accessor: data => capitalize(data.active_offer_status || \"\")\n        }\n    ];\n\n    return <OfferTable columns={columns} {...rest} />;\n}\n\n/**\n * OfferTable that has been connected to the redux store\n * for live updates and editability.\n */\nexport const ConnectedOfferTable = connect(\n    state => ({\n        data: assignmentsSelector(state),\n        selected: offerTableSelector(state).selectedAssignmentIds\n    }),\n    { upsertApplicant, upsertAssignment, setSelected: setSelectedRows }\n)(EditableOfferTable);\n","export const SET_SELECTED_ROWS = \"SET_SELECTED_ROWS\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"react-bootstrap\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead-bs4.css\";\nimport { docApiPropTypes } from \"../../api/defs/doc-generation\";\nimport { fieldEditorFactory, DialogRow } from \"./common-controls\";\n\nconst DEFAULT_POSITION = {\n    position_code: \"\",\n    position_title: \"\",\n    hours_per_assignment: 0,\n    contract_template: {},\n    duties:\n        \"Some combination of marking, invigilating, tutorials, office hours, and the help centre.\",\n    instructors: []\n};\n\n/**\n * Edit information about a position\n *\n * @export\n * @param {{position: object, instructors: object[]}} props\n * @returns\n */\nexport function PositionEditor(props) {\n    const {\n        position: positionProp,\n        setPosition,\n        instructors = [],\n        contractTemplates = [],\n        defaultContractTemplate = {}\n    } = props;\n    const position = { ...DEFAULT_POSITION, ...positionProp };\n\n    /**\n     * Set `position.instructors` to the specified list.\n     *\n     * @param {*} instructors\n     */\n    function setInstructors(instructors) {\n        setPosition({ ...position, instructors });\n    }\n\n    /**\n     * Set `position.contract_template` to the most recently selected item\n     *\n     * @param {*} selectedContractTypes\n     */\n    function setContractType(selectedContractTypes) {\n        const contract_template =\n            selectedContractTypes[selectedContractTypes.length - 1] ||\n            defaultContractTemplate;\n        setPosition({ ...position, contract_template });\n    }\n\n    const createFieldEditor = fieldEditorFactory(position, setPosition);\n\n    return (\n        <Form>\n            <DialogRow>\n                {createFieldEditor(\n                    \"Course Code (e.g. MAT135H1F)\",\n                    \"position_code\"\n                )}\n                {createFieldEditor(\"Course Title\", \"position_title\")}\n            </DialogRow>\n            <DialogRow>\n                {createFieldEditor(\"Start Date\", \"start_date\", \"date\")}\n                {createFieldEditor(\"End Date\", \"end_date\", \"date\")}\n                {createFieldEditor(\n                    \"Hours per Assignment\",\n                    \"hours_per_assignment\",\n                    \"number\"\n                )}\n            </DialogRow>\n            <Form.Group>\n                <Form.Label>Instructors</Form.Label>\n                <Typeahead\n                    id=\"instructors-input\"\n                    ignoreDiacritics={true}\n                    multiple\n                    placeholder=\"Instructors...\"\n                    labelKey={option =>\n                        `${option.first_name} ${option.last_name}`\n                    }\n                    selected={position.instructors}\n                    options={instructors}\n                    onChange={setInstructors}\n                />\n            </Form.Group>\n            <Form.Group>\n                <Form.Label>\n                    Contract Template (which offer template will be used)\n                </Form.Label>\n                <Typeahead\n                    id=\"instructors-input\"\n                    ignoreDiacritics={true}\n                    multiple\n                    placeholder=\"Contract template...\"\n                    labelKey={option => `${option.template_name}`}\n                    selected={[position.contract_template]}\n                    options={contractTemplates}\n                    onChange={setContractType}\n                />\n            </Form.Group>\n            <h3>Ad-related Info</h3>\n            <DialogRow>{createFieldEditor(\"Duties\", \"duties\")}</DialogRow>\n            <DialogRow>\n                {createFieldEditor(\"Qualifications\", \"qualifications\")}\n            </DialogRow>\n            <h3>Admin Info</h3>\n            <DialogRow>\n                {createFieldEditor(\n                    \"Current Enrollment\",\n                    \"current_enrollment\",\n                    \"number\"\n                )}\n                {createFieldEditor(\n                    \"Waitlisted\",\n                    \"current_waitlisted\",\n                    \"number\"\n                )}\n                {createFieldEditor(\n                    \"Desired Number of Assignments\",\n                    \"desired_num_assignments\",\n                    \"number\"\n                )}\n            </DialogRow>\n        </Form>\n    );\n}\nPositionEditor.propTypes = {\n    position: docApiPropTypes.position.isRequired,\n    setPosition: PropTypes.func.isRequired,\n    instructors: PropTypes.arrayOf(docApiPropTypes.instructor),\n    defaultContractTemplate: docApiPropTypes.contractTemplate,\n    contractTemplates: PropTypes.arrayOf(docApiPropTypes.contractTemplate)\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"react-bootstrap\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead-bs4.css\";\nimport { docApiPropTypes } from \"../../api/defs/doc-generation\";\nimport { fieldEditorFactory, DialogRow } from \"./common-controls\";\n\nconst DEFAULT_ASSIGNMENT = {\n    note: \"\",\n    position: { id: null },\n    position_id: null,\n    applicant: { id: null },\n    applicant_id: null\n};\n\n/**\n * Edit information about a position\n *\n * @export\n * @param {{position: object, instructors: object[]}} props\n * @returns\n */\nexport function AssignmentEditor(props) {\n    const {\n        assignment: assignmentProp,\n        setAssignment,\n        applicants,\n        positions\n    } = props;\n    const assignment = { ...DEFAULT_ASSIGNMENT, ...assignmentProp };\n\n    // update the selected position; this comes with side effects\n    function setPosition(positions) {\n        const position = positions[positions.length - 1] || { id: null };\n        setAssignment({\n            ...assignment,\n            position,\n            position_id: position.id,\n            hours: position.hours_per_assignment,\n            start_date: position.start_date,\n            end_date: position.end_date\n        });\n    }\n\n    // update the selected applicant\n    function setApplicant(applicants) {\n        const applicant = applicants[applicants.length - 1] || { id: null };\n        setAssignment({\n            ...assignment,\n            applicant,\n            applicant_id: applicant.id\n        });\n    }\n\n    const createFieldEditor = fieldEditorFactory(assignment, setAssignment);\n\n    return (\n        <Form>\n            <DialogRow>\n                <React.Fragment>\n                    <Form.Label>Position</Form.Label>\n                    <Typeahead\n                        id=\"position-input\"\n                        ignoreDiacritics={true}\n                        placeholder=\"Position...\"\n                        multiple\n                        labelKey={option =>\n                            `${option.position_code} (${option.position_title})`\n                        }\n                        selected={\n                            assignment.position.id == null\n                                ? []\n                                : [assignment.position]\n                        }\n                        options={positions}\n                        onChange={setPosition}\n                    />\n                </React.Fragment>\n                <React.Fragment>\n                    <Form.Label>Applicant</Form.Label>\n                    <Typeahead\n                        id=\"applicant-input\"\n                        ignoreDiacritics={true}\n                        placeholder=\"Applicant...\"\n                        multiple\n                        labelKey={option =>\n                            `${option.first_name} ${option.last_name}`\n                        }\n                        selected={\n                            assignment.applicant.id == null\n                                ? []\n                                : [assignment.applicant]\n                        }\n                        options={applicants}\n                        onChange={setApplicant}\n                    />\n                </React.Fragment>\n            </DialogRow>\n            <DialogRow>\n                {createFieldEditor(\"Hours\", \"hours\", \"number\")}\n            </DialogRow>\n\n            <h4>Optional Settings</h4>\n            <DialogRow>\n                {createFieldEditor(\"Start Date\", \"start_date\", \"date\")}\n                {createFieldEditor(\"End Date\", \"end_date\", \"date\")}\n            </DialogRow>\n        </Form>\n    );\n}\nAssignmentEditor.propTypes = {\n    assignment: docApiPropTypes.assignment.isRequired,\n    setAssignment: PropTypes.func.isRequired,\n    positions: PropTypes.arrayOf(docApiPropTypes.position),\n    applicants: PropTypes.arrayOf(docApiPropTypes.applicant)\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"react-bootstrap\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead-bs4.css\";\nimport { docApiPropTypes } from \"../../api/defs/doc-generation\";\nimport { fieldEditorFactory, DialogRow } from \"./common-controls\";\n\nconst DEFAULT_CONTRACT_TEMPLATE = {\n    template_name: \"\",\n    template_file: \"\"\n};\n\n/**\n * Edit information about a contract_template\n *\n * @export\n * @param {{contractTemplate: object, availableTemplates: object[], setContractTemplate: function}} props\n * @returns\n */\nexport function ContractTemplateEditor(props) {\n    const {\n        contractTemplate: contractTemplateProp,\n        setContractTemplate,\n        availableTemplates = []\n    } = props;\n    const contractTemplate = {\n        ...DEFAULT_CONTRACT_TEMPLATE,\n        ...contractTemplateProp\n    };\n\n    // update the selected template_file; this comes with side effects\n    function setTemplateFile(templates) {\n        const templateFile = templates[templates.length - 1] || \"\";\n        setContractTemplate({\n            ...contractTemplate,\n            template_file: templateFile\n        });\n    }\n\n    const createFieldEditor = fieldEditorFactory(\n        contractTemplate,\n        setContractTemplate\n    );\n\n    return (\n        <Form>\n            <DialogRow>\n                {createFieldEditor(\n                    'Template Name (e.g. \"OTO\" \"Invigilate\")',\n                    \"template_name\"\n                )}\n            </DialogRow>\n            <DialogRow>\n                <React.Fragment>\n                    <Form.Label title=\"This file is stored on the server; you can edit it there.\">\n                        Template File\n                    </Form.Label>\n                    <Typeahead\n                        id=\"file-name-input\"\n                        ignoreDiacritics={true}\n                        placeholder=\"File name...\"\n                        multiple\n                        labelKey={option => `${option}`}\n                        selected={\n                            !contractTemplate.template_file\n                                ? []\n                                : [contractTemplate.template_file]\n                        }\n                        options={availableTemplates.map(x => x.template_file)}\n                        onChange={setTemplateFile}\n                    />\n                </React.Fragment>\n            </DialogRow>\n        </Form>\n    );\n}\nContractTemplateEditor.propTypes = {\n    contractTemplate: docApiPropTypes.contractTemplate.isRequired,\n    setContractTemplate: PropTypes.func.isRequired,\n    availableTemplates: PropTypes.arrayOf(\n        docApiPropTypes.contractTemplateMinimal\n    )\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n    contractTemplatesSelector,\n    instructorsSelector,\n    positionsSelector,\n    assignmentsSelector,\n    applicantsSelector\n} from \"../../api/actions\";\nimport { offerTableSelector } from \"../offertable/actions\";\nimport { SessionEditor } from \"../../components/forms/session-editor\";\nimport { ApplicantsList } from \"../../components/applicants-list\";\nimport { ContractTemplatesList } from \"../../components/contract-templates-list\";\nimport { ConnectedInstructorsList } from \"../instructors\";\nimport { PositionsList } from \"../../components/positions-list\";\nimport { AssignmentsList } from \"../../components/assignments-list\";\nimport { SearchBox } from \"../../components/search-box\";\nimport { EmailButton } from \"../../components/email-button\";\nimport { ImportButton } from \"../../components/import-button\";\nimport { EditableField } from \"../../components/edit-field-widgets\";\nimport { ConnectedOfferTable } from \"../offertable\";\nimport { PositionEditor } from \"../../components/forms/position-editor\";\nimport { InstructorEditor } from \"../../components/instructors\";\nimport { AssignmentEditor } from \"../../components/forms/assignment-editor\";\nimport { ContractTemplateEditor } from \"../../components/forms/contract-template-editor\";\n\nconst ConnectedApplicantList = connect(state => ({\n    applicants: applicantsSelector(state)\n}))(ApplicantsList);\n\nconst ConnectedContractTemplatesList = connect(state => ({\n    contractTemplates: contractTemplatesSelector(state)\n}))(ContractTemplatesList);\n\nconst ConnectedPositionsList = connect(state => ({\n    positions: positionsSelector(state)\n}))(PositionsList);\n\nconst ConnectedAssignmentsList = connect(state => ({\n    assignments: assignmentsSelector(state)\n}))(AssignmentsList);\n\nconst ConnectedSearchBox = connect(state => ({\n    data: applicantsSelector(state)\n}))(SearchBox);\n\nconst ConnectedEmailButton = connect(state => ({\n    data: offerTableSelector(state).selectedAssignmentIds\n}))(EmailButton);\n\nconst ConnectedPositionEditor = connect(state => ({\n    instructors: instructorsSelector(state)\n}))(PositionEditor);\n\nconst ConnectedAssignmentEditor = connect(state => ({\n    positions: positionsSelector(state),\n    applicants: applicantsSelector(state)\n}))(AssignmentEditor);\n\n/**\n * Encapsulate a react component in a frame.\n *\n * @param {object} props\n * @param {string} props.title The name of the component encapsulated\n */\nfunction DashboardWidget(props) {\n    const { children, title } = props;\n    return (\n        <div style={{ margin: 5 }}>\n            <h5>\n                The{\" \"}\n                <span style={{ color: \"green\", fontFamily: \"mono\" }}>\n                    {title}\n                </span>{\" \"}\n                Component\n            </h5>\n            <div style={{ border: \"1px solid black\", padding: 5 }}>\n                {children}\n            </div>\n        </div>\n    );\n}\n\n/**\n * A dashboard containing a sample of all the widgets connected\n * appropriately to the redux store.\n *\n */\nfunction Dashboard() {\n    const [assignment, setAssignment] = React.useState({\n        position_id: 0,\n        applicant_id: 0\n    });\n    const [position, setPosition] = React.useState({ position_code: \"\" });\n    const [instructor, setInstructor] = React.useState({\n        last_name: \"Baggins\",\n        first_name: \"Bilbo\",\n        utorid: \"bilbob\"\n    });\n    const [session, setSession] = React.useState({ name: \"\" });\n    const [contractTemplate, setContractTemplate] = React.useState({});\n    return (\n        <div>\n            <DashboardWidget title=\"ContractTemplateEditor\">\n                <ContractTemplateEditor\n                    contractTemplate={contractTemplate}\n                    setContractTemplate={setContractTemplate}\n                    availableTemplates={[\n                        { template_file: \"/math/OTO.html\" },\n                        { template_file: \"/cs/invigilate.html\" }\n                    ]}\n                />\n            </DashboardWidget>\n            <DashboardWidget title=\"AssignmentEditor\">\n                <ConnectedAssignmentEditor\n                    assignment={assignment}\n                    setAssignment={setAssignment}\n                />\n            </DashboardWidget>\n            <DashboardWidget title=\"SessionEditor\">\n                <SessionEditor session={session} setSession={setSession} />\n            </DashboardWidget>\n            <DashboardWidget title=\"InstructorEditor\">\n                <InstructorEditor\n                    instructor={instructor}\n                    setInstructor={setInstructor}\n                />\n            </DashboardWidget>\n            <DashboardWidget title=\"PositionEditor\">\n                <ConnectedPositionEditor\n                    position={position}\n                    setPosition={setPosition}\n                />\n            </DashboardWidget>\n            <DashboardWidget title=\"EditableField\">\n                <EditableField\n                    title=\"Edit this super awesome content\"\n                    value={45}\n                    onChange={console.log}\n                >\n                    Edit me!\n                </EditableField>\n            </DashboardWidget>\n            <DashboardWidget title=\"ApplicantsList\">\n                <ConnectedApplicantList />\n            </DashboardWidget>\n            <DashboardWidget title=\"PostitionTemplatesList\">\n                <ConnectedContractTemplatesList />\n            </DashboardWidget>\n            <DashboardWidget title=\"InstuctorsList\">\n                <ConnectedInstructorsList />\n            </DashboardWidget>\n            <DashboardWidget title=\"PositionsList\">\n                <ConnectedPositionsList />\n            </DashboardWidget>\n            <DashboardWidget title=\"AssignmentsList\">\n                <ConnectedAssignmentsList />\n            </DashboardWidget>\n            <DashboardWidget title=\"SearchBox\">\n                <ConnectedSearchBox />\n            </DashboardWidget>\n            <DashboardWidget title=\"ImportButton\">\n                <ImportButton />\n            </DashboardWidget>\n            <DashboardWidget title=\"EmailButton\">\n                <ConnectedEmailButton />\n            </DashboardWidget>\n            <DashboardWidget title=\"OfferTable\">\n                <ConnectedOfferTable />\n            </DashboardWidget>\n        </div>\n    );\n}\n\nexport default Dashboard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction AssignmentsList(props) {\n    const { assignments } = props;\n    let assignmentsList = <div>No assignments...</div>;\n    if (assignments.length > 0) {\n        assignmentsList = (\n            <ul>\n                {assignments.map(assignment => (\n                    <li key={assignment.id}>\n                        {assignment.position.position_code} ({assignment.hours}{\" \"}\n                        hours): {assignment.applicant.first_name}{\" \"}\n                        {assignment.applicant.last_name}\n                    </li>\n                ))}\n            </ul>\n        );\n    }\n    return (\n        <div>\n            <h3>Available Assignments</h3>\n            {assignmentsList}\n        </div>\n    );\n}\nAssignmentsList.propTypes = {\n    assignments: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number,\n            position: PropTypes.object,\n            applicant: PropTypes.object\n        })\n    ).isRequired\n};\n\nexport { AssignmentsList };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\n\n/**\n * Renders an dropdown email button\n *\n * The data is a list of ids to be emailed by the backend.\n *\n * @export\n * @param {list[object]} props.data\n */\nexport function EmailButton(props) {\n    let { data } = props;\n\n    /**\n     * Email to the applicants (using ids) by invoking email service provided by the backend\n     */\n    function emailHandler() {\n        console.log(\"data read from redux: \" + data);\n        throw new Error(\"Email function not implemented!\");\n    }\n\n    /**\n     * Email contract to the applicants (using ids) by invoking email service provided by the backend\n     */\n    function emailContract() {\n        throw new Error(\"Email contract not implemented!\");\n    }\n\n    /**\n     * Nag offers to the applicants (using ids) by invoking email service provided by the backend\n     */\n    function nagOffers() {\n        throw new Error(\"Nag offer function not implemented!\");\n    }\n\n    return (\n        <DropdownButton id=\"dropdown-basic-button\" title=\"Email\">\n            <Dropdown.Item onClick={() => emailHandler()}>\n                Email Blank\n            </Dropdown.Item>\n            <Dropdown.Item onClick={() => emailContract()}>\n                Email Contract\n            </Dropdown.Item>\n            <Dropdown.Item onClick={() => nagOffers()}>\n                Nag Offers\n            </Dropdown.Item>\n        </DropdownButton>\n    );\n}\n\nEmailButton.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.any)\n};\n","import React from \"react\";\nimport { PositionsList } from \"../../components/positions-list\";\nimport { FilteredList } from \"../../components/filtered-list\";\nimport { connect } from \"react-redux\";\nimport { positionsSelector } from \"../../api/actions\";\n\nconst ConnectedFilteredList = connect((state, ownProps) => ({\n    positions: positionsSelector(state),\n    listRenderer: ownProps.listRenderer\n}))(FilteredList);\n\nfunction ControlPanel() {\n    // dummy filter function\n    const filter = (data, query) => {\n        if (!query) {\n            return data;\n        }\n        return data;\n    };\n\n    return (\n        <div>\n            <ConnectedFilteredList\n                listRenderer={PositionsList}\n                filterFunc={filter}\n            />\n        </div>\n    );\n}\n\nexport default ControlPanel;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Renders a component that filters and renders a list of objects.\n *\n * The data is filtered based on the filter prop function, which takes\n * as input the data and the query from the search box.\n *\n * The filtered data is rendered using the listRenderer prop.\n *\n * @export\n * @param {list[object]} props.data\n * @param {component} props.listRenderer\n * @param {function(list[object], string): list[object]} props.filterFunc\n */\nexport function FilteredList(props) {\n    const { data, listRenderer, filterFunc, ...rest } = props;\n    const Renderer = listRenderer;\n    const [query, setQuery] = useState(\"\");\n\n    let filteredData = filterFunc(data, query);\n\n    return (\n        <div>\n            <input\n                type=\"text\"\n                value={query}\n                onChange={e => setQuery(e.target.value)}\n            />\n            <Renderer data={filteredData} {...rest} />\n        </div>\n    );\n}\n\nFilteredList.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.any),\n    listRenderer: PropTypes.elementType,\n    filterFunc: PropTypes.func\n};\n","import React from \"react\";\nimport { strip } from \"../../libs/utils\";\nimport { connect } from \"react-redux\";\nimport { SessionEditor } from \"../../components/forms/session-editor\";\nimport { upsertSession, sessionsSelector } from \"../../api/actions\";\nimport { Modal, Button, Alert } from \"react-bootstrap\";\n\nfunction getConficts(session, sessions = []) {\n    const ret = { delayShow: \"\", immediateShow: \"\" };\n    if (\n        !strip(session.name) ||\n        !strip(session.start_date) ||\n        !strip(session.end_date)\n    ) {\n        ret.delayShow = \"A first name, start date, and end date is required\";\n    }\n    const matchingSession = sessions.find(\n        x => strip(x.name) === strip(session.name)\n    );\n    if (matchingSession) {\n        ret.immediateShow = (\n            <p>Another session exists with name={session.name}</p>\n        );\n    }\n    return ret;\n}\n\nconst BLANK_SESSION = {\n    name: \"\",\n    start_date: \"\",\n    end_date: \"\",\n    rate1: \"\",\n    rate2: \"\"\n};\n\nexport function AddSessionDialog(props) {\n    const { show, onHide = () => {}, sessions, upsertSession } = props;\n    const [newSession, setNewSession] = React.useState(BLANK_SESSION);\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewSession(BLANK_SESSION);\n        }\n    }, [show]);\n\n    function createInstructor() {\n        upsertSession(newSession);\n        onHide();\n    }\n\n    const conflicts = getConficts(newSession, sessions);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Session</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <SessionEditor\n                    session={newSession}\n                    setSession={setNewSession}\n                />\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createInstructor}\n                    title={conflicts.delayShow || \"Create Session\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    Create Session\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport const ConnectedAddSessionDialog = connect(\n    state => ({ sessions: sessionsSelector(state) }),\n    { upsertSession }\n)(AddSessionDialog);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactTable from \"react-table\";\nimport { docApiPropTypes } from \"../api/defs/doc-generation\";\n\nconst DEFAULT_COLUMNS = [\n    { Header: \"Name\", accessor: \"name\" },\n    { Header: \"Start\", accessor: \"start_date\" },\n    { Header: \"End\", accessor: \"end_date\" },\n    { Header: \"Rate (Pre-January)\", accessor: \"rate1\" },\n    { Header: \"Rate (Post-January)\", accessor: \"rate2\" }\n];\n\n/**\n * List the sessions using a ReactTable. `columns` can be passed\n * in to customize columns/cell renderers.\n *\n * @export\n * @param {{sessions: object[], columns: object[]}} props\n * @returns\n */\nexport function SessionsList(props) {\n    const { sessions, columns = DEFAULT_COLUMNS } = props;\n    return (\n        <React.Fragment>\n            <h3>Sessions</h3>\n            <ReactTable\n                data={sessions}\n                columns={columns}\n                showPagination={false}\n                minRows={1}\n            />\n        </React.Fragment>\n    );\n}\nSessionsList.propTypes = {\n    sessions: PropTypes.arrayOf(docApiPropTypes.session).isRequired,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({ Header: PropTypes.any.isRequired })\n    )\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { ConnectedAddSessionDialog } from \"./add-session-dialog\";\nimport { Button } from \"react-bootstrap\";\nimport { sessionsSelector } from \"../../api/actions\";\nimport { SessionsList } from \"../../components/sessions\";\n\nconst ConnectedSessionList = connect(state => ({\n    sessions: sessionsSelector(state)\n}))(SessionsList);\n\nexport function AdminSessionsView() {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    return (\n        <div>\n            <Button\n                onClick={() => {\n                    setAddDialogVisible(true);\n                }}\n            >\n                Add Session\n            </Button>\n            <ConnectedAddSessionDialog\n                show={addDialogVisible}\n                onHide={() => {\n                    setAddDialogVisible(false);\n                }}\n            />\n            <ConnectedSessionList />\n        </div>\n    );\n}\n\nexport { ConnectedAddSessionDialog };\n","import React from \"react\";\nimport { strip } from \"../../libs/utils\";\nimport { connect } from \"react-redux\";\nimport {\n    upsertPosition,\n    positionsSelector,\n    instructorsSelector,\n    contractTemplatesSelector\n} from \"../../api/actions\";\nimport { Modal, Button, Alert } from \"react-bootstrap\";\nimport { PositionEditor } from \"../../components/forms/position-editor\";\n\nfunction getConficts(position, positions = []) {\n    const ret = { delayShow: \"\", immediateShow: \"\" };\n    if (\n        !strip(position.position_code) ||\n        !strip(position.start_date) ||\n        !strip(position.end_date)\n    ) {\n        ret.delayShow = \"A position code, start date, and end date is required\";\n    }\n    const matchingSession = positions.find(\n        x => strip(x.position_code) === strip(position.position_code)\n    );\n    if (matchingSession) {\n        ret.immediateShow = (\n            <p>Another position exists with name={position.position_code}</p>\n        );\n    }\n    return ret;\n}\n\nconst BLANK_POSITION = {\n    position_code: \"\",\n    position_title: \"\",\n    hours_per_assignment: 0,\n    contract_template_id: null,\n    duties:\n        \"Some combination of marking, invigilating, tutorials, office hours, and the help centre.\",\n    instructors: []\n};\n\nexport function AddPositionDialog(props) {\n    const {\n        show,\n        onHide = () => {},\n        positions,\n        upsertPosition,\n        instructors,\n        contractTemplates\n    } = props;\n    const [newPosition, setNewPosition] = React.useState(BLANK_POSITION);\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewPosition(BLANK_POSITION);\n        }\n    }, [show]);\n\n    // select a suitable default for the contract template\n    React.useEffect(() => {\n        // Look for a contract template whose name is \"standard\" or \"default\";\n        // If that fails, find one whose name contains \"standard\" or \"default\";\n        // If all else fails, pick the first template in the list\n        const defaultTemplate =\n            contractTemplates.find(\n                x => x.template_name.toLowerCase() === \"standard\"\n            ) ||\n            contractTemplates.find(\n                x => x.template_name.toLowerCase() === \"default\"\n            ) ||\n            contractTemplates.find(x =>\n                x.template_name.toLowerCase().includes(\"standard\")\n            ) ||\n            contractTemplates.find(x =>\n                x.template_name.toLowerCase().includes(\"default\")\n            ) ||\n            contractTemplates[0];\n        if (defaultTemplate) {\n            BLANK_POSITION.contract_template = defaultTemplate;\n            BLANK_POSITION.contract_template_id = defaultTemplate.id;\n        }\n    }, [contractTemplates]);\n\n    function createPosition() {\n        upsertPosition(newPosition);\n        onHide();\n    }\n\n    const conflicts = getConficts(newPosition, positions);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Position</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <PositionEditor\n                    position={newPosition}\n                    setPosition={setNewPosition}\n                    instructors={instructors}\n                    contractTemplates={contractTemplates}\n                    defaultContractTemplate={BLANK_POSITION.contract_template}\n                />\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createPosition}\n                    title={conflicts.delayShow || \"Create Position\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    Create Position\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport const ConnectedAddPositionDialog = connect(\n    state => ({\n        positions: positionsSelector(state),\n        instructors: instructorsSelector(state),\n        contractTemplates: contractTemplatesSelector(state)\n    }),\n    { upsertPosition }\n)(AddPositionDialog);\n","import { connect } from \"react-redux\";\nimport { positionsSelector } from \"../../api/actions\";\nimport { PositionsList } from \"../../components/positions-list\";\n\nexport const ConnectedPositionsList = connect(state => ({\n    positions: positionsSelector(state)\n}))(PositionsList);\n","import React from \"react\";\nimport { ConnectedAddPositionDialog } from \"./add-position-dialog\";\nimport { Button } from \"react-bootstrap\";\nimport { ConnectedPositionsList } from \"./position-list\";\n\nexport function AdminPositionsView() {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    return (\n        <div>\n            <Button\n                onClick={() => {\n                    setAddDialogVisible(true);\n                }}\n            >\n                Add Position\n            </Button>\n            <ConnectedAddPositionDialog\n                show={addDialogVisible}\n                onHide={() => {\n                    setAddDialogVisible(false);\n                }}\n            />\n            <ConnectedPositionsList />\n        </div>\n    );\n}\n\nexport { ConnectedAddPositionDialog, ConnectedPositionsList };\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal, Alert, Button } from \"react-bootstrap\";\nimport { strip } from \"../../libs/utils\";\nimport {\n    positionsSelector,\n    applicantsSelector,\n    assignmentsSelector,\n    upsertAssignment\n} from \"../../api/actions\";\nimport { AssignmentEditor } from \"../../components/forms/assignment-editor\";\n\nfunction getConficts(assignment, assignments = []) {\n    const ret = { delayShow: \"\", immediateShow: \"\" };\n    if (!strip(assignment.position_id) || !strip(assignment.applicant_id)) {\n        ret.delayShow = \"A position and applicant is required\";\n    }\n    const matchingAssignment = assignments.find(\n        x =>\n            strip((x.position || {}).id) ===\n                strip((assignment.position || {}).id) &&\n            strip((x.applicant || {}).id) ===\n                strip((assignment.applicant || {}).id)\n    );\n    if (matchingAssignment) {\n        ret.immediateShow = (\n            <p>\n                Another assignment exists with{\" \"}\n                <b>\n                    applicant={assignment.applicant.first_name}{\" \"}\n                    {assignment.applicant.last_name}\n                </b>{\" \"}\n                and <b>position={assignment.position.position_code}</b>\n            </p>\n        );\n    }\n    return ret;\n}\n\nconst BLANK_ASSIGNMENT = {\n    position: { id: null },\n    applicant: { id: null },\n    position_id: -1,\n    applicant_id: -1\n};\n\nexport function AddAssignmentDialog(props) {\n    const {\n        show,\n        onHide,\n        positions,\n        applicants,\n        assignments,\n        upsertAssignment\n    } = props;\n    const [newAssignment, setNewAssignment] = React.useState(BLANK_ASSIGNMENT);\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewAssignment(BLANK_ASSIGNMENT);\n        }\n    }, [show]);\n\n    function createAssignment() {\n        upsertAssignment(newAssignment);\n        onHide();\n    }\n\n    const conflicts = getConficts(newAssignment, assignments);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Assignment</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <AssignmentEditor\n                    positions={positions}\n                    applicants={applicants}\n                    assignment={newAssignment}\n                    setAssignment={setNewAssignment}\n                />\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createAssignment}\n                    title={conflicts.delayShow || \"Create Position\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    Create Assignment\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport const ConnectedAddAssignmentDialog = connect(\n    state => ({\n        positions: positionsSelector(state),\n        applicants: applicantsSelector(state),\n        assignments: assignmentsSelector(state)\n    }),\n    { upsertAssignment }\n)(AddAssignmentDialog);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\nimport { offerTableSelector } from \"../offertable/actions\";\nimport {\n    assignmentsSelector,\n    wageChunksByAssignmentSelector,\n    fetchWageChunksForAssignment,\n    upsertWageChunksForAssignment\n} from \"../../api/actions\";\nimport { EditableField } from \"../../components/edit-field-widgets\";\nfunction AssignmentDetails(props) {\n    const {\n        assignment,\n        wageChunksByAssignment,\n        fetchWageChunksForAssignment,\n        upsertWageChunksForAssignment\n    } = props;\n    const [wageChunks, setWageChunks] = React.useState([]);\n    React.useEffect(() => {\n        // When the widget loads or the assignment changes, fetch data once.\n        fetchWageChunksForAssignment(assignment);\n        // We are purposely not including fetchWageChunksForAssignment in the dependency list to avoid an infite loop\n        // eslint-disable-next-line\n    }, [assignment]);\n    React.useEffect(() => {\n        // Whenever wage chunk data has changed, we need to rerender\n        setWageChunks(wageChunksByAssignment(assignment));\n    }, [assignment, wageChunksByAssignment, fetchWageChunksForAssignment]);\n    /**\n     * Creates an onChange handler for the hours field of wage chunk i\n     *\n     * @param {number} i\n     */\n    function changeHoursFactory(i) {\n        return function(hours) {\n            const newWageChunks = wageChunks.map((chunk, j) => {\n                if (i !== j) {\n                    return chunk;\n                }\n                // Update the hours for the specified chunk\n                return { ...chunk, hours: +hours };\n            });\n            upsertWageChunksForAssignment(assignment, newWageChunks);\n        };\n    }\n    return (\n        <div>\n            <h5>\n                {assignment.applicant.first_name}{\" \"}\n                {assignment.applicant.last_name}\n            </h5>\n            <div>\n                {assignment.position.position_code}{\" \"}\n                {assignment.position.position_name}\n            </div>\n            <div>{assignment.hours} hours</div>\n            Wage Chunks:\n            <ul>\n                {wageChunks.map((chunk, i) => (\n                    <li key={i}>\n                        <EditableField\n                            title=\"Hours\"\n                            value={chunk.hours}\n                            onChange={changeHoursFactory(i)}\n                        >\n                            {chunk.hours}\n                        </EditableField>{\" \"}\n                        hours at a rate of ${chunk.rate} from {chunk.start_date}{\" \"}\n                        to {chunk.end_date}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nconst ConnectedAssignmentDetails = connect(\n    state => ({\n        wageChunksByAssignment: wageChunksByAssignmentSelector(state)\n    }),\n    { fetchWageChunksForAssignment, upsertWageChunksForAssignment }\n)(AssignmentDetails);\nfunction ViewAssignmentDetailsButton(props) {\n    // Which assignments are selected could change with further UI interaction.\n    // So we store a copy of the assignments list as `visibleAssignments` when\n    // the view button is clicked\n    const selectedAssignments = props.assignments;\n    const [visibleAssignments, setVisibleAssignments] = React.useState([]);\n    return (\n        <React.Fragment>\n            <Button onClick={() => setVisibleAssignments(selectedAssignments)}>\n                View Selected Assignment Details\n            </Button>\n            {visibleAssignments.map((assignment, i) => (\n                <ConnectedAssignmentDetails assignment={assignment} key={i} />\n            ))}\n        </React.Fragment>\n    );\n}\nexport const ConnectedViewAssignmentDetailsButton = connect(state => {\n    // pass in the currently selected assignments.\n    const { selectedAssignmentIds } = offerTableSelector(state);\n    const assignments = assignmentsSelector(state);\n    return {\n        assignments: assignments.filter(x =>\n            selectedAssignmentIds.includes(x.id)\n        )\n    };\n})(ViewAssignmentDetailsButton);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\nimport { offerTableSelector } from \"../offertable/actions\";\nimport { assignmentsSelector } from \"../../api/actions\";\nimport {\n    offerForAssignmentCreate,\n    offerForAssignmentEmail,\n    offerForAssignmentNag,\n    offerForAssignmentWithdraw,\n    setOfferForAssignmentAccepted,\n    setOfferForAssignmentRejected\n} from \"../../api/actions/offers\";\n\nfunction OfferActionButtons(props) {\n    const selectedAssignments = props.assignments;\n    const {\n        offerForAssignmentCreate,\n        offerForAssignmentEmail,\n        offerForAssignmentNag,\n        offerForAssignmentWithdraw,\n        setOfferForAssignmentAccepted,\n        setOfferForAssignmentRejected\n    } = props;\n\n    function createOffers() {\n        for (const assignment of selectedAssignments) {\n            offerForAssignmentCreate(assignment);\n        }\n    }\n    function withdrawOffers() {\n        for (const assignment of selectedAssignments) {\n            offerForAssignmentWithdraw(assignment);\n        }\n    }\n    function emailOffers() {\n        for (const assignment of selectedAssignments) {\n            offerForAssignmentEmail(assignment);\n        }\n    }\n    function nagOffers() {\n        for (const assignment of selectedAssignments) {\n            offerForAssignmentNag(assignment);\n        }\n    }\n    function acceptOffers() {\n        for (const assignment of selectedAssignments) {\n            setOfferForAssignmentAccepted(assignment);\n        }\n    }\n    function rejectOffers() {\n        for (const assignment of selectedAssignments) {\n            setOfferForAssignmentRejected(assignment);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <ButtonGroup>\n                <Button onClick={createOffers}>Create Offer</Button>\n                <Button onClick={withdrawOffers}>Withdraw Offer</Button>\n                <Button onClick={emailOffers}>Email Offer</Button>\n                <Button onClick={nagOffers}>Nag Offer</Button>\n                <Button onClick={acceptOffers}>Set as Accepted</Button>\n                <Button onClick={rejectOffers}>Set as Rejected</Button>\n            </ButtonGroup>\n        </React.Fragment>\n    );\n}\nexport const ConnectedOfferActionButtons = connect(\n    state => {\n        // pass in the currently selected assignments.\n        const { selectedAssignmentIds } = offerTableSelector(state);\n        const assignments = assignmentsSelector(state);\n        return {\n            assignments: assignments.filter(x =>\n                selectedAssignmentIds.includes(x.id)\n            )\n        };\n    },\n    {\n        offerForAssignmentCreate,\n        offerForAssignmentEmail,\n        offerForAssignmentNag,\n        offerForAssignmentWithdraw,\n        setOfferForAssignmentAccepted,\n        setOfferForAssignmentRejected\n    }\n)(OfferActionButtons);\n","import React from \"react\";\nimport { ConnectedOfferTable } from \"../offertable\";\nimport { Button } from \"react-bootstrap\";\nimport { ConnectedAddAssignmentDialog } from \"./add-assignment-dialog\";\nimport { ConnectedViewAssignmentDetailsButton } from \"./assignment-details\";\nimport { ConnectedOfferActionButtons } from \"./offer-actions\";\n\nexport function AdminAssignmentsView() {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    return (\n        <div>\n            <Button\n                onClick={() => {\n                    setAddDialogVisible(true);\n                }}\n            >\n                Add Assignment\n            </Button>\n            <ConnectedOfferTable />\n            <ConnectedAddAssignmentDialog\n                show={addDialogVisible}\n                onHide={setAddDialogVisible}\n            />\n            <div>\n                <ConnectedViewAssignmentDetailsButton />\n            </div>\n            <div>\n                <ConnectedOfferActionButtons />\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal, Button, Alert } from \"react-bootstrap\";\nimport {\n    contractTemplatesSelector,\n    allContractTemplatesSelector,\n    upsertContractTemplate,\n    fetchAllContractTemplates\n} from \"../../api/actions\";\nimport { strip } from \"../../libs/utils\";\nimport { ContractTemplateEditor } from \"../../components/forms/contract-template-editor\";\n\nconst BLANK_CONTRACT_TEMPLATE = {\n    template_name: \"\",\n    template_file: \"\"\n};\n\n/**\n * Find if there is a conflicting instructor in the passed in list\n * of instructors, or if any required fields are incorrect.\n *\n * @param {object} contractTemplate\n * @param {object[]} contractTemplates\n */\nfunction getConficts(contractTemplate, contractTemplates) {\n    const ret = { delayShow: \"\", immediateShow: \"\" };\n    if (\n        !strip(contractTemplate.template_name) ||\n        !strip(contractTemplate.template_file)\n    ) {\n        ret.delayShow = \"A template name and template file is required\";\n    }\n    const matchingTemplate = contractTemplates.find(\n        x => strip(x.template_name) === strip(contractTemplate.template_name)\n    );\n    if (matchingTemplate) {\n        ret.immediateShow = (\n            <p>\n                Another contract template exists with name=\n                {contractTemplate.template_name}:{\" \"}\n                <b>\n                    {matchingTemplate.template_name}{\" \"}\n                    {matchingTemplate.template_file}\n                </b>\n            </p>\n        );\n    }\n    return ret;\n}\n\nfunction AddContractTemplateDialog(props) {\n    const {\n        show,\n        onHide = () => {},\n        contractTemplates,\n        availableTemplates,\n        upsertContractTemplate,\n        fetchAllContractTemplates\n    } = props;\n    const [newContractTemplate, setNewContractTemplate] = React.useState(\n        BLANK_CONTRACT_TEMPLATE\n    );\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewContractTemplate(BLANK_CONTRACT_TEMPLATE);\n        } else {\n            // If we've just become visible, fetch all available contract templates\n            fetchAllContractTemplates();\n        }\n    }, [show, fetchAllContractTemplates]);\n\n    function createContractTemplate() {\n        upsertContractTemplate(newContractTemplate);\n        onHide();\n    }\n\n    const conflicts = getConficts(newContractTemplate, contractTemplates);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Contract Template</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <ContractTemplateEditor\n                    contractTemplate={newContractTemplate}\n                    setContractTemplate={setNewContractTemplate}\n                    availableTemplates={availableTemplates}\n                />\n\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createContractTemplate}\n                    title={conflicts.delayShow || \"Create Contract Template\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    Create Contract Template\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n/**\n * AddContractTemplateDialog that has been connected to the redux store\n */\nexport const ConnectedAddContractTemplateDialog = connect(\n    state => ({\n        contractTemplates: contractTemplatesSelector(state),\n        availableTemplates: allContractTemplatesSelector(state)\n    }),\n    { upsertContractTemplate, fetchAllContractTemplates }\n)(AddContractTemplateDialog);\n","import { connect } from \"react-redux\";\nimport { contractTemplatesSelector } from \"../../api/actions\";\nimport { ContractTemplatesList } from \"../../components/contract-templates-list\";\n\nexport const ConnectedContractTemplateList = connect(state => ({\n    contractTemplates: contractTemplatesSelector(state)\n}))(ContractTemplatesList);\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { ConnectedAddContractTemplateDialog } from \"./contract-template-dialog\";\nimport { ConnectedContractTemplateList } from \"./contract-template-list\";\n\nexport function AdminContractTemplatesView() {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    return (\n        <div>\n            <Button\n                onClick={() => {\n                    setAddDialogVisible(true);\n                }}\n            >\n                Add Contract Template\n            </Button>\n            <ConnectedContractTemplateList />\n            <ConnectedAddContractTemplateDialog\n                show={addDialogVisible}\n                onHide={setAddDialogVisible}\n            />\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport Dashboard from \"../dashboard\";\nimport ControlPanel from \"../cp_control_panel/ControlPanel\";\nimport { AdminIstructorsView } from \"../instructors\";\nimport { AdminSessionsView } from \"../sessions\";\nimport { AdminPositionsView } from \"../positions\";\nimport { AdminAssignmentsView } from \"../assignments\";\nimport { AdminContractTemplatesView } from \"../contract_template\";\n\nexport function AdminRoutes() {\n    return (\n        <Switch>\n            <Route exact path=\"/\">\n                <Redirect to=\"/tapp\" />\n            </Route>\n            <Route exact path=\"/tapp/sessions\">\n                <AdminSessionsView />\n            </Route>\n            <Route exact path=\"/tapp/contract_templates\">\n                <AdminContractTemplatesView />\n            </Route>\n            <Route exact path=\"/tapp/instructors\">\n                <AdminIstructorsView />\n            </Route>\n            <Route exact path=\"/tapp/positions\">\n                <AdminPositionsView />\n            </Route>\n            <Route exact path=\"/tapp/assignments\">\n                <AdminAssignmentsView />\n            </Route>\n            <Route exact path=\"/dashboard\">\n                <Dashboard />\n            </Route>\n            <Route exact path=\"/cp\">\n                <ControlPanel />\n            </Route>\n        </Switch>\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Nav, Navbar, NavDropdown } from \"react-bootstrap\";\nimport { Route, NavLink } from \"react-router-dom\";\n\n/**\n * Wrap `\"react-router-dom\"`'s `NavLink` in Bootstrap\n * styling.\n *\n * @param {*} props\n * @returns\n */\nexport function BootstrapNavLink(props) {\n    return (\n        <Nav.Link as={NavLink} activeClassName=\"text-dark\" {...props}>\n            {props.children}\n        </Nav.Link>\n    );\n}\nBootstrapNavLink.propTypes = {\n    to: PropTypes.string\n};\n\n/**\n * Render a header that dynamically adjusts depending on the route\n * (as determined by `react-router-dom`). Top-level routes appear in\n * a dropdown menu. Subroutes (which only show when the top-level route is active)\n * appear as a horizontal list. A toplevel route takes the form\n *\n * ```\n * {\n *    route: \"/some/route\"\n *    name: \"Display Name\"\n *    description: \"Alt Text\"\n *    subroutes: [<same as routes>]\n * }\n * ```\n *\n * `subroutes.route` is automatically prefixed with the parent's `route`.\n *\n * @export\n * @param {object[]} props.routes\n * @returns\n */\nexport function Header(props) {\n    const { routes = [], infoComponents = null } = props;\n\n    if (routes.length === 0) {\n        return <div>No Routes in Header</div>;\n    }\n\n    return (\n        <Navbar bg=\"light\" variant=\"light\">\n            <Navbar.Brand>\n                <NavDropdown\n                    title={routes.map(route => (\n                        <Route path={route.route} key={route.route}>\n                            {route.name}\n                        </Route>\n                    ))}\n                >\n                    {routes\n                        .filter(route => !route.hidden)\n                        .map(route => (\n                            <NavDropdown.Item\n                                key={route.route}\n                                as=\"span\"\n                                tabIndex=\"0\"\n                            >\n                                <BootstrapNavLink\n                                    to={route.route}\n                                    title={route.description}\n                                >\n                                    {route.name}\n                                </BootstrapNavLink>\n                            </NavDropdown.Item>\n                        ))}\n                </NavDropdown>\n            </Navbar.Brand>\n            <Nav className=\"mr-auto\">\n                {routes.map(route => (\n                    <Route path={route.route} key={route.route}>\n                        {(route.subroutes || []).map(subroute => {\n                            const fullroute = `${route.route}${subroute.route}`;\n                            return (\n                                <BootstrapNavLink\n                                    to={fullroute}\n                                    key={fullroute}\n                                    title={subroute.description}\n                                >\n                                    {subroute.name}\n                                </BootstrapNavLink>\n                            );\n                        })}\n                    </Route>\n                ))}\n            </Nav>\n            {infoComponents.map((component, index) => (\n                <div key={index}>{component}</div>\n            ))}\n        </Navbar>\n    );\n}\nHeader.propTypes = {\n    routes: PropTypes.arrayOf(\n        PropTypes.shape({\n            route: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            description: PropTypes.string,\n            subroutes: PropTypes.arrayOf(\n                PropTypes.shape({\n                    route: PropTypes.string.isRequired,\n                    name: PropTypes.string.isRequired,\n                    description: PropTypes.string\n                })\n            )\n        })\n    ),\n    infoComponents: PropTypes.array\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Dropdown, FormControl } from \"react-bootstrap\";\n/**\n * react-bootstrap dropdown menu that is filterable. Expects\n * children which are `Dropdown.Item` and contain just text\n * as content. To use, set as the `as=` attribute on a `Dropdown.Menu`.\n *\n * Notes: Because of the way react-bootstrap works, this\n * component must be wrapped in a `React.formwardRef`.\n */\nconst FilterableMenuContents = React.forwardRef((props, ref) => {\n    const { children, style, className, clearFilter } = props;\n    const [filter, setFilter] = React.useState(\"\");\n    // If the `clearFilter` flag is set, make sure we start\n    // with an empty filter. This is used to clear the filter when the\n    // widget is hidden.\n    React.useEffect(() => {\n        if (clearFilter) {\n            setFilter(\"\");\n        }\n    }, [clearFilter]);\n    function onChange(e) {\n        setFilter(e.currentTarget.value);\n    }\n    // Filter the child `Dropdown.Item` items\n    const sessionList = React.Children.toArray(children).filter(\n        child =>\n            !filter.trim() ||\n            child.props.children.toLowerCase().includes(filter.trim())\n    );\n    // The sessions list could be empty for two reasons: there are\n    // no sessions, or we've filtered them all away. Display an\n    // appropriate message in either case\n    const emptyListMessage =\n        children.length === 0\n            ? \"No Available Sessions\"\n            : \"No Matching Sessions\";\n    return (\n        <div style={style} className={className} ref={ref}>\n            <FormControl\n                autoFocus\n                className=\"mx-3 my-2 w-auto\"\n                placeholder=\"Type to filter...\"\n                title=\"Filter sessions\"\n                onChange={onChange}\n                value={filter}\n                tabIndex={0}\n            />\n            <ul className=\"list-unstyled my-0\">\n                {sessionList.length > 0 ? (\n                    sessionList\n                ) : (\n                    <li className=\"dropdown-item text-muted\">\n                        {emptyListMessage}\n                    </li>\n                )}\n            </ul>\n        </div>\n    );\n});\n/**\n * A menu that nests inside a `Dropdown`. Pass in a list\n * `items` which are objects of the form `{id: ..., name: ...}`.\n * When `onSelect` is triggered, it will be passed the index of the clicked-upon\n * item in the `items` array.\n *\n * @param {*} props\n * @returns\n */\nexport function FilterableMenu(props) {\n    const { items, activeItemId, clearFilter } = props;\n    return (\n        <Dropdown.Menu as={FilterableMenuContents} clearFilter={clearFilter}>\n            {items.map((s, index) => (\n                <Dropdown.Item\n                    key={s.id}\n                    eventKey={index}\n                    active={activeItemId === s.id}\n                >\n                    {s.name}\n                </Dropdown.Item>\n            ))}\n        </Dropdown.Menu>\n    );\n}\nFilterableMenu.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.any.isRequired,\n            name: PropTypes.string.isRequired\n        })\n    ),\n    activeItemId: PropTypes.any,\n    clearFilter: PropTypes.bool\n};\n","import React from \"react\";\nimport { Header } from \"../../components/header\";\nimport { connect } from \"react-redux\";\nimport {\n    setActiveUserRole,\n    setActiveSession,\n    usersSelector,\n    sessionsSelector,\n    activeSessionSelector\n} from \"../../api/actions\";\nimport { ActiveUserDisplay } from \"../../components/active-user\";\nimport { ActiveSessionDisplay } from \"../../components/active-session\";\n\n/**\n * Header showing the routes that a user with `role=admin`\n * can see.\n *\n * @returns\n */\nfunction AdminHeader() {\n    return (\n        <Header\n            routes={[\n                {\n                    route: \"/tapp\",\n                    name: \"TAPP\",\n                    description: \"TAPP Main View\",\n                    subroutes: [\n                        {\n                            route: \"/sessions\",\n                            name: \"Sessions\",\n                            description: \"Manage Sessions\"\n                        },\n                        {\n                            route: \"/contract_templates\",\n                            name: \"Contract Templates\",\n                            description: \"Manage Contract Templates\"\n                        },\n                        {\n                            route: \"/instructors\",\n                            name: \"Instructors\",\n                            description: \"Manage Instructors\"\n                        },\n                        {\n                            route: \"/positions\",\n                            name: \"Positions\",\n                            description: \"Manage Positions\"\n                        },\n                        {\n                            route: \"/assignments\",\n                            name: \"Assignments\",\n                            description: \"Manage Assignments\"\n                        },\n                        {\n                            route: \"/summary\",\n                            name: \"Summary\",\n                            description: \"Overivew of all data\"\n                        }\n                    ]\n                },\n                {\n                    route: \"/cp\",\n                    name: \"CP\",\n                    description: \"Contract Presentment\",\n                    subroutes: [\n                        {\n                            route: \"/statistics\",\n                            name: \"Statistics\",\n                            description:\n                                \"See statistics about accepted/rejected contracts\"\n                        }\n                    ]\n                },\n                {\n                    route: \"/dashboard\",\n                    name: \"Dashboard\",\n                    description: \"List of all widgets\",\n                    hidden: true\n                }\n            ]}\n            infoComponents={[\n                <ConnectedActiveSessionDisplay />,\n                <ConnectedActiveUserDisplay />\n            ]}\n        />\n    );\n}\n\nconst mapSessionsStateToProps = state => ({\n    sessions: sessionsSelector(state),\n    activeSession: activeSessionSelector(state)\n});\n\nconst mapSessionsDispatchToProps = { setActiveSession };\n\nconst ConnectedActiveSessionDisplay = connect(\n    mapSessionsStateToProps,\n    mapSessionsDispatchToProps\n)(ActiveSessionDisplay);\n\nconst mapActiveUserStateToProps = state => ({\n    activeUser: usersSelector(state).active_user,\n    activeRole: usersSelector(state).active_role\n});\n\nconst mapActiveUserDispatchToProps = { setActiveUserRole };\n\nconst ConnectedActiveUserDisplay = connect(\n    mapActiveUserStateToProps,\n    mapActiveUserDispatchToProps\n)(ActiveUserDisplay);\n\nexport { AdminHeader };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FilterableMenu } from \"./filterable-menu\";\nimport { Badge, Dropdown } from \"react-bootstrap\";\nimport { apiPropTypes } from \"../api/defs/prop-types\";\n\nexport function ActiveSessionDisplay(props) {\n    const { sessions = [], activeSession, setActiveSession } = props;\n    // keep track of the dropdown visibility so that the filter can be cleared\n    // whenever the dropdown is invisible.\n    const [dropdownVisible, setDropdownVisible] = React.useState(false);\n    const activeSessionId = activeSession ? activeSession.id : null;\n\n    const label = !activeSessionId ? (\n        <span className=\"text-secondary mr-2\">Select a Session</span>\n    ) : (\n        <span className=\"text-primary mr-2\">{activeSession.name}</span>\n    );\n\n    return (\n        <Badge>\n            Selected session:\n            <Dropdown\n                onSelect={i => {\n                    setActiveSession(sessions[i]);\n                }}\n                onToggle={desiredVisibility =>\n                    setDropdownVisible(desiredVisibility)\n                }\n                show={dropdownVisible}\n            >\n                <Dropdown.Toggle split variant=\"light\">\n                    {label}\n                </Dropdown.Toggle>\n                <FilterableMenu\n                    items={sessions}\n                    activeItemId={activeSessionId}\n                    clearFilter={!dropdownVisible}\n                />\n            </Dropdown>\n        </Badge>\n    );\n}\nActiveSessionDisplay.propTypes = {\n    setActiveSession: PropTypes.func.isRequired,\n    sessions: PropTypes.arrayOf(apiPropTypes.session).isRequired,\n    activeSession: apiPropTypes.session\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Badge, Dropdown } from \"react-bootstrap\";\nimport { apiPropTypes } from \"../api/defs/prop-types\";\n\nexport function ActiveUserDisplay(props) {\n    const [dropdownVisible, setDropdownVisible] = React.useState(false);\n    const {\n        activeUser = { utorid: \"<noid>\", roles: [] },\n        activeRole,\n        setActiveUserRole\n    } = props;\n\n    const roles = activeUser.roles;\n    const label = !activeRole ? (\n        <span className=\"text-secondary mr-2\">Select a role</span>\n    ) : (\n        <span className=\"text-primary mr-2\">{activeRole}</span>\n    );\n\n    const isActiveRole = role => {\n        return activeRole === role;\n    };\n    return (\n        <Badge>\n            Login: {activeUser.utorid}\n            {\" as\"}\n            <Dropdown\n                onSelect={i => {\n                    setActiveUserRole(roles[i]);\n                }}\n                onToggle={desiredVisibility =>\n                    setDropdownVisible(desiredVisibility)\n                }\n                show={dropdownVisible}\n            >\n                <Dropdown.Toggle split variant=\"light\">\n                    {label}\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                    {(roles || []).map((role, index) => (\n                        <Dropdown.Item\n                            key={index}\n                            eventKey={index}\n                            active={isActiveRole(role)}\n                        >\n                            {role}\n                        </Dropdown.Item>\n                    ))}\n                </Dropdown.Menu>\n            </Dropdown>\n        </Badge>\n    );\n}\nActiveUserDisplay.propTypes = {\n    activeUser: apiPropTypes.user,\n    activeRole: PropTypes.string,\n    setActiveUserRole: PropTypes.func.isRequired\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { setGlobals } from \"./views/globals/actions\";\nimport { parseURLSearchString } from \"./libs/urlUtils\";\nimport { runOnActiveSessionChange } from \"./api/actions/utils\";\nimport { setActiveSession, fetchActiveUser } from \"./api/actions\";\nimport { ConnectedNotifications } from \"./views/notificatons\";\nimport { AdminRoutes } from \"./views/routes\";\nimport { AdminHeader } from \"./views/admin\";\n\nclass App extends React.Component {\n    componentDidMount() {\n        // Some special values can be persisted in the url search string.\n        // This is mainly for development with the mockAPI so that a page\n        // can be refreshed and appear in the same state that it was.\n        if (!window.location) {\n            return;\n        }\n        const newGlobals = parseURLSearchString(window.location.search);\n        this.props.setGlobals(newGlobals);\n\n        // Set up a special handler for when the active session changes. We want to store\n        // this in the URL string\n        runOnActiveSessionChange(() => async (dispatch, getState) => {\n            const state = getState();\n            const activeSession = state.model.sessions.activeSession;\n            const globals = state.ui.globals;\n            this.props.setGlobals({\n                ...globals,\n                activeSession: activeSession.id\n            });\n        });\n        // We need to make sure we have an active user before continuing\n        window.setTimeout(() => {\n            this.props.fetchActiveUser();\n        }, 0);\n\n        // If there is an `activeSession` stored in globals, use it to set the active\n        // session now. (This is a one-time action)\n        if (newGlobals.activeSession != null) {\n            // If the mockAPI is enabled, we need to let it get set up\n            // before we attempt to fetch a bunch of data. Therefore,\n            // we do a `setTimeout`\n            window.setTimeout(() => {\n                this.props.fetchActiveUser();\n                this.props.setActiveSession({\n                    id: newGlobals.activeSession\n                });\n            }, 0);\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <AdminHeader />\n                <AdminRoutes />\n                <ConnectedNotifications />\n            </React.Fragment>\n        );\n    }\n}\n\nconst ConnectedApp = connect(\n    state => ({\n        globals: state.ui.globals\n    }),\n    { setGlobals, setActiveSession, fetchActiveUser }\n)(App);\n\nexport default ConnectedApp;\n","import { SET_SELECTED_ROWS } from \"./constants\";\nimport { createReducer } from \"redux-create-reducer\";\n\n// initialize the state of offer table\nconst initialState = {\n    selectedAssignmentIds: []\n};\n\nconst offerTableReducer = createReducer(initialState, {\n    [SET_SELECTED_ROWS]: (state, action) => {\n        return { ...state, selectedAssignmentIds: action.payload };\n    }\n});\n\nexport default offerTableReducer;\n","import { createReducer } from \"redux-create-reducer\";\nimport { SET_GLOBALS } from \"./constants\";\n\nexport const globalReducer = createReducer(\n    {},\n    {\n        [SET_GLOBALS]: (state, action) => ({\n            ...action.payload\n        })\n    }\n);\n","export const SET_GLOBALS = \"SET_GLOBALS\";\n","import { reducer as formReducer } from \"redux-form\";\nimport { reducer as notificationReducer } from \"react-notification-system-redux\";\nimport { combineReducers } from \"./api/reducers/utils\";\nimport offerTableReducer from \"./views/offertable/reducers\";\nimport { globalReducer } from \"./views/globals/reducers\";\nimport {\n    statusReducer,\n    sessionsReducer,\n    positionsReducer,\n    applicantsReducer,\n    applicationsReducer,\n    assignmentsReducer,\n    instructorsReducer,\n    contractTemplatesReducer\n} from \"./api/reducers\";\nimport { usersReducer } from \"./api/reducers/users\";\n\n// When `combineReducers` is used,\n// every action gets dispatched to every reducer.\n// Since reducers don't change the state on unrecognized\n// actions, this is okay. Further, each reducer believes\n// it has its own top-level state, but in reality it is\n// just passed a part of the whole state. E.g., if `combineReducers`\n// is passed\n//   {\n//      mypath: myReducer\n//   }\n// When `myReducer(localState)` is called, `localSate == globalState.mypath`.\nconst reducer = combineReducers({\n    model: combineReducers({\n        status: statusReducer,\n        sessions: sessionsReducer,\n        positions: positionsReducer,\n        applicants: applicantsReducer,\n        applications: applicationsReducer,\n        assignments: assignmentsReducer,\n        instructors: instructorsReducer,\n        contractTemplates: contractTemplatesReducer,\n        users: usersReducer\n    }),\n    ui: combineReducers({\n        notifications: notificationReducer,\n        form: formReducer,\n        offerTable: offerTableReducer,\n        globals: globalReducer\n    })\n});\n\nexport default reducer;\n","import { createReducer } from \"./utils\";\nimport { API_INTERACTION_START, API_INTERACTION_END } from \"../constants\";\n\nconst initialState = {\n    ongoingInteraction: false,\n    ongoingInteractionsList: []\n};\n\n// Keep a list of all ongoing interactions that are in progress.\n// This way we could display a spinner or some-such while interactions\n// are going on. Interactions will be mostly network-based interactions.\nexport const statusReducer = createReducer(initialState, {\n    [API_INTERACTION_START]: (state, action) => ({\n        ...state,\n        ongoingInteraction: true,\n        ongoingInteractionsList: [\n            ...state.ongoingInteractionsList,\n            action.payload\n        ]\n    }),\n    [API_INTERACTION_END]: (state, action) => {\n        // remove the current interaction\n        const ongoingInteractionsList = state.ongoingInteractionsList.filter(\n            i => i.id !== action.payload.id\n        );\n        return {\n            ...state,\n            ongoingInteraction: ongoingInteractionsList.length > 0,\n            ongoingInteractionsList: ongoingInteractionsList\n        };\n    }\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport rootReducer from \"./rootReducer\";\nimport thunk from \"redux-thunk\";\n\n/* eslint-disable */\nconst configureStore = () => {\n    const persistConfig = {\n        key: \"root\",\n        storage,\n        whitelist: [\"auth\", \"application\"]\n    };\n    const persistedReducer = persistReducer(persistConfig, rootReducer);\n    const store = createStore(\n        persistedReducer,\n        composeWithDevTools(applyMiddleware(thunk))\n    );\n    const persistor = persistStore(store);\n\n    if (process.env.NODE_ENV !== \"production\") {\n        if (module.hot) {\n            module.hot.accept(\"./rootReducer\", () => {\n                store.replaceReducer(persistedReducer);\n            });\n        }\n    }\n\n    return { store, persistor };\n};\n/* eslint-enable */\n\nexport default configureStore;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { DevFrame as _DevFrame } from \"./views/dev_frame\";\nimport \"./styles/sass/main.scss\";\nimport App from \"./App\";\nimport configureStore from \"./store\";\n\nconst { store, persistor } = configureStore();\n\n// In production, we don't want to wrap the app in a dev frame,\n// but we do want to in development\nlet DevFrame = function(props) {\n    return <React.Fragment>{props.children}</React.Fragment>;\n};\n/* eslint-disable */\nif (process.env.REACT_APP_DEV_FEATURES) {\n    DevFrame = _DevFrame;\n}\n/* eslint-enable */\n\nconst render = Component => {\n    return ReactDOM.render(\n        <HashRouter>\n            <Provider store={store}>\n                <PersistGate persistor={persistor}>\n                    <DevFrame>\n                        <Component />\n                    </DevFrame>\n                </PersistGate>\n            </Provider>\n        </HashRouter>,\n        document.getElementById(\"root\")\n    );\n};\n\nrender(App);\n\n// Hot module reloading\n// https://medium.com/@brianhan/hot-reloading-cra-without-eject-b54af352c642\n\n/*eslint-disable */\nif (module.hot) {\n    module.hot.accept(\"./App\", () => {\n        const NextApp = require(\"./App\").default;\n        render(NextApp);\n    });\n}\n/*eslint-enable */\n"],"sourceRoot":""}